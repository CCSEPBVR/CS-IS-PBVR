#ifdef KVS_ENABLE_GLEW
#include <GL/glew.h>
#endif

#include <string>
#include <kvs/HSVColor>
#include <kvs/DivergingColorMap>
#include "ColorMapLibrary.h"
#include <algorithm>

#ifdef WIN32
#define _USE_MATH_DEFINES
#include <math.h>
#endif

using namespace kvs::visclient;

ColorMapLibrary::ColorMapLibrary( const size_t resolution ):
    m_resolution( resolution )
{
    const float min_value = 0.00;
    const float max_value = 1.00;
    const float stride = ( max_value - min_value ) / ( resolution - 1 );

    kvs::ColorMap color_map;

    //2hot
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 10.625, 0, 0 ));
    color_map.addPoint(-0.873016, kvs::RGBColor( 53.1249, 0, 0 ));
    color_map.addPoint(-0.746032, kvs::RGBColor( 95.625, 0, 0 ));
    color_map.addPoint(-0.619048, kvs::RGBColor( 138.125, 0, 0 ));
    color_map.addPoint(-0.492063, kvs::RGBColor( 180.625, 0, 0 ));
    color_map.addPoint(-0.365079, kvs::RGBColor( 217.805, 0, 0 ));
    color_map.addPoint(-0.238095, kvs::RGBColor( 239.059, 9.96081, 0 ));
    color_map.addPoint(-0.111111, kvs::RGBColor( 255, 53.1249, 0 ));
    color_map.addPoint(0.015873, kvs::RGBColor( 255, 95.625, 0 ));
    color_map.addPoint(0.142857, kvs::RGBColor( 255, 138.125, 0 ));
    color_map.addPoint(0.269841, kvs::RGBColor( 255, 180.625, 0 ));
    color_map.addPoint(0.396825, kvs::RGBColor( 255, 218.995, 7.96875 ));
    color_map.addPoint(0.52381, kvs::RGBColor( 255, 241.585, 39.8438 ));
    color_map.addPoint(0.650794, kvs::RGBColor( 255, 255, 79.6875 ));
    color_map.addPoint(0.777778, kvs::RGBColor( 255, 255, 143.438 ));
    color_map.addPoint(0.904762, kvs::RGBColor( 255, 255, 207.188 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("2hot", color_map);

    //Asymmetrical Earth Tones (6_21b)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 35.9999, 38.0001, 51 ));
    color_map.addPoint(0.05, kvs::RGBColor( 54.9999, 66.0001, 82.0001 ));
    color_map.addPoint(0.1, kvs::RGBColor( 61.9999, 93.9999, 97 ));
    color_map.addPoint(0.15, kvs::RGBColor( 70, 112, 102 ));
    color_map.addPoint(0.2, kvs::RGBColor( 82.9999, 128, 98.0001 ));
    color_map.addPoint(0.25, kvs::RGBColor( 103, 153, 107 ));
    color_map.addPoint(0.3, kvs::RGBColor( 124, 179, 116 ));
    color_map.addPoint(0.35, kvs::RGBColor( 142, 191, 126 ));
    color_map.addPoint(0.4, kvs::RGBColor( 171, 204, 139 ));
    color_map.addPoint(0.5, kvs::RGBColor( 218, 230, 161 ));
    color_map.addPoint(0.55, kvs::RGBColor( 236, 240, 177 ));
    color_map.addPoint(0.6, kvs::RGBColor( 245, 242, 198 ));
    color_map.addPoint(0.65, kvs::RGBColor( 252, 247, 232 ));
    color_map.addPoint(0.7, kvs::RGBColor( 214, 208, 197 ));
    color_map.addPoint(0.75, kvs::RGBColor( 179, 169, 157 ));
    color_map.addPoint(0.8, kvs::RGBColor( 153, 135, 122 ));
    color_map.addPoint(0.85, kvs::RGBColor( 128, 103, 91.9999 ));
    color_map.addPoint(0.9, kvs::RGBColor( 112, 79.9999, 74 ));
    color_map.addPoint(1, kvs::RGBColor( 77.0001, 42, 45.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Asymmetrical Earth Tones (6_21b)", color_map);

    //BLUE-WHITE
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 0, 21 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 0, 42.9999 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 0, 0, 65 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 0, 0, 86 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 0, 0, 108 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 0, 0, 130 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 0, 26.0001, 151 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 0, 52.0001, 173 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 0, 77.0001, 195 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 0, 103, 217 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 0, 129, 238 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 0, 154, 255 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 65, 180, 255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 130, 206, 255 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 195, 231, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BLUE-WHITE", color_map);

    //Black, Blue and White
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(0.333, kvs::RGBColor( 0, 0, 128 ));
    color_map.addPoint(0.666, kvs::RGBColor( 0, 128, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Black, Blue and White", color_map);

    //Black, Orange and White
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(0.333, kvs::RGBColor( 128, 0, 0 ));
    color_map.addPoint(0.666, kvs::RGBColor( 255, 128, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Black, Orange and White", color_map);

    //Black-Body Radiation
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(0.4, kvs::RGBColor( 230, 0, 0 ));
    color_map.addPoint(0.8, kvs::RGBColor( 230, 230, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Black-Body Radiation", color_map);

    //Blue - Green - Orange
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 212, 232, 250 ));
    color_map.addPoint(0.0125, kvs::RGBColor( 191, 220, 245 ));
    color_map.addPoint(0.025, kvs::RGBColor( 177, 211, 240 ));
    color_map.addPoint(0.05, kvs::RGBColor( 145, 194, 235 ));
    color_map.addPoint(0.075, kvs::RGBColor( 115, 180, 230 ));
    color_map.addPoint(0.1, kvs::RGBColor( 88, 164, 219 ));
    color_map.addPoint(0.125, kvs::RGBColor( 63, 146, 209 ));
    color_map.addPoint(0.15, kvs::RGBColor( 46, 133, 199 ));
    color_map.addPoint(0.16, kvs::RGBColor( 38.0001, 125, 191 ));
    color_map.addPoint(0.18, kvs::RGBColor( 33.0001, 114, 181 ));
    color_map.addPoint(0.2, kvs::RGBColor( 26.0001, 109, 176 ));
    color_map.addPoint(0.21, kvs::RGBColor( 24.0001, 103, 168 ));
    color_map.addPoint(0.22, kvs::RGBColor( 23, 100, 163 ));
    color_map.addPoint(0.23, kvs::RGBColor( 21, 93.9999, 158 ));
    color_map.addPoint(0.24, kvs::RGBColor( 17.9999, 90, 153 ));
    color_map.addPoint(0.25, kvs::RGBColor( 17.0001, 84.0001, 145 ));
    color_map.addPoint(0.26, kvs::RGBColor( 19.0001, 79.9999, 138 ));
    color_map.addPoint(0.27, kvs::RGBColor( 22.0001, 77.9999, 130 ));
    color_map.addPoint(0.28, kvs::RGBColor( 24.0001, 73.0001, 122 ));
    color_map.addPoint(0.29, kvs::RGBColor( 26.0001, 70.9999, 115 ));
    color_map.addPoint(0.3, kvs::RGBColor( 28, 68.0001, 105 ));
    color_map.addPoint(0.31, kvs::RGBColor( 28.9999, 66.0001, 97 ));
    color_map.addPoint(0.32, kvs::RGBColor( 28.9999, 63.9999, 89.0001 ));
    color_map.addPoint(0.33, kvs::RGBColor( 28, 68.0001, 82.0001 ));
    color_map.addPoint(0.34, kvs::RGBColor( 26.9999, 77.0001, 67 ));
    color_map.addPoint(0.35, kvs::RGBColor( 24.0001, 79, 61.9999 ));
    color_map.addPoint(0.36, kvs::RGBColor( 21, 82.0001, 58 ));
    color_map.addPoint(0.37, kvs::RGBColor( 19.0001, 86.9999, 56 ));
    color_map.addPoint(0.38, kvs::RGBColor( 17.9999, 91.9999, 54.0001 ));
    color_map.addPoint(0.39, kvs::RGBColor( 17.0001, 97, 54.9999 ));
    color_map.addPoint(0.4, kvs::RGBColor( 16, 102, 45.0001 ));
    color_map.addPoint(0.425, kvs::RGBColor( 19.0001, 107, 37 ));
    color_map.addPoint(0.45, kvs::RGBColor( 22.0001, 112, 30 ));
    color_map.addPoint(0.475, kvs::RGBColor( 31.0001, 120, 30 ));
    color_map.addPoint(0.5, kvs::RGBColor( 47.0001, 128, 38.0001 ));
    color_map.addPoint(0.525, kvs::RGBColor( 65, 138, 47.9999 ));
    color_map.addPoint(0.55, kvs::RGBColor( 82.9999, 148, 59.0001 ));
    color_map.addPoint(0.575, kvs::RGBColor( 103, 158, 70.9999 ));
    color_map.addPoint(0.6, kvs::RGBColor( 128, 171, 84.9999 ));
    color_map.addPoint(0.63, kvs::RGBColor( 151, 186, 102 ));
    color_map.addPoint(0.65, kvs::RGBColor( 189, 201, 125 ));
    color_map.addPoint(0.67, kvs::RGBColor( 219, 219, 154 ));
    color_map.addPoint(0.7, kvs::RGBColor( 235, 213, 148 ));
    color_map.addPoint(0.75, kvs::RGBColor( 230, 186, 126 ));
    color_map.addPoint(0.8, kvs::RGBColor( 219, 149, 98.9999 ));
    color_map.addPoint(0.85, kvs::RGBColor( 204, 112, 82.0001 ));
    color_map.addPoint(0.9, kvs::RGBColor( 173, 75.9999, 52.0001 ));
    color_map.addPoint(0.95, kvs::RGBColor( 140, 42.9999, 28 ));
    color_map.addPoint(0.975, kvs::RGBColor( 122, 21, 12 ));
    color_map.addPoint(1, kvs::RGBColor( 115, 1.99996, 0 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Blue - Green - Orange", color_map);

    //Blue Orange (divergent)
    color_map = kvs::ColorMap(256, -30.3399, 2.28519);
    color_map.addPoint(-30.3399, kvs::RGBColor( 22, 1, 76 ));
    color_map.addPoint(-29.3503, kvs::RGBColor( 28.9999, 6, 115 ));
    color_map.addPoint(-28.5283, kvs::RGBColor( 26.9999, 13, 130 ));
    color_map.addPoint(-27.958, kvs::RGBColor( 10, 10, 143 ));
    color_map.addPoint(-27.4045, kvs::RGBColor( 7.99999, 25, 153 ));
    color_map.addPoint(-26.8677, kvs::RGBColor( 11, 42, 163 ));
    color_map.addPoint(-26.0961, kvs::RGBColor( 14, 61.9999, 173 ));
    color_map.addPoint(-25.0729, kvs::RGBColor( 14, 81, 181 ));
    color_map.addPoint(-23.8149, kvs::RGBColor( 13, 101, 189 ));
    color_map.addPoint(-22.9993, kvs::RGBColor( 10, 119, 196 ));
    color_map.addPoint(-22.1836, kvs::RGBColor( 7.99999, 137, 201 ));
    color_map.addPoint(-21.3324, kvs::RGBColor( 7.99999, 157, 207 ));
    color_map.addPoint(-20.4601, kvs::RGBColor( 6, 181, 212 ));
    color_map.addPoint(-19.5879, kvs::RGBColor( 13, 204, 217 ));
    color_map.addPoint(-18.8666, kvs::RGBColor( 18, 218, 222 ));
    color_map.addPoint(-18.1957, kvs::RGBColor( 67, 230, 220 ));
    color_map.addPoint(-17.6086, kvs::RGBColor( 108, 240, 223 ));
    color_map.addPoint(-16.7028, kvs::RGBColor( 146, 246, 213 ));
    color_map.addPoint(-16.0989, kvs::RGBColor( 168, 250, 215 ));
    color_map.addPoint(-15.6628, kvs::RGBColor( 195, 250, 221 ));
    color_map.addPoint(-15.1931, kvs::RGBColor( 211, 250, 226 ));
    color_map.addPoint(-14.2706, kvs::RGBColor( 233, 252, 239 ));
    color_map.addPoint(-13.9854, kvs::RGBColor( 255, 255, 248 ));
    color_map.addPoint(-13.7003, kvs::RGBColor( 252, 250, 222 ));
    color_map.addPoint(-13.2809, kvs::RGBColor( 253, 248, 205 ));
    color_map.addPoint(-12.9622, kvs::RGBColor( 253, 246, 182 ));
    color_map.addPoint(-12.4255, kvs::RGBColor( 252, 244, 164 ));
    color_map.addPoint(-11.57, kvs::RGBColor( 250, 234, 130 ));
    color_map.addPoint(-10.8487, kvs::RGBColor( 247, 223, 104 ));
    color_map.addPoint(-10.1107, kvs::RGBColor( 242, 210, 82.0001 ));
    color_map.addPoint(-9.57391, kvs::RGBColor( 237, 198, 70.9999 ));
    color_map.addPoint(-8.78554, kvs::RGBColor( 232, 183, 60 ));
    color_map.addPoint(-8.08104, kvs::RGBColor( 227, 168, 49.9999 ));
    color_map.addPoint(-7.50234, kvs::RGBColor( 224, 158, 42.9999 ));
    color_map.addPoint(-6.68672, kvs::RGBColor( 222, 140, 40.0001 ));
    color_map.addPoint(-5.87109, kvs::RGBColor( 217, 121, 37 ));
    color_map.addPoint(-5.05546, kvs::RGBColor( 212, 105, 33.9999 ));
    color_map.addPoint(-4.23983, kvs::RGBColor( 207, 88, 28.9999 ));
    color_map.addPoint(-3.42421, kvs::RGBColor( 201, 68.0001, 24 ));
    color_map.addPoint(-2.60858, kvs::RGBColor( 189, 47.0001, 19 ));
    color_map.addPoint(-1.79295, kvs::RGBColor( 176, 31.9999, 16 ));
    color_map.addPoint(-0.977324, kvs::RGBColor( 158, 16, 11 ));
    color_map.addPoint(-0.214115, kvs::RGBColor( 140, 7, 18 ));
    color_map.addPoint(0.456838, kvs::RGBColor( 120, 4.00001, 23 ));
    color_map.addPoint(1.21166, kvs::RGBColor( 102, 1, 26.0001 ));
    color_map.addPoint(2.28519, kvs::RGBColor( 48, 0, 18 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Blue Orange (divergent)", color_map);

    //Blue to Red Rainbow
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 0, 0 ));
    color_map.setColorSpaceToHSV();
    color_map.create();
    this->add("Blue to Red Rainbow", color_map);

    //Blue to Yellow
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 10, 10, 242 ));
    color_map.addPoint(1, kvs::RGBColor( 242, 242, 10 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Blue to Yellow", color_map);

    //Blues Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.143,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.143,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.286,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.286,kvs::RGBColor( 78, 217, 234));
    color_map.addPoint( 0.429,kvs::RGBColor( 78, 217, 234));
    color_map.addPoint( 0.429,kvs::RGBColor( 115, 154, 213));
    color_map.addPoint( 0.571,kvs::RGBColor( 115, 154, 213));
    color_map.addPoint( 0.571,kvs::RGBColor( 66, 61, 169));
    color_map.addPoint( 0.714,kvs::RGBColor( 66, 61, 169));
    color_map.addPoint( 0.714,kvs::RGBColor( 80, 84, 135));
    color_map.addPoint( 0.857,kvs::RGBColor( 80, 84, 135));
    color_map.addPoint( 0.857,kvs::RGBColor( 16, 42, 82));
    color_map.addPoint( 1,kvs::RGBColor( 16, 42, 82));
    color_map.addPoint( 1,kvs::RGBColor( 104, 171, 0));
    color_map.create();
    this->add("Blues Step", color_map);

    //Blues
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 8.00011, 47.9999, 107 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 8.00011, 64.5647, 131.596 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 8.09803, 81.1254, 156.098 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 20.6471, 97.1882, 168.647 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 33.2589, 113.259, 181.133 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 49.8234, 129.824, 189.667 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 66.4823, 146.329, 198.188 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 87.0629, 160.384, 206.22 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 107.8, 174.439, 214.172 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 133.4, 188.494, 219.694 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 158.784, 202.333, 225.274 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 178.863, 210.867, 232.302 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 198.565, 219.376, 239.188 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 210.612, 227.408, 243.204 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 222.686, 235.439, 247.22 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 235.235, 243.471, 251.235 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 251, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Blues", color_map);

    //BrBG
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 84.0001, 47.9999, 5.00004 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 119.137, 68.7059, 8.13731 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 153, 93.2354, 18.9215 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 185, 123.353, 40.8824 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 207.314, 162.137, 85.7843 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 226.157, 199.216, 134.608 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 240.588, 223.059, 178.529 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 245.608, 237.098, 214.608 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 244.098, 244.784, 244.686 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 215.235, 237.882, 234.647 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 179.51, 226.039, 219.118 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 134.961, 207.843, 196.53 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 88.294, 176.412, 166.53 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 44.843, 143.314, 135.314 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 12.2158, 112.569, 104.569 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 0.588285, 84.7059, 75.0587 ));
    color_map.addPoint(1, kvs::RGBColor( 0, 60, 47.9999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BrBG", color_map);

    //BrOrYl
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 102, 37, 5.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 127.6, 44.5294, 4.99596 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 153.2, 52.0942, 3.99228 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 178.8, 64.1412, 2.98835 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 204.251, 76.2822, 2.14123 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 220.314, 94.3531, 11.1764 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 236.212, 112.482, 20.247 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 245.247, 133.063, 30.7882 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 254, 153.674, 41.5961 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 254, 175.259, 60.6706 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 254, 196.608, 80.2941 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 254, 212.169, 113.423 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 254.024, 227.471, 146.012 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 254.525, 237.51, 167.596 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 247.22, 189.126 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 251.235, 209.706 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 229 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BrOrYl", color_map);

    //BuGn
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 8.00011, 63.9999, 129 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 8.00011, 84.0783, 150.584 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 8.13731, 104.141, 172.071 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 25.7058, 122.212, 181.106 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 43.2745, 140.306, 190.165 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 60.8433, 159.882, 200.706 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 78.5293, 179.294, 210.824 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 101.118, 191.843, 203.294 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 123.706, 204.267, 195.765 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 146.294, 212.8, 188.235 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 168.706, 221.274, 181.314 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 186.777, 228.302, 189.345 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 204.47, 235.188, 197.518 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 214.51, 239.204, 208.561 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 224.631, 243.247, 219.576 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 236.176, 247.765, 230.118 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 252, 240 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BuGn", color_map);

    //BuGnYl
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 8.00011, 28.9999, 88 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 22.5568, 40.545, 118.118 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 36.9883, 52.1646, 148.078 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 35.4822, 73.247, 158.118 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 33.9609, 94.4, 168.188 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 31.4509, 120, 180.235 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 29.4234, 145.435, 192.047 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 47.494, 164.008, 194.055 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 65.9726, 182.361, 195.859 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 97.0941, 193.906, 191.341 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 128.412, 205.549, 186.863 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 164.553, 219.604, 183.349 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 199.894, 233.353, 179.93 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 218.969, 240.882, 178.423 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 237.494, 248.192, 178.098 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 246.529, 251.706, 198.177 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 217 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BuGnYl", color_map);

    //BuPu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 1.99996, 56, 88 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 3.0039, 73.0667, 114.604 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 4.00401, 90.0864, 141.137 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 4.50585, 101.129, 158.706 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 5.38432, 112.251, 176.125 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 29.9803, 128.314, 184.157 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 54.7294, 144.294, 192.176 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 85.8511, 156.843, 199.706 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 116.784, 169.314, 207.188 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 141.882, 179.353, 213.212 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 166.824, 189.392, 219.216 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 187.906, 199.431, 224.737 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 208.659, 209.518, 230.282 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 222.714, 220.561, 236.306 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 236.522, 231.439, 242.247 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 246.059, 239.471, 246.765 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 247, 251 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BuPu", color_map);

    //BuRd
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 5.00004, 47.9999, 97 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 22.5685, 81.8823, 144.059 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 41.6667, 113.471, 177.863 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 63, 141.706, 192.294 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 107.274, 172.49, 208.765 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 154.647, 201.392, 224.471 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 194.176, 221.471, 235.765 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 223.902, 236.059, 242.745 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 247.118, 246.451, 246.059 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 250.882, 228.882, 215.941 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 250.529, 204.176, 180.059 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 244.882, 170.294, 136.765 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 228.118, 128.471, 101.941 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 208.353, 84.7059, 71.6667 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 185.765, 39.5293, 50.3334 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 147.118, 14.1176, 38.0587 ));
    color_map.addPoint(1, kvs::RGBColor( 103, 0, 31.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("BuRd", color_map);

    //CIELab Blue to Red
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 153, 191 ));
    color_map.addPoint(1, kvs::RGBColor( 196, 119, 87 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("CIELab Blue to Red", color_map);

    //Citrus Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 101, 124, 55));
    color_map.addPoint( 0.166,kvs::RGBColor( 101, 124, 55));
    color_map.addPoint( 0.166,kvs::RGBColor( 117, 177, 1));
    color_map.addPoint( 0.333,kvs::RGBColor( 117, 177, 1));
    color_map.addPoint( 0.333,kvs::RGBColor( 178, 186, 48));
    color_map.addPoint( 0.5,kvs::RGBColor( 178, 186, 48));
    color_map.addPoint( 0.5,kvs::RGBColor( 255, 229, 6));
    color_map.addPoint( 0.666,kvs::RGBColor( 255, 229, 6));
    color_map.addPoint( 0.666,kvs::RGBColor( 255, 180, 0));
    color_map.addPoint( 0.833,kvs::RGBColor( 255, 180, 0));
    color_map.addPoint( 0.833,kvs::RGBColor( 249, 131, 36));
    color_map.addPoint( 1,kvs::RGBColor( 249, 131, 36));
    color_map.addPoint( 1,kvs::RGBColor( 0, 0, 0));
    color_map.create();
    this->add("Citrus Step", color_map);

    //Cividis
    color_map = kvs::ColorMap(256, 0, 255);
    color_map.addPoint(0, kvs::RGBColor( 0, 32.181, 76.8825 ));
    color_map.addPoint(1, kvs::RGBColor( 0, 32.946, 78.4635 ));
    color_map.addPoint(2, kvs::RGBColor( 0, 33.6855, 80.121 ));
    color_map.addPoint(3, kvs::RGBColor( 0, 34.425, 81.7275 ));
    color_map.addPoint(4, kvs::RGBColor( 0, 35.1645, 83.3595 ));
    color_map.addPoint(5, kvs::RGBColor( 0, 35.904, 85.017 ));
    color_map.addPoint(6, kvs::RGBColor( 0, 36.6435, 86.7 ));
    color_map.addPoint(7, kvs::RGBColor( 0, 37.3575, 88.4085 ));
    color_map.addPoint(8, kvs::RGBColor( 0, 38.046, 90.1935 ));
    color_map.addPoint(9, kvs::RGBColor( 0, 38.7345, 91.953 ));
    color_map.addPoint(10, kvs::RGBColor( 0, 39.423, 93.738 ));
    color_map.addPoint(11, kvs::RGBColor( 0, 40.137, 95.523 ));
    color_map.addPoint(12, kvs::RGBColor( 0, 40.8255, 97.3335 ));
    color_map.addPoint(13, kvs::RGBColor( 0, 41.5395, 99.144 ));
    color_map.addPoint(14, kvs::RGBColor( 0, 42.2535, 100.98 ));
    color_map.addPoint(15, kvs::RGBColor( 0, 42.9675, 102.791 ));
    color_map.addPoint(16, kvs::RGBColor( 0, 43.707, 104.601 ));
    color_map.addPoint(17, kvs::RGBColor( 0, 44.4465, 106.386 ));
    color_map.addPoint(18, kvs::RGBColor( 0, 45.2115, 108.145 ));
    color_map.addPoint(19, kvs::RGBColor( 0, 45.849, 109.829 ));
    color_map.addPoint(20, kvs::RGBColor( 0, 46.3335, 110.848 ));
    color_map.addPoint(21, kvs::RGBColor( 0, 46.767, 111.257 ));
    color_map.addPoint(22, kvs::RGBColor( 0, 47.226, 111.384 ));
    color_map.addPoint(23, kvs::RGBColor( 0, 47.736, 111.384 ));
    color_map.addPoint(24, kvs::RGBColor( 0, 48.4755, 111.308 ));
    color_map.addPoint(25, kvs::RGBColor( 0, 49.215, 111.206 ));
    color_map.addPoint(26, kvs::RGBColor( 0, 49.929, 111.078 ));
    color_map.addPoint(27, kvs::RGBColor( 0, 50.6685, 110.9 ));
    color_map.addPoint(28, kvs::RGBColor( 0, 51.3825, 110.747 ));
    color_map.addPoint(29, kvs::RGBColor( 0, 52.122, 110.568 ));
    color_map.addPoint(30, kvs::RGBColor( 0, 52.8615, 110.389 ));
    color_map.addPoint(31, kvs::RGBColor( 1.4025, 53.5755, 110.211 ));
    color_map.addPoint(32, kvs::RGBColor( 6.018, 54.315, 110.007 ));
    color_map.addPoint(33, kvs::RGBColor( 10.608, 55.029, 109.854 ));
    color_map.addPoint(34, kvs::RGBColor( 14.688, 55.7685, 109.675 ));
    color_map.addPoint(35, kvs::RGBColor( 18.105, 56.4825, 109.472 ));
    color_map.addPoint(36, kvs::RGBColor( 21.0885, 57.222, 109.319 ));
    color_map.addPoint(37, kvs::RGBColor( 23.766, 57.936, 109.14 ));
    color_map.addPoint(38, kvs::RGBColor( 26.265, 58.65, 108.987 ));
    color_map.addPoint(39, kvs::RGBColor( 28.56, 59.3895, 108.834 ));
    color_map.addPoint(40, kvs::RGBColor( 30.702, 60.1035, 108.681 ));
    color_map.addPoint(41, kvs::RGBColor( 32.7165, 60.8175, 108.528 ));
    color_map.addPoint(42, kvs::RGBColor( 34.6545, 61.557, 108.4 ));
    color_map.addPoint(43, kvs::RGBColor( 36.4905, 62.271, 108.248 ));
    color_map.addPoint(44, kvs::RGBColor( 38.25, 62.985, 108.145 ));
    color_map.addPoint(45, kvs::RGBColor( 39.933, 63.699, 108.018 ));
    color_map.addPoint(46, kvs::RGBColor( 41.565, 64.413, 107.916 ));
    color_map.addPoint(47, kvs::RGBColor( 43.146, 65.1525, 107.814 ));
    color_map.addPoint(48, kvs::RGBColor( 44.676, 65.8665, 107.712 ));
    color_map.addPoint(49, kvs::RGBColor( 46.1805, 66.5805, 107.61 ));
    color_map.addPoint(50, kvs::RGBColor( 47.634, 67.2945, 107.534 ));
    color_map.addPoint(51, kvs::RGBColor( 49.0365, 68.0085, 107.457 ));
    color_map.addPoint(52, kvs::RGBColor( 50.4135, 68.7225, 107.406 ));
    color_map.addPoint(53, kvs::RGBColor( 51.765, 69.4365, 107.329 ));
    color_map.addPoint(54, kvs::RGBColor( 53.091, 70.1505, 107.279 ));
    color_map.addPoint(55, kvs::RGBColor( 54.3915, 70.89, 107.227 ));
    color_map.addPoint(56, kvs::RGBColor( 55.6665, 71.604, 107.202 ));
    color_map.addPoint(57, kvs::RGBColor( 56.916, 72.318, 107.177 ));
    color_map.addPoint(58, kvs::RGBColor( 58.1655, 73.032, 107.151 ));
    color_map.addPoint(59, kvs::RGBColor( 59.364, 73.746, 107.125 ));
    color_map.addPoint(60, kvs::RGBColor( 60.5625, 74.46, 107.1 ));
    color_map.addPoint(61, kvs::RGBColor( 61.7355, 75.174, 107.1 ));
    color_map.addPoint(62, kvs::RGBColor( 62.883, 75.888, 107.1 ));
    color_map.addPoint(63, kvs::RGBColor( 64.0305, 76.602, 107.125 ));
    color_map.addPoint(64, kvs::RGBColor( 65.178, 77.316, 107.125 ));
    color_map.addPoint(65, kvs::RGBColor( 66.2745, 78.03, 107.151 ));
    color_map.addPoint(66, kvs::RGBColor( 67.3965, 78.744, 107.177 ));
    color_map.addPoint(67, kvs::RGBColor( 68.493, 79.458, 107.227 ));
    color_map.addPoint(68, kvs::RGBColor( 69.564, 80.172, 107.253 ));
    color_map.addPoint(69, kvs::RGBColor( 70.635, 80.886, 107.304 ));
    color_map.addPoint(70, kvs::RGBColor( 71.6805, 81.6, 107.355 ));
    color_map.addPoint(71, kvs::RGBColor( 72.7515, 82.314, 107.406 ));
    color_map.addPoint(72, kvs::RGBColor( 73.797, 83.028, 107.483 ));
    color_map.addPoint(73, kvs::RGBColor( 74.817, 83.742, 107.559 ));
    color_map.addPoint(74, kvs::RGBColor( 75.837, 84.456, 107.635 ));
    color_map.addPoint(75, kvs::RGBColor( 76.857, 85.17, 107.712 ));
    color_map.addPoint(76, kvs::RGBColor( 77.877, 85.884, 107.788 ));
    color_map.addPoint(77, kvs::RGBColor( 78.8715, 86.598, 107.89 ));
    color_map.addPoint(78, kvs::RGBColor( 79.866, 87.312, 108.018 ));
    color_map.addPoint(79, kvs::RGBColor( 80.835, 88.0515, 108.12 ));
    color_map.addPoint(80, kvs::RGBColor( 81.8295, 88.7655, 108.222 ));
    color_map.addPoint(81, kvs::RGBColor( 82.7985, 89.4795, 108.35 ));
    color_map.addPoint(82, kvs::RGBColor( 83.7675, 90.1935, 108.477 ));
    color_map.addPoint(83, kvs::RGBColor( 84.7365, 90.9075, 108.605 ));
    color_map.addPoint(84, kvs::RGBColor( 85.7055, 91.6215, 108.732 ));
    color_map.addPoint(85, kvs::RGBColor( 86.649, 92.361, 108.885 ));
    color_map.addPoint(86, kvs::RGBColor( 87.5925, 93.075, 109.038 ));
    color_map.addPoint(87, kvs::RGBColor( 88.536, 93.789, 109.191 ));
    color_map.addPoint(88, kvs::RGBColor( 89.4795, 94.503, 109.344 ));
    color_map.addPoint(89, kvs::RGBColor( 90.423, 95.217, 109.497 ));
    color_map.addPoint(90, kvs::RGBColor( 91.341, 95.9565, 109.701 ));
    color_map.addPoint(91, kvs::RGBColor( 92.2845, 96.6705, 109.854 ));
    color_map.addPoint(92, kvs::RGBColor( 93.2025, 97.3845, 110.058 ));
    color_map.addPoint(93, kvs::RGBColor( 94.1205, 98.124, 110.211 ));
    color_map.addPoint(94, kvs::RGBColor( 95.0385, 98.838, 110.441 ));
    color_map.addPoint(95, kvs::RGBColor( 95.9565, 99.552, 110.619 ));
    color_map.addPoint(96, kvs::RGBColor( 96.849, 100.291, 110.823 ));
    color_map.addPoint(97, kvs::RGBColor( 97.767, 101.005, 111.052 ));
    color_map.addPoint(98, kvs::RGBColor( 98.6595, 101.745, 111.282 ));
    color_map.addPoint(99, kvs::RGBColor( 99.5775, 102.459, 111.486 ));
    color_map.addPoint(100, kvs::RGBColor( 100.47, 103.198, 111.715 ));
    color_map.addPoint(101, kvs::RGBColor( 101.363, 103.912, 111.945 ));
    color_map.addPoint(102, kvs::RGBColor( 102.255, 104.652, 112.2 ));
    color_map.addPoint(103, kvs::RGBColor( 103.148, 105.366, 112.43 ));
    color_map.addPoint(104, kvs::RGBColor( 104.04, 106.106, 112.684 ));
    color_map.addPoint(105, kvs::RGBColor( 104.907, 106.82, 112.965 ));
    color_map.addPoint(106, kvs::RGBColor( 105.799, 107.559, 113.22 ));
    color_map.addPoint(107, kvs::RGBColor( 106.666, 108.299, 113.475 ));
    color_map.addPoint(108, kvs::RGBColor( 107.559, 109.013, 113.781 ));
    color_map.addPoint(109, kvs::RGBColor( 108.426, 109.752, 114.061 ));
    color_map.addPoint(110, kvs::RGBColor( 109.293, 110.492, 114.368 ));
    color_map.addPoint(111, kvs::RGBColor( 110.16, 111.231, 114.648 ));
    color_map.addPoint(112, kvs::RGBColor( 111.027, 111.945, 114.954 ));
    color_map.addPoint(113, kvs::RGBColor( 111.894, 112.684, 115.285 ));
    color_map.addPoint(114, kvs::RGBColor( 112.761, 113.424, 115.617 ));
    color_map.addPoint(115, kvs::RGBColor( 113.628, 114.163, 115.948 ));
    color_map.addPoint(116, kvs::RGBColor( 114.47, 114.903, 116.305 ));
    color_map.addPoint(117, kvs::RGBColor( 115.337, 115.642, 116.663 ));
    color_map.addPoint(118, kvs::RGBColor( 116.178, 116.382, 117.019 ));
    color_map.addPoint(119, kvs::RGBColor( 117.019, 117.121, 117.402 ));
    color_map.addPoint(120, kvs::RGBColor( 117.861, 117.861, 117.81 ));
    color_map.addPoint(121, kvs::RGBColor( 118.728, 118.6, 118.193 ));
    color_map.addPoint(122, kvs::RGBColor( 119.569, 119.34, 118.575 ));
    color_map.addPoint(123, kvs::RGBColor( 120.411, 120.079, 118.958 ));
    color_map.addPoint(124, kvs::RGBColor( 121.278, 120.819, 119.314 ));
    color_map.addPoint(125, kvs::RGBColor( 122.145, 121.559, 119.621 ));
    color_map.addPoint(126, kvs::RGBColor( 123.037, 122.324, 119.876 ));
    color_map.addPoint(127, kvs::RGBColor( 123.956, 123.063, 120.029 ));
    color_map.addPoint(128, kvs::RGBColor( 124.874, 123.828, 120.207 ));
    color_map.addPoint(129, kvs::RGBColor( 125.817, 124.593, 120.334 ));
    color_map.addPoint(130, kvs::RGBColor( 126.76, 125.332, 120.436 ));
    color_map.addPoint(131, kvs::RGBColor( 127.704, 126.097, 120.538 ));
    color_map.addPoint(132, kvs::RGBColor( 128.647, 126.862, 120.615 ));
    color_map.addPoint(133, kvs::RGBColor( 129.617, 127.627, 120.666 ));
    color_map.addPoint(134, kvs::RGBColor( 130.585, 128.392, 120.717 ));
    color_map.addPoint(135, kvs::RGBColor( 131.529, 129.157, 120.768 ));
    color_map.addPoint(136, kvs::RGBColor( 132.498, 129.922, 120.794 ));
    color_map.addPoint(137, kvs::RGBColor( 133.467, 130.688, 120.819 ));
    color_map.addPoint(138, kvs::RGBColor( 134.436, 131.452, 120.844 ));
    color_map.addPoint(139, kvs::RGBColor( 135.405, 132.243, 120.844 ));
    color_map.addPoint(140, kvs::RGBColor( 136.4, 133.008, 120.819 ));
    color_map.addPoint(141, kvs::RGBColor( 137.368, 133.773, 120.844 ));
    color_map.addPoint(142, kvs::RGBColor( 138.338, 134.563, 120.819 ));
    color_map.addPoint(143, kvs::RGBColor( 139.332, 135.328, 120.768 ));
    color_map.addPoint(144, kvs::RGBColor( 140.301, 136.119, 120.742 ));
    color_map.addPoint(145, kvs::RGBColor( 141.296, 136.884, 120.692 ));
    color_map.addPoint(146, kvs::RGBColor( 142.264, 137.675, 120.666 ));
    color_map.addPoint(147, kvs::RGBColor( 143.259, 138.465, 120.59 ));
    color_map.addPoint(148, kvs::RGBColor( 144.254, 139.256, 120.538 ));
    color_map.addPoint(149, kvs::RGBColor( 145.248, 140.02, 120.436 ));
    color_map.addPoint(150, kvs::RGBColor( 146.243, 140.811, 120.36 ));
    color_map.addPoint(151, kvs::RGBColor( 147.237, 141.602, 120.284 ));
    color_map.addPoint(152, kvs::RGBColor( 148.232, 142.392, 120.207 ));
    color_map.addPoint(153, kvs::RGBColor( 149.226, 143.183, 120.079 ));
    color_map.addPoint(154, kvs::RGBColor( 150.246, 143.973, 119.977 ));
    color_map.addPoint(155, kvs::RGBColor( 151.24, 144.789, 119.876 ));
    color_map.addPoint(156, kvs::RGBColor( 152.235, 145.579, 119.748 ));
    color_map.addPoint(157, kvs::RGBColor( 153.255, 146.37, 119.621 ));
    color_map.addPoint(158, kvs::RGBColor( 154.275, 147.186, 119.468 ));
    color_map.addPoint(159, kvs::RGBColor( 155.269, 147.977, 119.34 ));
    color_map.addPoint(160, kvs::RGBColor( 156.29, 148.793, 119.162 ));
    color_map.addPoint(161, kvs::RGBColor( 157.284, 149.583, 119.034 ));
    color_map.addPoint(162, kvs::RGBColor( 158.304, 150.399, 118.881 ));
    color_map.addPoint(163, kvs::RGBColor( 159.324, 151.19, 118.703 ));
    color_map.addPoint(164, kvs::RGBColor( 160.344, 152.005, 118.549 ));
    color_map.addPoint(165, kvs::RGBColor( 161.364, 152.822, 118.346 ));
    color_map.addPoint(166, kvs::RGBColor( 162.384, 153.638, 118.116 ));
    color_map.addPoint(167, kvs::RGBColor( 163.404, 154.453, 117.938 ));
    color_map.addPoint(168, kvs::RGBColor( 164.45, 155.269, 117.734 ));
    color_map.addPoint(169, kvs::RGBColor( 165.47, 156.085, 117.529 ));
    color_map.addPoint(170, kvs::RGBColor( 166.49, 156.901, 117.3 ));
    color_map.addPoint(171, kvs::RGBColor( 167.535, 157.718, 117.07 ));
    color_map.addPoint(172, kvs::RGBColor( 168.555, 158.534, 116.867 ));
    color_map.addPoint(173, kvs::RGBColor( 169.601, 159.375, 116.611 ));
    color_map.addPoint(174, kvs::RGBColor( 170.621, 160.191, 116.331 ));
    color_map.addPoint(175, kvs::RGBColor( 171.666, 161.032, 116.102 ));
    color_map.addPoint(176, kvs::RGBColor( 172.712, 161.849, 115.846 ));
    color_map.addPoint(177, kvs::RGBColor( 173.732, 162.69, 115.566 ));
    color_map.addPoint(178, kvs::RGBColor( 174.777, 163.506, 115.285 ));
    color_map.addPoint(179, kvs::RGBColor( 175.822, 164.347, 115.031 ));
    color_map.addPoint(180, kvs::RGBColor( 176.868, 165.189, 114.725 ));
    color_map.addPoint(181, kvs::RGBColor( 177.913, 166.03, 114.418 ));
    color_map.addPoint(182, kvs::RGBColor( 178.959, 166.872, 114.112 ));
    color_map.addPoint(183, kvs::RGBColor( 180.03, 167.713, 113.806 ));
    color_map.addPoint(184, kvs::RGBColor( 181.075, 168.555, 113.475 ));
    color_map.addPoint(185, kvs::RGBColor( 182.121, 169.397, 113.143 ));
    color_map.addPoint(186, kvs::RGBColor( 183.192, 170.238, 112.812 ));
    color_map.addPoint(187, kvs::RGBColor( 184.238, 171.105, 112.43 ));
    color_map.addPoint(188, kvs::RGBColor( 185.309, 171.947, 112.098 ));
    color_map.addPoint(189, kvs::RGBColor( 186.354, 172.788, 111.741 ));
    color_map.addPoint(190, kvs::RGBColor( 187.425, 173.655, 111.384 ));
    color_map.addPoint(191, kvs::RGBColor( 188.496, 174.522, 110.976 ));
    color_map.addPoint(192, kvs::RGBColor( 189.567, 175.363, 110.619 ));
    color_map.addPoint(193, kvs::RGBColor( 190.638, 176.231, 110.211 ));
    color_map.addPoint(194, kvs::RGBColor( 191.709, 177.097, 109.829 ));
    color_map.addPoint(195, kvs::RGBColor( 192.78, 177.964, 109.395 ));
    color_map.addPoint(196, kvs::RGBColor( 193.851, 178.832, 108.962 ));
    color_map.addPoint(197, kvs::RGBColor( 194.922, 179.698, 108.579 ));
    color_map.addPoint(198, kvs::RGBColor( 195.993, 180.565, 108.145 ));
    color_map.addPoint(199, kvs::RGBColor( 197.09, 181.433, 107.686 ));
    color_map.addPoint(200, kvs::RGBColor( 198.161, 182.325, 107.227 ));
    color_map.addPoint(201, kvs::RGBColor( 199.257, 183.192, 106.794 ));
    color_map.addPoint(202, kvs::RGBColor( 200.328, 184.059, 106.284 ));
    color_map.addPoint(203, kvs::RGBColor( 201.425, 184.951, 105.825 ));
    color_map.addPoint(204, kvs::RGBColor( 202.521, 185.844, 105.29 ));
    color_map.addPoint(205, kvs::RGBColor( 203.618, 186.711, 104.831 ));
    color_map.addPoint(206, kvs::RGBColor( 204.689, 187.603, 104.295 ));
    color_map.addPoint(207, kvs::RGBColor( 205.785, 188.496, 103.785 ));
    color_map.addPoint(208, kvs::RGBColor( 206.907, 189.388, 103.249 ));
    color_map.addPoint(209, kvs::RGBColor( 208.004, 190.281, 102.714 ));
    color_map.addPoint(210, kvs::RGBColor( 209.1, 191.174, 102.178 ));
    color_map.addPoint(211, kvs::RGBColor( 210.197, 192.066, 101.592 ));
    color_map.addPoint(212, kvs::RGBColor( 211.319, 192.984, 101.005 ));
    color_map.addPoint(213, kvs::RGBColor( 212.415, 193.876, 100.419 ));
    color_map.addPoint(214, kvs::RGBColor( 213.537, 194.794, 99.8325 ));
    color_map.addPoint(215, kvs::RGBColor( 214.633, 195.687, 99.246 ));
    color_map.addPoint(216, kvs::RGBColor( 215.755, 196.605, 98.6595 ));
    color_map.addPoint(217, kvs::RGBColor( 216.877, 197.498, 97.9965 ));
    color_map.addPoint(218, kvs::RGBColor( 217.974, 198.416, 97.359 ));
    color_map.addPoint(219, kvs::RGBColor( 219.096, 199.333, 96.7215 ));
    color_map.addPoint(220, kvs::RGBColor( 220.218, 200.251, 96.033 ));
    color_map.addPoint(221, kvs::RGBColor( 221.365, 201.169, 95.3445 ));
    color_map.addPoint(222, kvs::RGBColor( 222.488, 202.113, 94.656 ));
    color_map.addPoint(223, kvs::RGBColor( 223.609, 203.031, 93.942 ));
    color_map.addPoint(224, kvs::RGBColor( 224.731, 203.949, 93.2535 ));
    color_map.addPoint(225, kvs::RGBColor( 225.879, 204.892, 92.4885 ));
    color_map.addPoint(226, kvs::RGBColor( 227.001, 205.811, 91.7745 ));
    color_map.addPoint(227, kvs::RGBColor( 228.149, 206.754, 91.0095 ));
    color_map.addPoint(228, kvs::RGBColor( 229.296, 207.697, 90.219 ));
    color_map.addPoint(229, kvs::RGBColor( 230.444, 208.641, 89.4285 ));
    color_map.addPoint(230, kvs::RGBColor( 231.591, 209.584, 88.587 ));
    color_map.addPoint(231, kvs::RGBColor( 232.738, 210.528, 87.771 ));
    color_map.addPoint(232, kvs::RGBColor( 233.886, 211.472, 86.9295 ));
    color_map.addPoint(233, kvs::RGBColor( 235.034, 212.415, 86.037 ));
    color_map.addPoint(234, kvs::RGBColor( 236.181, 213.358, 85.17 ));
    color_map.addPoint(235, kvs::RGBColor( 237.354, 214.328, 84.303 ));
    color_map.addPoint(236, kvs::RGBColor( 238.501, 215.271, 83.334 ));
    color_map.addPoint(237, kvs::RGBColor( 239.674, 216.24, 82.416 ));
    color_map.addPoint(238, kvs::RGBColor( 240.822, 217.209, 81.4725 ));
    color_map.addPoint(239, kvs::RGBColor( 241.995, 218.178, 80.4525 ));
    color_map.addPoint(240, kvs::RGBColor( 243.168, 219.121, 79.458 ));
    color_map.addPoint(241, kvs::RGBColor( 244.341, 220.116, 78.438 ));
    color_map.addPoint(242, kvs::RGBColor( 245.514, 221.085, 77.367 ));
    color_map.addPoint(243, kvs::RGBColor( 246.687, 222.054, 76.245 ));
    color_map.addPoint(244, kvs::RGBColor( 247.885, 223.023, 75.1485 ));
    color_map.addPoint(245, kvs::RGBColor( 249.059, 224.017, 73.9755 ));
    color_map.addPoint(246, kvs::RGBColor( 250.257, 224.987, 72.828 ));
    color_map.addPoint(247, kvs::RGBColor( 251.43, 225.981, 71.5785 ));
    color_map.addPoint(248, kvs::RGBColor( 252.629, 226.976, 70.3545 ));
    color_map.addPoint(249, kvs::RGBColor( 253.827, 227.97, 69.054 ));
    color_map.addPoint(250, kvs::RGBColor( 255, 228.965, 67.7025 ));
    color_map.addPoint(251, kvs::RGBColor( 255, 229.959, 66.3 ));
    color_map.addPoint(252, kvs::RGBColor( 255, 230.953, 66.1215 ));
    color_map.addPoint(253, kvs::RGBColor( 255, 231.897, 67.167 ));
    color_map.addPoint(254, kvs::RGBColor( 255, 232.841, 68.34 ));
    color_map.addPoint(255, kvs::RGBColor( 255, 233.81, 69.6405 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Cividis", color_map);

    //Cold and Hot
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.45, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 0, 0, 128 ));
    color_map.addPoint(0.55, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 0 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Cold and Hot", color_map);

    //Cool Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 117, 177, 1));
    color_map.addPoint( 0.143,kvs::RGBColor( 117, 177, 1));
    color_map.addPoint( 0.143,kvs::RGBColor( 88, 128, 41));
    color_map.addPoint( 0.286,kvs::RGBColor( 88, 128, 41));
    color_map.addPoint( 0.286,kvs::RGBColor( 80, 215, 191));
    color_map.addPoint( 0.429,kvs::RGBColor( 80, 215, 191));
    color_map.addPoint( 0.429,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.571,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.571,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.714,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.714,kvs::RGBColor( 154, 104, 255));
    color_map.addPoint( 0.857,kvs::RGBColor( 154, 104, 255));
    color_map.addPoint( 0.857,kvs::RGBColor( 95, 51, 128));
    color_map.addPoint( 1,kvs::RGBColor( 95, 51, 128));
    color_map.addPoint( 1,kvs::RGBColor( 177, 1, 0));
    color_map.create();
    this->add("Cool Step", color_map);

    //Cool to Warm (Extended)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 89.0001 ));
    color_map.addPoint(0.03125, kvs::RGBColor( 10.0001, 16, 97 ));
    color_map.addPoint(0.0625, kvs::RGBColor( 16, 30, 105 ));
    color_map.addPoint(0.09375, kvs::RGBColor( 23, 47.0001, 115 ));
    color_map.addPoint(0.125, kvs::RGBColor( 31.9999, 67, 128 ));
    color_map.addPoint(0.15625, kvs::RGBColor( 40.9999, 86, 138 ));
    color_map.addPoint(0.1875, kvs::RGBColor( 51, 101, 145 ));
    color_map.addPoint(0.21875, kvs::RGBColor( 61.0001, 116, 153 ));
    color_map.addPoint(0.25, kvs::RGBColor( 73.0001, 133, 166 ));
    color_map.addPoint(0.28125, kvs::RGBColor( 86, 151, 179 ));
    color_map.addPoint(0.3125, kvs::RGBColor( 98.9999, 167, 191 ));
    color_map.addPoint(0.34375, kvs::RGBColor( 119, 188, 209 ));
    color_map.addPoint(0.375, kvs::RGBColor( 146, 209, 224 ));
    color_map.addPoint(0.40625, kvs::RGBColor( 167, 221, 232 ));
    color_map.addPoint(0.4375, kvs::RGBColor( 192, 234, 240 ));
    color_map.addPoint(0.46875, kvs::RGBColor( 210, 244, 247 ));
    color_map.addPoint(0.5, kvs::RGBColor( 252, 245, 230 ));
    color_map.addPoint(0.5, kvs::RGBColor( 240, 251, 252 ));
    color_map.addPoint(0.52, kvs::RGBColor( 252, 241, 217 ));
    color_map.addPoint(0.54, kvs::RGBColor( 250, 229, 200 ));
    color_map.addPoint(0.5625, kvs::RGBColor( 247, 213, 178 ));
    color_map.addPoint(0.59375, kvs::RGBColor( 242, 187, 150 ));
    color_map.addPoint(0.625, kvs::RGBColor( 237, 166, 130 ));
    color_map.addPoint(0.65625, kvs::RGBColor( 232, 144, 111 ));
    color_map.addPoint(0.6875, kvs::RGBColor( 224, 117, 90 ));
    color_map.addPoint(0.71875, kvs::RGBColor( 214, 98.9999, 73.0001 ));
    color_map.addPoint(0.75, kvs::RGBColor( 194, 75.0001, 54.0001 ));
    color_map.addPoint(0.78125, kvs::RGBColor( 179, 54.0001, 42.9999 ));
    color_map.addPoint(0.8125, kvs::RGBColor( 166, 40.0001, 33.0001 ));
    color_map.addPoint(0.84375, kvs::RGBColor( 153, 24.0001, 24.0001 ));
    color_map.addPoint(0.875, kvs::RGBColor( 140, 17.0001, 24.9999 ));
    color_map.addPoint(0.90625, kvs::RGBColor( 128, 12.9999, 31.9999 ));
    color_map.addPoint(0.9375, kvs::RGBColor( 115, 14, 44 ));
    color_map.addPoint(0.96875, kvs::RGBColor( 102, 14, 49 ));
    color_map.addPoint(1, kvs::RGBColor( 89.0001, 17.9999, 54.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Cool to Warm (Extended)", color_map);

    //Cool to Warm
    color_map = kvs::ColorMap(256, 0, 1);
    color_map = kvs::DivergingColorMap::Create(kvs::RGBColor(59, 76,192), kvs::RGBColor(180,4,38),256);
    this->add("Cool to Warm", color_map);

    //GBBr
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 60, 47.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0.627555, 86.3529, 76.8629 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 14.255, 114.49, 106.49 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 46.8823, 145.235, 137.235 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 91.2352, 178.529, 168.49 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 137.745, 208.98, 197.941 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 182.294, 227.176, 220.529 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 217.039, 238.314, 235.274 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 245.02, 244.745, 244.02 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 245.647, 236.588, 212.647 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 239.686, 221.569, 175.784 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 225.255, 197.725, 131.863 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 206.059, 159.588, 82.647 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 183, 121.471, 39.5097 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 151, 91.353, 17.5491 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 116.941, 67.4118, 7.94121 ));
    color_map.addPoint(1, kvs::RGBColor( 84.0001, 47.9999, 5.00004 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GBBr", color_map);

    //GREEN-WHITE_LINEAR
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 16, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 31.9999, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 0, 47.9999, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 0, 63.9999, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 0, 79.9999, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 0, 96.0001, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 24.0001, 112, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 49.9999, 128, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 75.0001, 144, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 101, 160, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 127, 176, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 153, 192, 37 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 179, 208, 93 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 204, 224, 148 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 230, 240, 203 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GREEN-WHITE_LINEAR", color_map);

    //GYPi
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 39, 100, 24.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 62.8432, 128.863, 30.0196 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 89.7452, 156.706, 41.1567 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 121.118, 183.059, 61.2352 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 156.059, 206.863, 100.176 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 190.314, 227.745, 144.157 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 219.177, 240.294, 190.588 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 236.667, 245.784, 223.294 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 247.118, 246.549, 246.843 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 250.882, 232.118, 241.824 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 249.706, 212.471, 233.235 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 242.177, 186.118, 220.059 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 230.941, 148.647, 194.706 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 218.079, 104.569, 166.314 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 202.392, 46.8432, 135.569 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 174.353, 16.2942, 107.294 ));
    color_map.addPoint(1, kvs::RGBColor( 142, 1.00011, 82.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GYPi", color_map);

    //GnBu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 68.0001, 26.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 88.5804, 35.5332 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0.13719, 109.118, 44.0979 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 17.7059, 124.177, 56.647 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 35.2354, 139.275, 69.3842 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 50.2942, 156.843, 93.9805 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 65.4353, 174.235, 118.541 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 84.008, 184.274, 141.631 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 102.8, 194.345, 164.58 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 128.4, 205.388, 183.153 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 154, 216.392, 201.569 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 179.6, 226.431, 216.126 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 204.588, 236.212, 230.447 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 217.137, 240.729, 239.984 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 229.494, 245.192, 249.11 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 238.529, 248.706, 251.118 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 252, 253 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GnBu", color_map);

    //GnBuPu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 1.00011, 70, 54.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 1.00011, 89.0746, 71.5686 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 1.00394, 108.082, 89.1921 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 1.50577, 118.623, 113.788 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 2.40796, 129.118, 138.423 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 28.5098, 136.647, 165.529 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 54.5764, 144.294, 192.176 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 79.1727, 156.843, 199.706 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 103.988, 169.314, 207.188 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 135.612, 179.353, 213.212 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 166.824, 189.392, 219.216 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 187.906, 199.431, 224.737 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 208.659, 209.4, 230.235 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 222.714, 217.933, 235.255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 236.522, 226.576, 240.302 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 246.059, 237.118, 245.824 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 247, 251 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GnBuPu", color_map);

    //GnRP
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 68.0001, 26.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 16.9412, 100.627, 44.5686 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 43.0588, 133.765, 65.7058 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 82.5881, 167.647, 92.0588 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 128.745, 196.941, 129.118 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 173, 221.882, 167 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 205, 235.059, 199 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 228.765, 242.745, 225.118 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 246.686, 246.314, 246.706 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 236.647, 224.353, 237.294 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 220.843, 199.098, 225.137 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 197.628, 169.608, 209.451 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 172.294, 136.941, 187.941 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 147.51, 101.02, 164.725 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 125.549, 57.0981, 139.628 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 95.7647, 24.7059, 107.941 ));
    color_map.addPoint(1, kvs::RGBColor( 63.9999, 0, 75.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GnRP", color_map);

    //GnYlRd
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 104, 54.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 16.3136, 134.118, 70.6863 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 45.3727, 161.431, 84.8431 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 93.0589, 184.647, 96.7646 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 134.628, 203.275, 102.569 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 173, 220.02, 110.529 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 205, 233.824, 131.235 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 231.902, 245.275, 159.392 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 254.98, 254.392, 189.98 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 254.353, 234.941, 157.353 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 253.726, 210.275, 127.471 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 253.098, 178.902, 101.118 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 248.235, 139.588, 81.1175 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 239.451, 99.4314, 62.6079 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 221.255, 61.1569, 45.0391 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 194.412, 28.2354, 38.5881 ));
    color_map.addPoint(1, kvs::RGBColor( 165, 0, 38.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GnYlRd", color_map);

    //Gray and Red
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 26.0001, 26.0001, 26.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 58, 58, 58 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 91.7844, 91.7844, 91.7844 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 128.177, 128.177, 128.177 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 161, 161, 161 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 191.216, 191.216, 191.216 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 215.059, 215.059, 215.059 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 236.157, 236.157, 236.157 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 254.961, 254.294, 253.902 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 253.706, 231.706, 218.765 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 250.529, 204.176, 180.059 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 244.882, 170.294, 136.765 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 228.118, 128.471, 101.941 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 208.353, 84.7059, 71.6667 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 185.765, 39.5293, 50.3334 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 147.118, 14.1176, 38.0587 ));
    color_map.addPoint(1, kvs::RGBColor( 103, 0, 31.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Gray and Red", color_map);

    //Grayscale
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Grayscale", color_map);

    //Green-Blue Asymmetric Divergent (62Blbc)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 31.0001, 51, 37 ));
    color_map.addPoint(0.05, kvs::RGBColor( 49.9999, 77.0001, 56.9999 ));
    color_map.addPoint(0.1, kvs::RGBColor( 66.0001, 102, 70.9999 ));
    color_map.addPoint(0.2, kvs::RGBColor( 86.9999, 140, 86.9999 ));
    color_map.addPoint(0.25, kvs::RGBColor( 107, 158, 96.0001 ));
    color_map.addPoint(0.3, kvs::RGBColor( 139, 179, 100 ));
    color_map.addPoint(0.35, kvs::RGBColor( 164, 199, 103 ));
    color_map.addPoint(0.4, kvs::RGBColor( 186, 209, 115 ));
    color_map.addPoint(0.45, kvs::RGBColor( 207, 222, 133 ));
    color_map.addPoint(0.5, kvs::RGBColor( 229, 232, 144 ));
    color_map.addPoint(0.55, kvs::RGBColor( 240, 236, 175 ));
    color_map.addPoint(0.6, kvs::RGBColor( 245, 242, 198 ));
    color_map.addPoint(0.64, kvs::RGBColor( 255, 255, 255 ));
    color_map.addPoint(0.65, kvs::RGBColor( 227, 252, 248 ));
    color_map.addPoint(0.7, kvs::RGBColor( 184, 228, 230 ));
    color_map.addPoint(0.75, kvs::RGBColor( 161, 210, 214 ));
    color_map.addPoint(0.8, kvs::RGBColor( 132, 169, 179 ));
    color_map.addPoint(0.85, kvs::RGBColor( 98.0001, 126, 140 ));
    color_map.addPoint(0.9, kvs::RGBColor( 75.9999, 91.9999, 115 ));
    color_map.addPoint(0.95, kvs::RGBColor( 56.9999, 63.9999, 89.0001 ));
    color_map.addPoint(0.99, kvs::RGBColor( 40.0001, 44, 63.9999 ));
    color_map.addPoint(1, kvs::RGBColor( 35, 35, 47.9999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Green-Blue Asymmetric Divergent (62Blbc)", color_map);

    //Greens
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 68.0001, 26.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 88.5804, 35.5332 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0.13719, 109.118, 44.0979 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 17.7059, 124.177, 56.647 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 35.2354, 139.251, 69.1881 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 50.2942, 155.314, 81.2354 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 65.6, 171.294, 93.294 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 91.2, 183.843, 105.843 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 116.706, 196.329, 118.58 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 139.294, 206.871, 137.153 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 161.745, 217.314, 155.725 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 180.82, 225.345, 174.298 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 199.706, 233.282, 192.753 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 214.765, 239.306, 208.816 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 229.494, 245.192, 224.576 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 238.529, 248.706, 235.118 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 252, 245 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Greens", color_map);

    //GyRd
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 26.0001, 26.0001, 26.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 58, 58, 58 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 91.7844, 91.7844, 91.7844 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 128.177, 128.177, 128.177 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 161, 161, 161 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 191.216, 191.216, 191.216 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 215.059, 215.059, 215.059 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 236.157, 236.157, 236.157 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 254.961, 254.294, 253.902 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 253.706, 231.706, 218.765 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 250.529, 204.176, 180.059 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 244.882, 170.294, 136.765 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 228.118, 128.471, 101.941 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 208.353, 84.7059, 71.6667 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 185.765, 39.5293, 50.3334 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 147.118, 14.1176, 38.0587 ));
    color_map.addPoint(1, kvs::RGBColor( 103, 0, 31.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("GyRd", color_map);

    //Haze
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 255, 213, 254 ));
    color_map.addPoint(-0.00392157, kvs::RGBColor( 5.9999, 35.9999, 127 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 3.99993, 35, 126 ));
    color_map.addPoint(1, kvs::RGBColor( 251, 195, 0 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Haze", color_map);

    //Haze_cyan
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 244, 255, 213 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 237.963, 235.037, 194 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 222, 204.889, 171.259 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 206, 174.444, 148.741 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 190, 145.148, 126 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 174, 111.63, 99.4814 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 158.481, 73.4816, 67 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 142.482, 36.8518, 35.9629 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 126.445, 5.55556, 10.5555 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 110.482, 35, 33.0001 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 94.3704, 67.1112, 65.1112 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 78.1111, 97.3705, 95.037 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 61.9999, 128.518, 126.037 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 46, 160.518, 158.037 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 30, 192.519, 190.518 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 14, 223.481, 221.037 ));
    color_map.addPoint(1, kvs::RGBColor( 0, 252, 249 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Haze_cyan", color_map);

    //Haze_green
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 255, 213, 226 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 239, 193, 221.963 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 223.333, 169.926, 218.741 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 198.482, 148.667, 206.074 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 172.445, 126, 190 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 143.148, 99.4814, 174 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 111.778, 67, 158.481 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 81.8889, 35.9629, 142.482 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 52.0001, 5.55556, 126.445 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 67.7038, 33.0001, 110.482 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 79.4815, 65.1112, 94.3704 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 90.8519, 96.2222, 79.2594 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 101.926, 124.667, 65.852 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 112.852, 154.111, 52.4073 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 124.111, 183.518, 39 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 135.111, 211.741, 25.7407 ));
    color_map.addPoint(1, kvs::RGBColor( 146, 238, 14 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Haze_green", color_map);

    //Haze_lime
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 179.529, 199.97, 255 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 161.443, 176.312, 243.8 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 143.825, 153.155, 232.6 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 126.691, 130.532, 221.4 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 110.05, 108.481, 210.2 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 93.9032, 87.0435, 199 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 78.2256, 66.263, 187.8 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 62.9498, 46.1726, 176.6 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 48.8628, 27.9332, 165.4 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 65.638, 49.4779, 154.2 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 82.0575, 71.0876, 143 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 98.9168, 92.9773, 131.8 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 116.425, 115.23, 120.6 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 134.493, 137.897, 109.4 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 152.939, 161.014, 98.2 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 171.632, 184.594, 86.9999 ));
    color_map.addPoint(1, kvs::RGBColor( 189.402, 207.124, 76.5 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Haze_lime", color_map);

    //Inferno (matplotlib)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0.37281, 0.11883, 3.53583 ));
    color_map.addPoint(0.003922, kvs::RGBColor( 0.578085, 0.32385, 4.73535 ));
    color_map.addPoint(0.007843, kvs::RGBColor( 0.841245, 0.573495, 6.18095 ));
    color_map.addPoint(0.011765, kvs::RGBColor( 1.15948, 0.86496, 7.88179 ));
    color_map.addPoint(0.015686, kvs::RGBColor( 1.53153, 1.19646, 9.83229 ));
    color_map.addPoint(0.019608, kvs::RGBColor( 1.95738, 1.56468, 11.9432 ));
    color_map.addPoint(0.023529, kvs::RGBColor( 2.43805, 1.96681, 14.0615 ));
    color_map.addPoint(0.027451, kvs::RGBColor( 2.97406, 2.40133, 16.1823 ));
    color_map.addPoint(0.031373, kvs::RGBColor( 3.56873, 2.86238, 18.3248 ));
    color_map.addPoint(0.035294, kvs::RGBColor( 4.22305, 3.34968, 20.4719 ));
    color_map.addPoint(0.039216, kvs::RGBColor( 4.94012, 3.85892, 22.6356 ));
    color_map.addPoint(0.043137, kvs::RGBColor( 5.72399, 4.38575, 24.8184 ));
    color_map.addPoint(0.047059, kvs::RGBColor( 6.57721, 4.92941, 27.0121 ));
    color_map.addPoint(0.05098, kvs::RGBColor( 7.50516, 5.48327, 29.2284 ));
    color_map.addPoint(0.054902, kvs::RGBColor( 8.51318, 6.04401, 31.4662 ));
    color_map.addPoint(0.058824, kvs::RGBColor( 9.60534, 6.60985, 33.7192 ));
    color_map.addPoint(0.062745, kvs::RGBColor( 10.7745, 7.17544, 35.991 ));
    color_map.addPoint(0.066667, kvs::RGBColor( 11.9633, 7.73262, 38.2918 ));
    color_map.addPoint(0.070588, kvs::RGBColor( 13.1692, 8.28087, 40.6098 ));
    color_map.addPoint(0.07451, kvs::RGBColor( 14.3945, 8.8151, 42.9456 ));
    color_map.addPoint(0.078431, kvs::RGBColor( 15.6417, 9.33045, 45.2987 ));
    color_map.addPoint(0.082353, kvs::RGBColor( 16.9144, 9.81852, 47.6753 ));
    color_map.addPoint(0.086275, kvs::RGBColor( 18.2144, 10.275, 50.0703 ));
    color_map.addPoint(0.090196, kvs::RGBColor( 19.5424, 10.6858, 52.4787 ));
    color_map.addPoint(0.094118, kvs::RGBColor( 20.9003, 11.0486, 54.8987 ));
    color_map.addPoint(0.098039, kvs::RGBColor( 22.2898, 11.3618, 57.3273 ));
    color_map.addPoint(0.101961, kvs::RGBColor( 23.7125, 11.6237, 59.7613 ));
    color_map.addPoint(0.105882, kvs::RGBColor( 25.169, 11.8325, 62.1955 ));
    color_map.addPoint(0.109804, kvs::RGBColor( 26.6605, 11.987, 64.6247 ));
    color_map.addPoint(0.113725, kvs::RGBColor( 28.1867, 12.0867, 67.0426 ));
    color_map.addPoint(0.117647, kvs::RGBColor( 29.7473, 12.1314, 69.4419 ));
    color_map.addPoint(0.121569, kvs::RGBColor( 31.3415, 12.1217, 71.8141 ));
    color_map.addPoint(0.12549, kvs::RGBColor( 32.9677, 12.0597, 74.1509 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 34.6234, 11.9483, 76.4429 ));
    color_map.addPoint(0.133333, kvs::RGBColor( 36.3064, 11.7917, 78.681 ));
    color_map.addPoint(0.137255, kvs::RGBColor( 38.0136, 11.5943, 80.8567 ));
    color_map.addPoint(0.141176, kvs::RGBColor( 39.7417, 11.3625, 82.9612 ));
    color_map.addPoint(0.145098, kvs::RGBColor( 41.4857, 11.1063, 84.9856 ));
    color_map.addPoint(0.14902, kvs::RGBColor( 43.2416, 10.8347, 86.9229 ));
    color_map.addPoint(0.152941, kvs::RGBColor( 45.0057, 10.5575, 88.7683 ));
    color_map.addPoint(0.156863, kvs::RGBColor( 46.7744, 10.2839, 90.5176 ));
    color_map.addPoint(0.160784, kvs::RGBColor( 48.5436, 10.0238, 92.169 ));
    color_map.addPoint(0.164706, kvs::RGBColor( 50.3107, 9.792, 93.7214 ));
    color_map.addPoint(0.168627, kvs::RGBColor( 52.0733, 9.59616, 95.1757 ));
    color_map.addPoint(0.172549, kvs::RGBColor( 53.8292, 9.44265, 96.5336 ));
    color_map.addPoint(0.176471, kvs::RGBColor( 55.577, 9.33683, 97.7981 ));
    color_map.addPoint(0.180392, kvs::RGBColor( 57.3146, 9.28327, 98.9729 ));
    color_map.addPoint(0.184314, kvs::RGBColor( 59.0422, 9.28327, 100.062 ));
    color_map.addPoint(0.188235, kvs::RGBColor( 60.7596, 9.33835, 101.07 ));
    color_map.addPoint(0.192157, kvs::RGBColor( 62.4666, 9.44902, 102.002 ));
    color_map.addPoint(0.196078, kvs::RGBColor( 64.1631, 9.61477, 102.861 ));
    color_map.addPoint(0.2, kvs::RGBColor( 65.8497, 9.83561, 103.654 ));
    color_map.addPoint(0.203922, kvs::RGBColor( 67.5266, 10.11, 104.383 ));
    color_map.addPoint(0.207843, kvs::RGBColor( 69.1935, 10.4351, 105.054 ));
    color_map.addPoint(0.211765, kvs::RGBColor( 70.8517, 10.8, 105.67 ));
    color_map.addPoint(0.215686, kvs::RGBColor( 72.5019, 11.2029, 106.235 ));
    color_map.addPoint(0.219608, kvs::RGBColor( 74.1446, 11.6392, 106.752 ));
    color_map.addPoint(0.223529, kvs::RGBColor( 75.7804, 12.1048, 107.225 ));
    color_map.addPoint(0.227451, kvs::RGBColor( 77.4098, 12.596, 107.656 ));
    color_map.addPoint(0.231373, kvs::RGBColor( 79.0334, 13.1088, 108.049 ));
    color_map.addPoint(0.235294, kvs::RGBColor( 80.6519, 13.64, 108.405 ));
    color_map.addPoint(0.239216, kvs::RGBColor( 82.2656, 14.1867, 108.726 ));
    color_map.addPoint(0.243137, kvs::RGBColor( 83.8749, 14.7459, 109.015 ));
    color_map.addPoint(0.247059, kvs::RGBColor( 85.4803, 15.3153, 109.274 ));
    color_map.addPoint(0.25098, kvs::RGBColor( 87.0825, 15.8929, 109.503 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 88.6816, 16.4771, 109.705 ));
    color_map.addPoint(0.258824, kvs::RGBColor( 90.2782, 17.0659, 109.881 ));
    color_map.addPoint(0.262745, kvs::RGBColor( 91.8724, 17.658, 110.032 ));
    color_map.addPoint(0.266667, kvs::RGBColor( 93.4649, 18.2526, 110.158 ));
    color_map.addPoint(0.270588, kvs::RGBColor( 95.0558, 18.8483, 110.262 ));
    color_map.addPoint(0.27451, kvs::RGBColor( 96.6453, 19.4445, 110.343 ));
    color_map.addPoint(0.278431, kvs::RGBColor( 98.2331, 20.0407, 110.404 ));
    color_map.addPoint(0.282353, kvs::RGBColor( 99.8205, 20.6364, 110.443 ));
    color_map.addPoint(0.286275, kvs::RGBColor( 101.407, 21.2305, 110.462 ));
    color_map.addPoint(0.290196, kvs::RGBColor( 102.993, 21.8229, 110.461 ));
    color_map.addPoint(0.294118, kvs::RGBColor( 104.579, 22.4135, 110.44 ));
    color_map.addPoint(0.298039, kvs::RGBColor( 106.164, 23.0018, 110.4 ));
    color_map.addPoint(0.301961, kvs::RGBColor( 107.75, 23.5878, 110.342 ));
    color_map.addPoint(0.305882, kvs::RGBColor( 109.336, 24.1715, 110.265 ));
    color_map.addPoint(0.309804, kvs::RGBColor( 110.922, 24.7526, 110.17 ));
    color_map.addPoint(0.313725, kvs::RGBColor( 112.508, 25.3312, 110.056 ));
    color_map.addPoint(0.317647, kvs::RGBColor( 114.094, 25.9072, 109.925 ));
    color_map.addPoint(0.321569, kvs::RGBColor( 115.681, 26.4812, 109.777 ));
    color_map.addPoint(0.32549, kvs::RGBColor( 117.268, 27.0527, 109.611 ));
    color_map.addPoint(0.329412, kvs::RGBColor( 118.856, 27.6221, 109.427 ));
    color_map.addPoint(0.333333, kvs::RGBColor( 120.444, 28.1895, 109.225 ));
    color_map.addPoint(0.337255, kvs::RGBColor( 122.032, 28.7548, 109.006 ));
    color_map.addPoint(0.341176, kvs::RGBColor( 123.621, 29.3184, 108.77 ));
    color_map.addPoint(0.345098, kvs::RGBColor( 125.211, 29.8806, 108.516 ));
    color_map.addPoint(0.34902, kvs::RGBColor( 126.801, 30.4416, 108.244 ));
    color_map.addPoint(0.352941, kvs::RGBColor( 128.391, 31.0016, 107.956 ));
    color_map.addPoint(0.356863, kvs::RGBColor( 129.981, 31.5611, 107.65 ));
    color_map.addPoint(0.360784, kvs::RGBColor( 131.572, 32.1198, 107.326 ));
    color_map.addPoint(0.364706, kvs::RGBColor( 133.163, 32.6782, 106.985 ));
    color_map.addPoint(0.368627, kvs::RGBColor( 134.753, 33.237, 106.626 ));
    color_map.addPoint(0.372549, kvs::RGBColor( 136.344, 33.7962, 106.25 ));
    color_map.addPoint(0.376471, kvs::RGBColor( 137.935, 34.3559, 105.856 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 139.525, 34.9169, 105.445 ));
    color_map.addPoint(0.384314, kvs::RGBColor( 141.115, 35.4792, 105.016 ));
    color_map.addPoint(0.388235, kvs::RGBColor( 142.704, 36.0432, 104.57 ));
    color_map.addPoint(0.392157, kvs::RGBColor( 144.293, 36.6096, 104.106 ));
    color_map.addPoint(0.396078, kvs::RGBColor( 145.881, 37.1782, 103.624 ));
    color_map.addPoint(0.4, kvs::RGBColor( 147.468, 37.7499, 103.125 ));
    color_map.addPoint(0.403922, kvs::RGBColor( 149.053, 38.325, 102.608 ));
    color_map.addPoint(0.407843, kvs::RGBColor( 150.637, 38.9036, 102.074 ));
    color_map.addPoint(0.411765, kvs::RGBColor( 152.22, 39.4862, 101.522 ));
    color_map.addPoint(0.415686, kvs::RGBColor( 153.8, 40.0735, 100.952 ));
    color_map.addPoint(0.419608, kvs::RGBColor( 155.379, 40.6659, 100.365 ));
    color_map.addPoint(0.423529, kvs::RGBColor( 156.956, 41.2633, 99.7608 ));
    color_map.addPoint(0.427451, kvs::RGBColor( 158.53, 41.8669, 99.1392 ));
    color_map.addPoint(0.431373, kvs::RGBColor( 160.101, 42.4766, 98.5004 ));
    color_map.addPoint(0.435294, kvs::RGBColor( 161.669, 43.093, 97.8445 ));
    color_map.addPoint(0.439216, kvs::RGBColor( 163.234, 43.7167, 97.1716 ));
    color_map.addPoint(0.443137, kvs::RGBColor( 164.796, 44.3481, 96.4815 ));
    color_map.addPoint(0.447059, kvs::RGBColor( 166.354, 44.9874, 95.7744 ));
    color_map.addPoint(0.45098, kvs::RGBColor( 167.908, 45.6353, 95.0507 ));
    color_map.addPoint(0.454902, kvs::RGBColor( 169.458, 46.2924, 94.3107 ));
    color_map.addPoint(0.458824, kvs::RGBColor( 171.003, 46.959, 93.5541 ));
    color_map.addPoint(0.462745, kvs::RGBColor( 172.543, 47.6358, 92.7815 ));
    color_map.addPoint(0.466667, kvs::RGBColor( 174.077, 48.3228, 91.993 ));
    color_map.addPoint(0.470588, kvs::RGBColor( 175.607, 49.0209, 91.1888 ));
    color_map.addPoint(0.47451, kvs::RGBColor( 177.13, 49.7304, 90.3689 ));
    color_map.addPoint(0.478431, kvs::RGBColor( 178.647, 50.452, 89.5338 ));
    color_map.addPoint(0.482353, kvs::RGBColor( 180.157, 51.1856, 88.6831 ));
    color_map.addPoint(0.486275, kvs::RGBColor( 181.661, 51.9323, 87.8177 ));
    color_map.addPoint(0.490196, kvs::RGBColor( 183.157, 52.6922, 86.9374 ));
    color_map.addPoint(0.494118, kvs::RGBColor( 184.646, 53.4658, 86.0431 ));
    color_map.addPoint(0.498039, kvs::RGBColor( 186.127, 54.2535, 85.1346 ));
    color_map.addPoint(0.501961, kvs::RGBColor( 187.599, 55.056, 84.2125 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 189.063, 55.8736, 83.2769 ));
    color_map.addPoint(0.509804, kvs::RGBColor( 190.517, 56.7064, 82.3283 ));
    color_map.addPoint(0.513725, kvs::RGBColor( 191.962, 57.555, 81.3667 ));
    color_map.addPoint(0.517647, kvs::RGBColor( 193.398, 58.4197, 80.3928 ));
    color_map.addPoint(0.521569, kvs::RGBColor( 194.823, 59.3013, 79.4067 ));
    color_map.addPoint(0.52549, kvs::RGBColor( 196.237, 60.1996, 78.4087 ));
    color_map.addPoint(0.529412, kvs::RGBColor( 197.64, 61.1151, 77.3991 ));
    color_map.addPoint(0.533333, kvs::RGBColor( 199.032, 62.0484, 76.3784 ));
    color_map.addPoint(0.537255, kvs::RGBColor( 200.412, 62.9993, 75.3466 ));
    color_map.addPoint(0.541176, kvs::RGBColor( 201.78, 63.9683, 74.3044 ));
    color_map.addPoint(0.545098, kvs::RGBColor( 203.135, 64.9556, 73.2523 ));
    color_map.addPoint(0.54902, kvs::RGBColor( 204.477, 65.9619, 72.1902 ));
    color_map.addPoint(0.552941, kvs::RGBColor( 205.806, 66.9865, 71.119 ));
    color_map.addPoint(0.556863, kvs::RGBColor( 207.121, 68.0304, 70.0386 ));
    color_map.addPoint(0.560784, kvs::RGBColor( 208.422, 69.0933, 68.9494 ));
    color_map.addPoint(0.564706, kvs::RGBColor( 209.708, 70.1752, 67.8517 ));
    color_map.addPoint(0.568627, kvs::RGBColor( 210.98, 71.2768, 66.7462 ));
    color_map.addPoint(0.572549, kvs::RGBColor( 212.236, 72.3978, 65.6327 ));
    color_map.addPoint(0.576471, kvs::RGBColor( 213.477, 73.5382, 64.5119 ));
    color_map.addPoint(0.580392, kvs::RGBColor( 214.702, 74.6979, 63.3838 ));
    color_map.addPoint(0.584314, kvs::RGBColor( 215.911, 75.8775, 62.2488 ));
    color_map.addPoint(0.588235, kvs::RGBColor( 217.103, 77.0763, 61.1072 ));
    color_map.addPoint(0.592157, kvs::RGBColor( 218.278, 78.2947, 59.9589 ));
    color_map.addPoint(0.596078, kvs::RGBColor( 219.436, 79.5325, 58.8045 ));
    color_map.addPoint(0.6, kvs::RGBColor( 220.577, 80.7896, 57.644 ));
    color_map.addPoint(0.603922, kvs::RGBColor( 221.699, 82.0659, 56.4779 ));
    color_map.addPoint(0.607843, kvs::RGBColor( 222.804, 83.361, 55.3059 ));
    color_map.addPoint(0.611765, kvs::RGBColor( 223.89, 84.6753, 54.1283 ));
    color_map.addPoint(0.615686, kvs::RGBColor( 224.958, 86.0082, 52.9451 ));
    color_map.addPoint(0.619608, kvs::RGBColor( 226.007, 87.3594, 51.7568 ));
    color_map.addPoint(0.623529, kvs::RGBColor( 227.037, 88.729, 50.5629 ));
    color_map.addPoint(0.627451, kvs::RGBColor( 228.048, 90.1167, 49.3639 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 229.039, 91.5223, 48.1593 ));
    color_map.addPoint(0.635294, kvs::RGBColor( 230.011, 92.9455, 46.9496 ));
    color_map.addPoint(0.639216, kvs::RGBColor( 230.962, 94.3857, 45.7343 ));
    color_map.addPoint(0.643137, kvs::RGBColor( 231.894, 95.8433, 44.5136 ));
    color_map.addPoint(0.647059, kvs::RGBColor( 232.806, 97.3172, 43.2875 ));
    color_map.addPoint(0.65098, kvs::RGBColor( 233.698, 98.8077, 42.0556 ));
    color_map.addPoint(0.654902, kvs::RGBColor( 234.569, 100.314, 40.8178 ));
    color_map.addPoint(0.658824, kvs::RGBColor( 235.42, 101.837, 39.5742 ));
    color_map.addPoint(0.662745, kvs::RGBColor( 236.25, 103.374, 38.3245 ));
    color_map.addPoint(0.666667, kvs::RGBColor( 237.059, 104.927, 37.0686 ));
    color_map.addPoint(0.670588, kvs::RGBColor( 237.848, 106.495, 35.8063 ));
    color_map.addPoint(0.67451, kvs::RGBColor( 238.615, 108.077, 34.5372 ));
    color_map.addPoint(0.678431, kvs::RGBColor( 239.362, 109.673, 33.2617 ));
    color_map.addPoint(0.682353, kvs::RGBColor( 240.088, 111.283, 31.9793 ));
    color_map.addPoint(0.686275, kvs::RGBColor( 240.793, 112.907, 30.6903 ));
    color_map.addPoint(0.690196, kvs::RGBColor( 241.476, 114.544, 29.3944 ));
    color_map.addPoint(0.694118, kvs::RGBColor( 242.138, 116.193, 28.0918 ));
    color_map.addPoint(0.698039, kvs::RGBColor( 242.779, 117.855, 26.7829 ));
    color_map.addPoint(0.701961, kvs::RGBColor( 243.399, 119.53, 25.4679 ));
    color_map.addPoint(0.705882, kvs::RGBColor( 243.997, 121.216, 24.1472 ));
    color_map.addPoint(0.709804, kvs::RGBColor( 244.574, 122.914, 22.8222 ));
    color_map.addPoint(0.713725, kvs::RGBColor( 245.13, 124.623, 21.4937 ));
    color_map.addPoint(0.717647, kvs::RGBColor( 245.664, 126.343, 20.1636 ));
    color_map.addPoint(0.721569, kvs::RGBColor( 246.176, 128.073, 18.834 ));
    color_map.addPoint(0.72549, kvs::RGBColor( 246.667, 129.815, 17.508 ));
    color_map.addPoint(0.729412, kvs::RGBColor( 247.137, 131.566, 16.1894 ));
    color_map.addPoint(0.733333, kvs::RGBColor( 247.584, 133.328, 14.8836 ));
    color_map.addPoint(0.737255, kvs::RGBColor( 248.01, 135.098, 13.5976 ));
    color_map.addPoint(0.741176, kvs::RGBColor( 248.415, 136.879, 12.34 ));
    color_map.addPoint(0.745098, kvs::RGBColor( 248.798, 138.668, 11.1226 ));
    color_map.addPoint(0.74902, kvs::RGBColor( 249.158, 140.467, 9.95775 ));
    color_map.addPoint(0.752941, kvs::RGBColor( 249.498, 142.274, 8.9074 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 249.815, 144.09, 8.00929 ));
    color_map.addPoint(0.760784, kvs::RGBColor( 250.11, 145.913, 7.26954 ));
    color_map.addPoint(0.764706, kvs::RGBColor( 250.383, 147.745, 6.69375 ));
    color_map.addPoint(0.768627, kvs::RGBColor( 250.635, 149.585, 6.28855 ));
    color_map.addPoint(0.772549, kvs::RGBColor( 250.864, 151.431, 6.06135 ));
    color_map.addPoint(0.776471, kvs::RGBColor( 251.071, 153.286, 6.01953 ));
    color_map.addPoint(0.780392, kvs::RGBColor( 251.255, 155.148, 6.17151 ));
    color_map.addPoint(0.784314, kvs::RGBColor( 251.418, 157.016, 6.52596 ));
    color_map.addPoint(0.788235, kvs::RGBColor( 251.558, 158.892, 7.09257 ));
    color_map.addPoint(0.792157, kvs::RGBColor( 251.676, 160.774, 7.88154 ));
    color_map.addPoint(0.796078, kvs::RGBColor( 251.771, 162.662, 8.90358 ));
    color_map.addPoint(0.8, kvs::RGBColor( 251.844, 164.557, 10.1709 ));
    color_map.addPoint(0.803922, kvs::RGBColor( 251.894, 166.457, 11.6232 ));
    color_map.addPoint(0.807843, kvs::RGBColor( 251.921, 168.364, 13.1962 ));
    color_map.addPoint(0.811765, kvs::RGBColor( 251.926, 170.276, 14.8739 ));
    color_map.addPoint(0.815686, kvs::RGBColor( 251.908, 172.193, 16.6405 ));
    color_map.addPoint(0.819608, kvs::RGBColor( 251.867, 174.116, 18.4847 ));
    color_map.addPoint(0.823529, kvs::RGBColor( 251.803, 176.043, 20.3975 ));
    color_map.addPoint(0.827451, kvs::RGBColor( 251.717, 177.976, 22.3714 ));
    color_map.addPoint(0.831373, kvs::RGBColor( 251.607, 179.913, 24.402 ));
    color_map.addPoint(0.835294, kvs::RGBColor( 251.475, 181.854, 26.4851 ));
    color_map.addPoint(0.839216, kvs::RGBColor( 251.319, 183.799, 28.6184 ));
    color_map.addPoint(0.843137, kvs::RGBColor( 251.141, 185.749, 30.8002 ));
    color_map.addPoint(0.847059, kvs::RGBColor( 250.939, 187.702, 33.0294 ));
    color_map.addPoint(0.85098, kvs::RGBColor( 250.715, 189.658, 35.3055 ));
    color_map.addPoint(0.854902, kvs::RGBColor( 250.468, 191.618, 37.6291 ));
    color_map.addPoint(0.858824, kvs::RGBColor( 250.199, 193.579, 40.0001 ));
    color_map.addPoint(0.862745, kvs::RGBColor( 249.908, 195.543, 42.42 ));
    color_map.addPoint(0.866667, kvs::RGBColor( 249.596, 197.509, 44.8894 ));
    color_map.addPoint(0.870588, kvs::RGBColor( 249.262, 199.476, 47.4104 ));
    color_map.addPoint(0.87451, kvs::RGBColor( 248.908, 201.443, 49.9846 ));
    color_map.addPoint(0.878431, kvs::RGBColor( 248.533, 203.411, 52.6147 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 248.137, 205.379, 55.3036 ));
    color_map.addPoint(0.886275, kvs::RGBColor( 247.724, 207.346, 58.0528 ));
    color_map.addPoint(0.890196, kvs::RGBColor( 247.295, 209.31, 60.8649 ));
    color_map.addPoint(0.894118, kvs::RGBColor( 246.85, 211.271, 63.7429 ));
    color_map.addPoint(0.898039, kvs::RGBColor( 246.392, 213.229, 66.6912 ));
    color_map.addPoint(0.901961, kvs::RGBColor( 245.92, 215.181, 69.7147 ));
    color_map.addPoint(0.905882, kvs::RGBColor( 245.442, 217.126, 72.8142 ));
    color_map.addPoint(0.909804, kvs::RGBColor( 244.96, 219.063, 75.9925 ));
    color_map.addPoint(0.913725, kvs::RGBColor( 244.474, 220.989, 79.2591 ));
    color_map.addPoint(0.917647, kvs::RGBColor( 243.993, 222.903, 82.6134 ));
    color_map.addPoint(0.921569, kvs::RGBColor( 243.524, 224.8, 86.0561 ));
    color_map.addPoint(0.92549, kvs::RGBColor( 243.07, 226.68, 89.5991 ));
    color_map.addPoint(0.929412, kvs::RGBColor( 242.644, 228.538, 93.2349 ));
    color_map.addPoint(0.933333, kvs::RGBColor( 242.255, 230.369, 96.9691 ));
    color_map.addPoint(0.937255, kvs::RGBColor( 241.914, 232.171, 100.799 ));
    color_map.addPoint(0.941176, kvs::RGBColor( 241.636, 233.937, 104.72 ));
    color_map.addPoint(0.945098, kvs::RGBColor( 241.436, 235.663, 108.725 ));
    color_map.addPoint(0.94902, kvs::RGBColor( 241.33, 237.344, 112.804 ));
    color_map.addPoint(0.952941, kvs::RGBColor( 241.333, 238.976, 116.941 ));
    color_map.addPoint(0.956863, kvs::RGBColor( 241.46, 240.554, 121.117 ));
    color_map.addPoint(0.960784, kvs::RGBColor( 241.724, 242.076, 125.314 ));
    color_map.addPoint(0.964706, kvs::RGBColor( 242.134, 243.541, 129.504 ));
    color_map.addPoint(0.968627, kvs::RGBColor( 242.694, 244.95, 133.672 ));
    color_map.addPoint(0.972549, kvs::RGBColor( 243.405, 246.303, 137.792 ));
    color_map.addPoint(0.976471, kvs::RGBColor( 244.263, 247.606, 141.85 ));
    color_map.addPoint(0.980392, kvs::RGBColor( 245.262, 248.861, 145.841 ));
    color_map.addPoint(0.984314, kvs::RGBColor( 246.393, 250.073, 149.738 ));
    color_map.addPoint(0.988235, kvs::RGBColor( 247.646, 251.247, 153.549 ));
    color_map.addPoint(0.992157, kvs::RGBColor( 249.01, 252.387, 157.274 ));
    color_map.addPoint(0.996078, kvs::RGBColor( 250.476, 253.498, 160.909 ));
    color_map.addPoint(1, kvs::RGBColor( 252.032, 254.583, 164.456 ));
    color_map.create();
    this->add("Inferno (matplotlib)", color_map);

    //Jet
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 143.438 ));
    color_map.addPoint(-0.777778, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(-0.269841, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(-0.015873, kvs::RGBColor( 127.5, 255, 127.5 ));
    color_map.addPoint(0.238095, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.746032, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 127.5, 0, 0 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Jet", color_map);

    //KAAMS Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 255, 255, 255));
    color_map.addPoint( 0.083,kvs::RGBColor( 255, 255, 255));
    color_map.addPoint( 0.083,kvs::RGBColor( 255, 0, 0));
    color_map.addPoint( 0.166,kvs::RGBColor( 255, 0, 0));
    color_map.addPoint( 0.166,kvs::RGBColor( 0, 255, 0));
    color_map.addPoint( 0.25,kvs::RGBColor( 0, 255, 0));
    color_map.addPoint( 0.25,kvs::RGBColor( 0, 0, 255));
    color_map.addPoint( 0.333,kvs::RGBColor( 0, 0, 255));
    color_map.addPoint( 0.333,kvs::RGBColor( 255, 255, 0));
    color_map.addPoint( 0.416,kvs::RGBColor( 255, 255, 0));
    color_map.addPoint( 0.416,kvs::RGBColor( 255, 0, 255));
    color_map.addPoint( 0.5,kvs::RGBColor( 255, 0, 255));
    color_map.addPoint( 0.5,kvs::RGBColor( 0, 255, 255));
    color_map.addPoint( 0.583,kvs::RGBColor( 0, 255, 255));
    color_map.addPoint( 0.583,kvs::RGBColor( 160.65, 160.65, 255));
    color_map.addPoint( 0.666,kvs::RGBColor( 160.65, 160.65, 255));
    color_map.addPoint( 0.666,kvs::RGBColor( 170.85, 127.5, 84.15));
    color_map.addPoint( 0.75,kvs::RGBColor( 170.85, 127.5, 84.15));
    color_map.addPoint( 0.75,kvs::RGBColor( 255, 127.5, 191.25));
    color_map.addPoint( 0.833,kvs::RGBColor( 255, 127.5, 191.25));
    color_map.addPoint( 0.833,kvs::RGBColor( 135.15, 89.25, 178.5));
    color_map.addPoint( 0.916,kvs::RGBColor( 135.15, 89.25, 178.5));
    color_map.addPoint( 0.916,kvs::RGBColor( 255, 191.25, 127.5));
    color_map.addPoint( 1,kvs::RGBColor( 255, 191.25, 127.5));
    color_map.addPoint( 1,kvs::RGBColor( 0, 0, 0));
    color_map.create();
    this->add("KAAMS Step", color_map);

    //Linear Blue (8_31f)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 245, 255, 250 ));
    color_map.addPoint(0.05, kvs::RGBColor( 208, 245, 233 ));
    color_map.addPoint(0.1, kvs::RGBColor( 171, 237, 222 ));
    color_map.addPoint(0.15, kvs::RGBColor( 142, 230, 215 ));
    color_map.addPoint(0.2, kvs::RGBColor( 122, 222, 210 ));
    color_map.addPoint(0.25, kvs::RGBColor( 112, 212, 205 ));
    color_map.addPoint(0.3, kvs::RGBColor( 102, 204, 201 ));
    color_map.addPoint(0.35, kvs::RGBColor( 96.0001, 196, 196 ));
    color_map.addPoint(0.4, kvs::RGBColor( 89.0001, 181, 186 ));
    color_map.addPoint(0.45, kvs::RGBColor( 82.9999, 167, 176 ));
    color_map.addPoint(0.5, kvs::RGBColor( 77.0001, 155, 168 ));
    color_map.addPoint(0.55, kvs::RGBColor( 63, 139, 158 ));
    color_map.addPoint(0.6, kvs::RGBColor( 61.0001, 126, 148 ));
    color_map.addPoint(0.65, kvs::RGBColor( 58, 112, 138 ));
    color_map.addPoint(0.7, kvs::RGBColor( 58, 103, 133 ));
    color_map.addPoint(0.75, kvs::RGBColor( 59.0001, 93.9999, 128 ));
    color_map.addPoint(0.8, kvs::RGBColor( 58, 82.0001, 120 ));
    color_map.addPoint(0.85, kvs::RGBColor( 56, 72, 112 ));
    color_map.addPoint(0.9, kvs::RGBColor( 49, 60, 102 ));
    color_map.addPoint(0.95, kvs::RGBColor( 40.9999, 47.0001, 89.0001 ));
    color_map.addPoint(1, kvs::RGBColor( 33.9999, 31.9999, 77.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Linear Blue (8_31f)", color_map);

    //Linear Green (Gr4L)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 14, 28, 31.0001 ));
    color_map.addPoint(0.05, kvs::RGBColor( 19.0001, 44, 46 ));
    color_map.addPoint(0.1, kvs::RGBColor( 22.0001, 59.0001, 56 ));
    color_map.addPoint(0.15, kvs::RGBColor( 24.0001, 70.9999, 63.9999 ));
    color_map.addPoint(0.2, kvs::RGBColor( 28, 89.0001, 70.9999 ));
    color_map.addPoint(0.25, kvs::RGBColor( 28.9999, 102, 70.9999 ));
    color_map.addPoint(0.3, kvs::RGBColor( 30, 115, 68.9999 ));
    color_map.addPoint(0.35, kvs::RGBColor( 30, 125, 61.9999 ));
    color_map.addPoint(0.4, kvs::RGBColor( 28.9999, 133, 52.0001 ));
    color_map.addPoint(0.45, kvs::RGBColor( 28, 140, 39 ));
    color_map.addPoint(0.5, kvs::RGBColor( 21, 150, 21 ));
    color_map.addPoint(0.55, kvs::RGBColor( 28, 161, 12.9999 ));
    color_map.addPoint(0.6, kvs::RGBColor( 54.0001, 173, 21 ));
    color_map.addPoint(0.65, kvs::RGBColor( 81, 184, 28.9999 ));
    color_map.addPoint(0.7, kvs::RGBColor( 110, 194, 40.9999 ));
    color_map.addPoint(0.75, kvs::RGBColor( 142, 204, 61.0001 ));
    color_map.addPoint(0.8, kvs::RGBColor( 170, 214, 75.0001 ));
    color_map.addPoint(0.85, kvs::RGBColor( 200, 224, 101 ));
    color_map.addPoint(0.9, kvs::RGBColor( 226, 235, 136 ));
    color_map.addPoint(0.95, kvs::RGBColor( 245, 242, 171 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 251, 230 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Linear Green (Gr4L)", color_map);

    //Linear YGB 1211g
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 255, 252, 247 ));
    color_map.addPoint(0.02, kvs::RGBColor( 255, 243, 224 ));
    color_map.addPoint(0.05, kvs::RGBColor( 247, 231, 198 ));
    color_map.addPoint(0.1, kvs::RGBColor( 242, 229, 165 ));
    color_map.addPoint(0.15, kvs::RGBColor( 230, 224, 142 ));
    color_map.addPoint(0.2, kvs::RGBColor( 216, 219, 123 ));
    color_map.addPoint(0.25, kvs::RGBColor( 176, 209, 111 ));
    color_map.addPoint(0.3, kvs::RGBColor( 131, 196, 98.0001 ));
    color_map.addPoint(0.35, kvs::RGBColor( 86, 184, 86 ));
    color_map.addPoint(0.4, kvs::RGBColor( 70.9999, 168, 100 ));
    color_map.addPoint(0.45, kvs::RGBColor( 59.0001, 163, 111 ));
    color_map.addPoint(0.5, kvs::RGBColor( 52.0001, 153, 124 ));
    color_map.addPoint(0.55, kvs::RGBColor( 44, 145, 137 ));
    color_map.addPoint(0.6, kvs::RGBColor( 35.9999, 132, 140 ));
    color_map.addPoint(0.65, kvs::RGBColor( 33.9999, 117, 138 ));
    color_map.addPoint(0.7, kvs::RGBColor( 31.9999, 101, 135 ));
    color_map.addPoint(0.75, kvs::RGBColor( 30, 82.0001, 133 ));
    color_map.addPoint(0.8, kvs::RGBColor( 31.0001, 66.0001, 130 ));
    color_map.addPoint(0.85, kvs::RGBColor( 33.9999, 58, 128 ));
    color_map.addPoint(0.9, kvs::RGBColor( 37, 49, 125 ));
    color_map.addPoint(0.95, kvs::RGBColor( 47.9999, 42, 120 ));
    color_map.addPoint(1, kvs::RGBColor( 66.0001, 49.9999, 112 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Linear YGB 1211g", color_map);

    //Magma (matplotlib)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0.37281, 0.11883, 3.53583 ));
    color_map.addPoint(0.003922, kvs::RGBColor( 0.57579, 0.330225, 4.67441 ));
    color_map.addPoint(0.007843, kvs::RGBColor( 0.836145, 0.587775, 6.04554 ));
    color_map.addPoint(0.011765, kvs::RGBColor( 1.15056, 0.88995, 7.64107 ));
    color_map.addPoint(0.015686, kvs::RGBColor( 1.51725, 1.23497, 9.46815 ));
    color_map.addPoint(0.019608, kvs::RGBColor( 1.93494, 1.62078, 11.4681 ));
    color_map.addPoint(0.023529, kvs::RGBColor( 2.40363, 2.04561, 13.4752 ));
    color_map.addPoint(0.027451, kvs::RGBColor( 2.92358, 2.50614, 15.4912 ));
    color_map.addPoint(0.031373, kvs::RGBColor( 3.49554, 3.00161, 17.5101 ));
    color_map.addPoint(0.035294, kvs::RGBColor( 4.11978, 3.5292, 19.5338 ));
    color_map.addPoint(0.039216, kvs::RGBColor( 4.79782, 4.08663, 21.5689 ));
    color_map.addPoint(0.043137, kvs::RGBColor( 5.53146, 4.6716, 23.6155 ));
    color_map.addPoint(0.047059, kvs::RGBColor( 6.32196, 5.28233, 25.6724 ));
    color_map.addPoint(0.05098, kvs::RGBColor( 7.17136, 5.91625, 27.7407 ));
    color_map.addPoint(0.054902, kvs::RGBColor( 8.08248, 6.57008, 29.8261 ));
    color_map.addPoint(0.058824, kvs::RGBColor( 9.0576, 7.24123, 31.9283 ));
    color_map.addPoint(0.062745, kvs::RGBColor( 10.1, 7.92795, 34.0463 ));
    color_map.addPoint(0.066667, kvs::RGBColor( 11.1767, 8.62665, 36.1809 ));
    color_map.addPoint(0.070588, kvs::RGBColor( 12.2558, 9.33479, 38.3334 ));
    color_map.addPoint(0.07451, kvs::RGBColor( 13.3416, 10.0488, 40.5045 ));
    color_map.addPoint(0.078431, kvs::RGBColor( 14.4368, 10.7508, 42.6987 ));
    color_map.addPoint(0.082353, kvs::RGBColor( 15.542, 11.4225, 44.9129 ));
    color_map.addPoint(0.086275, kvs::RGBColor( 16.6592, 12.0661, 47.1475 ));
    color_map.addPoint(0.090196, kvs::RGBColor( 17.7898, 12.6801, 49.4024 ));
    color_map.addPoint(0.094118, kvs::RGBColor( 18.9355, 13.2643, 51.6783 ));
    color_map.addPoint(0.098039, kvs::RGBColor( 20.0978, 13.8169, 53.9751 ));
    color_map.addPoint(0.101961, kvs::RGBColor( 21.2787, 14.3374, 56.2925 ));
    color_map.addPoint(0.105882, kvs::RGBColor( 22.4795, 14.8239, 58.6301 ));
    color_map.addPoint(0.109804, kvs::RGBColor( 23.702, 15.2755, 60.9868 ));
    color_map.addPoint(0.113725, kvs::RGBColor( 24.9474, 15.6904, 63.3616 ));
    color_map.addPoint(0.117647, kvs::RGBColor( 26.2178, 16.0676, 65.7528 ));
    color_map.addPoint(0.121569, kvs::RGBColor( 27.5142, 16.4054, 68.1587 ));
    color_map.addPoint(0.12549, kvs::RGBColor( 28.839, 16.7005, 70.5799 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 30.1933, 16.9521, 73.0119 ));
    color_map.addPoint(0.133333, kvs::RGBColor( 31.5774, 17.1602, 75.4491 ));
    color_map.addPoint(0.137255, kvs::RGBColor( 32.9919, 17.3234, 77.888 ));
    color_map.addPoint(0.141176, kvs::RGBColor( 34.4385, 17.4397, 80.325 ));
    color_map.addPoint(0.145098, kvs::RGBColor( 35.9188, 17.5068, 82.7572 ));
    color_map.addPoint(0.14902, kvs::RGBColor( 37.4302, 17.5282, 85.1728 ));
    color_map.addPoint(0.152941, kvs::RGBColor( 38.9739, 17.5024, 87.568 ));
    color_map.addPoint(0.156863, kvs::RGBColor( 40.5496, 17.4303, 89.9354 ));
    color_map.addPoint(0.160784, kvs::RGBColor( 42.1535, 17.3173, 92.2631 ));
    color_map.addPoint(0.164706, kvs::RGBColor( 43.7868, 17.1628, 94.5466 ));
    color_map.addPoint(0.168627, kvs::RGBColor( 45.4441, 16.9769, 96.7717 ));
    color_map.addPoint(0.172549, kvs::RGBColor( 47.1243, 16.7617, 98.9331 ));
    color_map.addPoint(0.176471, kvs::RGBColor( 48.8223, 16.5286, 101.019 ));
    color_map.addPoint(0.180392, kvs::RGBColor( 50.5351, 16.2848, 103.022 ));
    color_map.addPoint(0.184314, kvs::RGBColor( 52.2584, 16.0413, 104.936 ));
    color_map.addPoint(0.188235, kvs::RGBColor( 53.9881, 15.808, 106.755 ));
    color_map.addPoint(0.192157, kvs::RGBColor( 55.7206, 15.5953, 108.475 ));
    color_map.addPoint(0.196078, kvs::RGBColor( 57.452, 15.4135, 110.094 ));
    color_map.addPoint(0.2, kvs::RGBColor( 59.1796, 15.2717, 111.612 ));
    color_map.addPoint(0.203922, kvs::RGBColor( 60.9006, 15.1768, 113.03 ));
    color_map.addPoint(0.207843, kvs::RGBColor( 62.6135, 15.1348, 114.351 ));
    color_map.addPoint(0.211765, kvs::RGBColor( 64.3161, 15.1508, 115.578 ));
    color_map.addPoint(0.215686, kvs::RGBColor( 66.0085, 15.225, 116.716 ));
    color_map.addPoint(0.219608, kvs::RGBColor( 67.689, 15.3604, 117.769 ));
    color_map.addPoint(0.223529, kvs::RGBColor( 69.3585, 15.5535, 118.743 ));
    color_map.addPoint(0.227451, kvs::RGBColor( 71.0157, 15.8044, 119.643 ));
    color_map.addPoint(0.231373, kvs::RGBColor( 72.6625, 16.1078, 120.475 ));
    color_map.addPoint(0.235294, kvs::RGBColor( 74.2983, 16.461, 121.243 ));
    color_map.addPoint(0.239216, kvs::RGBColor( 75.9237, 16.8598, 121.952 ));
    color_map.addPoint(0.243137, kvs::RGBColor( 77.5407, 17.2979, 122.607 ));
    color_map.addPoint(0.247059, kvs::RGBColor( 79.1474, 17.774, 123.212 ));
    color_map.addPoint(0.25098, kvs::RGBColor( 80.7468, 18.281, 123.772 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 82.3392, 18.8144, 124.289 ));
    color_map.addPoint(0.258824, kvs::RGBColor( 83.9241, 19.3729, 124.768 ));
    color_map.addPoint(0.262745, kvs::RGBColor( 85.5035, 19.9502, 125.211 ));
    color_map.addPoint(0.266667, kvs::RGBColor( 87.0779, 20.5438, 125.621 ));
    color_map.addPoint(0.270588, kvs::RGBColor( 88.6472, 21.1512, 126.001 ));
    color_map.addPoint(0.27451, kvs::RGBColor( 90.2121, 21.7701, 126.353 ));
    color_map.addPoint(0.278431, kvs::RGBColor( 91.774, 22.3969, 126.678 ));
    color_map.addPoint(0.282353, kvs::RGBColor( 93.3331, 23.0301, 126.98 ));
    color_map.addPoint(0.286275, kvs::RGBColor( 94.8896, 23.6681, 127.259 ));
    color_map.addPoint(0.290196, kvs::RGBColor( 96.4438, 24.3097, 127.517 ));
    color_map.addPoint(0.294118, kvs::RGBColor( 97.9962, 24.953, 127.756 ));
    color_map.addPoint(0.298039, kvs::RGBColor( 99.5479, 25.5966, 127.975 ));
    color_map.addPoint(0.301961, kvs::RGBColor( 101.099, 26.24, 128.178 ));
    color_map.addPoint(0.305882, kvs::RGBColor( 102.65, 26.8821, 128.363 ));
    color_map.addPoint(0.309804, kvs::RGBColor( 104.2, 27.5221, 128.533 ));
    color_map.addPoint(0.313725, kvs::RGBColor( 105.751, 28.1599, 128.689 ));
    color_map.addPoint(0.317647, kvs::RGBColor( 107.302, 28.7946, 128.83 ));
    color_map.addPoint(0.321569, kvs::RGBColor( 108.854, 29.4257, 128.957 ));
    color_map.addPoint(0.32549, kvs::RGBColor( 110.407, 30.053, 129.071 ));
    color_map.addPoint(0.329412, kvs::RGBColor( 111.961, 30.676, 129.172 ));
    color_map.addPoint(0.333333, kvs::RGBColor( 113.517, 31.2946, 129.26 ));
    color_map.addPoint(0.337255, kvs::RGBColor( 115.074, 31.9087, 129.335 ));
    color_map.addPoint(0.341176, kvs::RGBColor( 116.633, 32.5181, 129.399 ));
    color_map.addPoint(0.345098, kvs::RGBColor( 118.195, 33.1227, 129.451 ));
    color_map.addPoint(0.34902, kvs::RGBColor( 119.758, 33.7225, 129.491 ));
    color_map.addPoint(0.352941, kvs::RGBColor( 121.324, 34.3171, 129.52 ));
    color_map.addPoint(0.356863, kvs::RGBColor( 122.892, 34.9072, 129.537 ));
    color_map.addPoint(0.360784, kvs::RGBColor( 124.462, 35.4924, 129.543 ));
    color_map.addPoint(0.364706, kvs::RGBColor( 126.036, 36.0728, 129.537 ));
    color_map.addPoint(0.368627, kvs::RGBColor( 127.612, 36.6483, 129.52 ));
    color_map.addPoint(0.372549, kvs::RGBColor( 129.19, 37.2193, 129.491 ));
    color_map.addPoint(0.376471, kvs::RGBColor( 130.772, 37.7856, 129.45 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 132.356, 38.3477, 129.398 ));
    color_map.addPoint(0.384314, kvs::RGBColor( 133.944, 38.9051, 129.334 ));
    color_map.addPoint(0.388235, kvs::RGBColor( 135.534, 39.4584, 129.258 ));
    color_map.addPoint(0.392157, kvs::RGBColor( 137.128, 40.008, 129.171 ));
    color_map.addPoint(0.396078, kvs::RGBColor( 138.724, 40.5534, 129.071 ));
    color_map.addPoint(0.4, kvs::RGBColor( 140.323, 41.0953, 128.958 ));
    color_map.addPoint(0.403922, kvs::RGBColor( 141.926, 41.6336, 128.834 ));
    color_map.addPoint(0.407843, kvs::RGBColor( 143.531, 42.1688, 128.696 ));
    color_map.addPoint(0.411765, kvs::RGBColor( 145.139, 42.7008, 128.547 ));
    color_map.addPoint(0.415686, kvs::RGBColor( 146.75, 43.2301, 128.384 ));
    color_map.addPoint(0.419608, kvs::RGBColor( 148.364, 43.757, 128.208 ));
    color_map.addPoint(0.423529, kvs::RGBColor( 149.98, 44.2813, 128.019 ));
    color_map.addPoint(0.427451, kvs::RGBColor( 151.6, 44.8038, 127.816 ));
    color_map.addPoint(0.431373, kvs::RGBColor( 153.221, 45.3245, 127.6 ));
    color_map.addPoint(0.435294, kvs::RGBColor( 154.846, 45.8436, 127.37 ));
    color_map.addPoint(0.439216, kvs::RGBColor( 156.472, 46.3618, 127.127 ));
    color_map.addPoint(0.443137, kvs::RGBColor( 158.101, 46.8792, 126.869 ));
    color_map.addPoint(0.447059, kvs::RGBColor( 159.732, 47.3961, 126.596 ));
    color_map.addPoint(0.45098, kvs::RGBColor( 161.365, 47.9127, 126.31 ));
    color_map.addPoint(0.454902, kvs::RGBColor( 163, 48.4299, 126.008 ));
    color_map.addPoint(0.458824, kvs::RGBColor( 164.636, 48.9478, 125.692 ));
    color_map.addPoint(0.462745, kvs::RGBColor( 166.274, 49.4664, 125.361 ));
    color_map.addPoint(0.466667, kvs::RGBColor( 167.913, 49.9869, 125.015 ));
    color_map.addPoint(0.470588, kvs::RGBColor( 169.553, 50.5091, 124.653 ));
    color_map.addPoint(0.47451, kvs::RGBColor( 171.194, 51.0339, 124.276 ));
    color_map.addPoint(0.478431, kvs::RGBColor( 172.835, 51.5618, 123.884 ));
    color_map.addPoint(0.482353, kvs::RGBColor( 174.477, 52.0929, 123.476 ));
    color_map.addPoint(0.486275, kvs::RGBColor( 176.119, 52.6279, 123.052 ));
    color_map.addPoint(0.490196, kvs::RGBColor( 177.76, 53.1678, 122.613 ));
    color_map.addPoint(0.494118, kvs::RGBColor( 179.401, 53.7127, 122.157 ));
    color_map.addPoint(0.498039, kvs::RGBColor( 181.04, 54.2632, 121.686 ));
    color_map.addPoint(0.501961, kvs::RGBColor( 182.679, 54.8204, 121.199 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 184.315, 55.3845, 120.696 ));
    color_map.addPoint(0.509804, kvs::RGBColor( 185.95, 55.9564, 120.176 ));
    color_map.addPoint(0.513725, kvs::RGBColor( 187.582, 56.5368, 119.641 ));
    color_map.addPoint(0.517647, kvs::RGBColor( 189.211, 57.1264, 119.09 ));
    color_map.addPoint(0.521569, kvs::RGBColor( 190.836, 57.7261, 118.522 ));
    color_map.addPoint(0.52549, kvs::RGBColor( 192.458, 58.3369, 117.94 ));
    color_map.addPoint(0.529412, kvs::RGBColor( 194.075, 58.9596, 117.341 ));
    color_map.addPoint(0.533333, kvs::RGBColor( 195.686, 59.5948, 116.728 ));
    color_map.addPoint(0.537255, kvs::RGBColor( 197.292, 60.2435, 116.099 ));
    color_map.addPoint(0.541176, kvs::RGBColor( 198.892, 60.907, 115.455 ));
    color_map.addPoint(0.545098, kvs::RGBColor( 200.484, 61.5861, 114.797 ));
    color_map.addPoint(0.54902, kvs::RGBColor( 202.069, 62.2817, 114.123 ));
    color_map.addPoint(0.552941, kvs::RGBColor( 203.645, 62.9952, 113.436 ));
    color_map.addPoint(0.556863, kvs::RGBColor( 205.212, 63.7273, 112.736 ));
    color_map.addPoint(0.560784, kvs::RGBColor( 206.768, 64.4796, 112.023 ));
    color_map.addPoint(0.564706, kvs::RGBColor( 208.313, 65.2532, 111.298 ));
    color_map.addPoint(0.568627, kvs::RGBColor( 209.846, 66.0491, 110.561 ));
    color_map.addPoint(0.572549, kvs::RGBColor( 211.366, 66.8684, 109.814 ));
    color_map.addPoint(0.576471, kvs::RGBColor( 212.872, 67.7127, 109.056 ));
    color_map.addPoint(0.580392, kvs::RGBColor( 214.362, 68.583, 108.29 ));
    color_map.addPoint(0.584314, kvs::RGBColor( 215.836, 69.4806, 107.516 ));
    color_map.addPoint(0.588235, kvs::RGBColor( 217.292, 70.407, 106.736 ));
    color_map.addPoint(0.592157, kvs::RGBColor( 218.73, 71.3635, 105.951 ));
    color_map.addPoint(0.596078, kvs::RGBColor( 220.147, 72.3509, 105.163 ));
    color_map.addPoint(0.6, kvs::RGBColor( 221.542, 73.3706, 104.372 ));
    color_map.addPoint(0.603922, kvs::RGBColor( 222.915, 74.424, 103.582 ));
    color_map.addPoint(0.607843, kvs::RGBColor( 224.263, 75.5119, 102.795 ));
    color_map.addPoint(0.611765, kvs::RGBColor( 225.586, 76.6352, 102.012 ));
    color_map.addPoint(0.615686, kvs::RGBColor( 226.881, 77.7951, 101.236 ));
    color_map.addPoint(0.619608, kvs::RGBColor( 228.149, 78.9921, 100.469 ));
    color_map.addPoint(0.623529, kvs::RGBColor( 229.386, 80.2271, 99.7144 ));
    color_map.addPoint(0.627451, kvs::RGBColor( 230.592, 81.5006, 98.9749 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 231.765, 82.8125, 98.2535 ));
    color_map.addPoint(0.635294, kvs::RGBColor( 232.905, 84.1633, 97.5536 ));
    color_map.addPoint(0.639216, kvs::RGBColor( 234.011, 85.5525, 96.8783 ));
    color_map.addPoint(0.643137, kvs::RGBColor( 235.08, 86.98, 96.2309 ));
    color_map.addPoint(0.647059, kvs::RGBColor( 236.114, 88.4452, 95.6145 ));
    color_map.addPoint(0.65098, kvs::RGBColor( 237.11, 89.9472, 95.0326 ));
    color_map.addPoint(0.654902, kvs::RGBColor( 238.07, 91.4848, 94.488 ));
    color_map.addPoint(0.658824, kvs::RGBColor( 238.991, 93.0569, 93.9846 ));
    color_map.addPoint(0.662745, kvs::RGBColor( 239.875, 94.6621, 93.5243 ));
    color_map.addPoint(0.666667, kvs::RGBColor( 240.722, 96.299, 93.1097 ));
    color_map.addPoint(0.670588, kvs::RGBColor( 241.531, 97.9654, 92.7438 ));
    color_map.addPoint(0.67451, kvs::RGBColor( 242.304, 99.6591, 92.4293 ));
    color_map.addPoint(0.678431, kvs::RGBColor( 243.04, 101.379, 92.1667 ));
    color_map.addPoint(0.682353, kvs::RGBColor( 243.741, 103.122, 91.9578 ));
    color_map.addPoint(0.686275, kvs::RGBColor( 244.408, 104.888, 91.8036 ));
    color_map.addPoint(0.690196, kvs::RGBColor( 245.042, 106.672, 91.7057 ));
    color_map.addPoint(0.694118, kvs::RGBColor( 245.644, 108.474, 91.6646 ));
    color_map.addPoint(0.698039, kvs::RGBColor( 246.215, 110.292, 91.6799 ));
    color_map.addPoint(0.701961, kvs::RGBColor( 246.756, 112.124, 91.7516 ));
    color_map.addPoint(0.705882, kvs::RGBColor( 247.268, 113.969, 91.8793 ));
    color_map.addPoint(0.709804, kvs::RGBColor( 247.753, 115.824, 92.0627 ));
    color_map.addPoint(0.713725, kvs::RGBColor( 248.212, 117.688, 92.3011 ));
    color_map.addPoint(0.717647, kvs::RGBColor( 248.646, 119.56, 92.5933 ));
    color_map.addPoint(0.721569, kvs::RGBColor( 249.056, 121.438, 92.9388 ));
    color_map.addPoint(0.72549, kvs::RGBColor( 249.444, 123.321, 93.3364 ));
    color_map.addPoint(0.729412, kvs::RGBColor( 249.809, 125.209, 93.7847 ));
    color_map.addPoint(0.733333, kvs::RGBColor( 250.155, 127.099, 94.2822 ));
    color_map.addPoint(0.737255, kvs::RGBColor( 250.481, 128.992, 94.8279 ));
    color_map.addPoint(0.741176, kvs::RGBColor( 250.789, 130.886, 95.4205 ));
    color_map.addPoint(0.745098, kvs::RGBColor( 251.079, 132.782, 96.058 ));
    color_map.addPoint(0.74902, kvs::RGBColor( 251.352, 134.678, 96.7396 ));
    color_map.addPoint(0.752941, kvs::RGBColor( 251.608, 136.573, 97.4635 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 251.85, 138.469, 98.2285 ));
    color_map.addPoint(0.760784, kvs::RGBColor( 252.076, 140.364, 99.0331 ));
    color_map.addPoint(0.764706, kvs::RGBColor( 252.288, 142.258, 99.8761 ));
    color_map.addPoint(0.768627, kvs::RGBColor( 252.485, 144.15, 100.756 ));
    color_map.addPoint(0.772549, kvs::RGBColor( 252.672, 146.04, 101.672 ));
    color_map.addPoint(0.776471, kvs::RGBColor( 252.847, 147.927, 102.622 ));
    color_map.addPoint(0.780392, kvs::RGBColor( 253.01, 149.813, 103.606 ));
    color_map.addPoint(0.784314, kvs::RGBColor( 253.16, 151.697, 104.622 ));
    color_map.addPoint(0.788235, kvs::RGBColor( 253.298, 153.58, 105.669 ));
    color_map.addPoint(0.792157, kvs::RGBColor( 253.428, 155.459, 106.746 ));
    color_map.addPoint(0.796078, kvs::RGBColor( 253.549, 157.335, 107.852 ));
    color_map.addPoint(0.8, kvs::RGBColor( 253.658, 159.209, 108.986 ));
    color_map.addPoint(0.803922, kvs::RGBColor( 253.756, 161.082, 110.148 ));
    color_map.addPoint(0.807843, kvs::RGBColor( 253.847, 162.952, 111.335 ));
    color_map.addPoint(0.811765, kvs::RGBColor( 253.932, 164.818, 112.547 ));
    color_map.addPoint(0.815686, kvs::RGBColor( 254.004, 166.683, 113.784 ));
    color_map.addPoint(0.819608, kvs::RGBColor( 254.067, 168.547, 115.046 ));
    color_map.addPoint(0.823529, kvs::RGBColor( 254.128, 170.405, 116.329 ));
    color_map.addPoint(0.827451, kvs::RGBColor( 254.178, 172.263, 117.635 ));
    color_map.addPoint(0.831373, kvs::RGBColor( 254.216, 174.121, 118.964 ));
    color_map.addPoint(0.835294, kvs::RGBColor( 254.255, 175.972, 120.312 ));
    color_map.addPoint(0.839216, kvs::RGBColor( 254.282, 177.824, 121.681 ));
    color_map.addPoint(0.843137, kvs::RGBColor( 254.3, 179.676, 123.072 ));
    color_map.addPoint(0.847059, kvs::RGBColor( 254.318, 181.521, 124.479 ));
    color_map.addPoint(0.85098, kvs::RGBColor( 254.325, 183.368, 125.908 ));
    color_map.addPoint(0.854902, kvs::RGBColor( 254.325, 185.213, 127.354 ));
    color_map.addPoint(0.858824, kvs::RGBColor( 254.322, 187.054, 128.818 ));
    color_map.addPoint(0.862745, kvs::RGBColor( 254.308, 188.897, 130.301 ));
    color_map.addPoint(0.866667, kvs::RGBColor( 254.293, 190.735, 131.799 ));
    color_map.addPoint(0.870588, kvs::RGBColor( 254.27, 192.573, 133.316 ));
    color_map.addPoint(0.87451, kvs::RGBColor( 254.24, 194.411, 134.849 ));
    color_map.addPoint(0.878431, kvs::RGBColor( 254.209, 196.246, 136.397 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 254.165, 198.083, 137.965 ));
    color_map.addPoint(0.886275, kvs::RGBColor( 254.126, 199.914, 139.544 ));
    color_map.addPoint(0.890196, kvs::RGBColor( 254.074, 201.748, 141.142 ));
    color_map.addPoint(0.894118, kvs::RGBColor( 254.021, 203.579, 142.754 ));
    color_map.addPoint(0.898039, kvs::RGBColor( 253.963, 205.409, 144.382 ));
    color_map.addPoint(0.901961, kvs::RGBColor( 253.898, 207.24, 146.024 ));
    color_map.addPoint(0.905882, kvs::RGBColor( 253.833, 209.068, 147.681 ));
    color_map.addPoint(0.909804, kvs::RGBColor( 253.758, 210.898, 149.354 ));
    color_map.addPoint(0.913725, kvs::RGBColor( 253.687, 212.724, 151.038 ));
    color_map.addPoint(0.917647, kvs::RGBColor( 253.604, 214.554, 152.741 ));
    color_map.addPoint(0.921569, kvs::RGBColor( 253.527, 216.378, 154.452 ));
    color_map.addPoint(0.92549, kvs::RGBColor( 253.436, 218.206, 156.183 ));
    color_map.addPoint(0.929412, kvs::RGBColor( 253.354, 220.029, 157.921 ));
    color_map.addPoint(0.933333, kvs::RGBColor( 253.258, 221.856, 159.678 ));
    color_map.addPoint(0.937255, kvs::RGBColor( 253.172, 223.678, 161.443 ));
    color_map.addPoint(0.941176, kvs::RGBColor( 253.072, 225.504, 163.225 ));
    color_map.addPoint(0.945098, kvs::RGBColor( 252.983, 227.325, 165.015 ));
    color_map.addPoint(0.94902, kvs::RGBColor( 252.88, 229.15, 166.822 ));
    color_map.addPoint(0.952941, kvs::RGBColor( 252.79, 230.97, 168.634 ));
    color_map.addPoint(0.956863, kvs::RGBColor( 252.687, 232.793, 170.463 ));
    color_map.addPoint(0.960784, kvs::RGBColor( 252.595, 234.612, 172.297 ));
    color_map.addPoint(0.964706, kvs::RGBColor( 252.495, 236.435, 174.146 ));
    color_map.addPoint(0.968627, kvs::RGBColor( 252.403, 238.254, 176 ));
    color_map.addPoint(0.972549, kvs::RGBColor( 252.306, 240.075, 177.867 ));
    color_map.addPoint(0.976471, kvs::RGBColor( 252.215, 241.894, 179.74 ));
    color_map.addPoint(0.980392, kvs::RGBColor( 252.123, 243.714, 181.622 ));
    color_map.addPoint(0.984314, kvs::RGBColor( 252.034, 245.534, 183.51 ));
    color_map.addPoint(0.988235, kvs::RGBColor( 251.948, 247.353, 185.405 ));
    color_map.addPoint(0.992157, kvs::RGBColor( 251.861, 249.174, 187.307 ));
    color_map.addPoint(0.996078, kvs::RGBColor( 251.784, 250.993, 189.211 ));
    color_map.addPoint(1, kvs::RGBColor( 251.699, 252.817, 191.124 ));
    color_map.create();
    this->add("Magma (matplotlib)", color_map);

    //Muted Blue-Green
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 28, 70, 77.0001 ));
    color_map.addPoint(0.02, kvs::RGBColor( 33.0001, 79, 86.9999 ));
    color_map.addPoint(0.05, kvs::RGBColor( 38.0001, 86.9999, 97 ));
    color_map.addPoint(0.1, kvs::RGBColor( 47.9999, 103, 117 ));
    color_map.addPoint(0.15, kvs::RGBColor( 58, 114, 133 ));
    color_map.addPoint(0.2, kvs::RGBColor( 74, 126, 150 ));
    color_map.addPoint(0.25, kvs::RGBColor( 93.9999, 141, 171 ));
    color_map.addPoint(0.3, kvs::RGBColor( 117, 158, 191 ));
    color_map.addPoint(0.35, kvs::RGBColor( 150, 182, 217 ));
    color_map.addPoint(0.4, kvs::RGBColor( 185, 208, 240 ));
    color_map.addPoint(0.45, kvs::RGBColor( 212, 225, 250 ));
    color_map.addPoint(0.475, kvs::RGBColor( 232, 238, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 250, 251, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 254, 255, 242 ));
    color_map.addPoint(0.5, kvs::RGBColor( 255, 255, 250 ));
    color_map.addPoint(0.5, kvs::RGBColor( 250, 251, 255 ));
    color_map.addPoint(0.525, kvs::RGBColor( 248, 252, 227 ));
    color_map.addPoint(0.55, kvs::RGBColor( 234, 245, 213 ));
    color_map.addPoint(0.6, kvs::RGBColor( 213, 235, 197 ));
    color_map.addPoint(0.65, kvs::RGBColor( 196, 230, 188 ));
    color_map.addPoint(0.7, kvs::RGBColor( 171, 212, 167 ));
    color_map.addPoint(0.75, kvs::RGBColor( 147, 194, 149 ));
    color_map.addPoint(0.8, kvs::RGBColor( 127, 173, 133 ));
    color_map.addPoint(0.85, kvs::RGBColor( 100, 143, 109 ));
    color_map.addPoint(0.9, kvs::RGBColor( 75.0001, 115, 84.9999 ));
    color_map.addPoint(0.95, kvs::RGBColor( 54.0001, 89.0001, 65 ));
    color_map.addPoint(1, kvs::RGBColor( 39, 70.9999, 49.9999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Muted Blue-Green", color_map);

    //OrPu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 45.0001, 0, 75.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 69.4707, 24.4706, 113.275 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 95.2157, 58.3726, 145.177 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 122.824, 106.059, 167.765 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 153.49, 143.549, 191.373 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 183.216, 177.451, 213.431 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 207.059, 206.941, 229.118 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 228.157, 229.373, 239.706 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 247.137, 246.549, 245.725 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 251.529, 232.118, 204.941 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 253.726, 213.02, 159.216 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 253.098, 187.921, 107.137 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 237.647, 155.412, 57.1764 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 216.941, 123.412, 17.8038 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 188.706, 97.0589, 9.01961 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 157.588, 76.0588, 6.82355 ));
    color_map.addPoint(1, kvs::RGBColor( 127, 59.0001, 8.00011 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("OrPu", color_map);

    //Oranges
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 127, 39, 3.99993 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 146.577, 46.5293, 3.49809 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 166.2, 54.0707, 2.99217 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 191.8, 63.1059, 1.98823 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 217.188, 72.2588, 1.14112 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 229.235, 88.8236, 10.1765 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 241.141, 105.424, 19.4823 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 247.165, 123.494, 40.0628 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 253, 141.518, 60.7372 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 253, 158.082, 84.3295 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 253, 174.667, 108.078 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 253, 191.733, 135.686 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 253.023, 208.518, 163.035 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 253.526, 219.561, 185.122 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 254.027, 230.412, 206.796 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 254.53, 237.941, 221.353 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 245, 235 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Oranges", color_map);

    //PRGn
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 63.9999, 0, 75.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 97.8823, 26.353, 110.137 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 126.922, 59.8431, 141.196 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 148.882, 103.765, 166.294 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 173.902, 139.02, 189.353 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 199.078, 171.451, 210.431 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 222.294, 200.941, 226.118 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 237.274, 225.725, 237.882 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 246.412, 246.863, 246.294 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 227.588, 242.471, 223.706 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 203, 234.235, 197 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 171, 221.059, 165 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 125.765, 195.176, 126.647 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 80.1177, 165.529, 90.4118 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 40.5883, 131.647, 64.0588 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 15.8824, 98.5884, 43.4706 ));
    color_map.addPoint(1, kvs::RGBColor( 0, 68.0001, 26.9999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("PRGn", color_map);

    //PiYG
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 142, 1.00011, 82.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 176.51, 17.3137, 108.98 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 203.372, 50.451, 137.49 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 219.059, 108.176, 168.235 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 231.686, 151.118, 196.431 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 242.647, 187.765, 220.882 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 250.176, 214.118, 234.059 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 250.647, 233.02, 242.137 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 246.667, 246.961, 246.235 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 236, 245.706, 221.765 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 217.372, 239.51, 187.686 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 188.51, 226.961, 141.255 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 153.824, 205.412, 97.4707 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 119.157, 181.412, 59.9803 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 87.7843, 155.059, 39.9019 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 61.353, 127.059, 29.706 ));
    color_map.addPoint(1, kvs::RGBColor( 39, 100, 24.9999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("PiYG", color_map);

    //Plasma (matplotlib)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 12.8477, 7.59976, 134.634 ));
    color_map.addPoint(0.003922, kvs::RGBColor( 16.2017, 7.24863, 135.947 ));
    color_map.addPoint(0.007843, kvs::RGBColor( 19.215, 6.93753, 137.192 ));
    color_map.addPoint(0.011765, kvs::RGBColor( 21.9866, 6.66187, 138.378 ));
    color_map.addPoint(0.015686, kvs::RGBColor( 24.5766, 6.41707, 139.511 ));
    color_map.addPoint(0.019608, kvs::RGBColor( 27.0249, 6.1988, 140.599 ));
    color_map.addPoint(0.023529, kvs::RGBColor( 29.3566, 6.00678, 141.644 ));
    color_map.addPoint(0.027451, kvs::RGBColor( 31.5953, 5.83389, 142.653 ));
    color_map.addPoint(0.031373, kvs::RGBColor( 33.7572, 5.67579, 143.629 ));
    color_map.addPoint(0.035294, kvs::RGBColor( 35.8538, 5.53019, 144.575 ));
    color_map.addPoint(0.039216, kvs::RGBColor( 37.8948, 5.39427, 145.493 ));
    color_map.addPoint(0.043137, kvs::RGBColor( 39.8874, 5.266, 146.387 ));
    color_map.addPoint(0.047059, kvs::RGBColor( 41.8378, 5.1436, 147.257 ));
    color_map.addPoint(0.05098, kvs::RGBColor( 43.7514, 5.02503, 148.106 ));
    color_map.addPoint(0.054902, kvs::RGBColor( 45.6322, 4.90926, 148.934 ));
    color_map.addPoint(0.058824, kvs::RGBColor( 47.4843, 4.79476, 149.743 ));
    color_map.addPoint(0.062745, kvs::RGBColor( 49.3104, 4.68027, 150.534 ));
    color_map.addPoint(0.066667, kvs::RGBColor( 51.1135, 4.56501, 151.308 ));
    color_map.addPoint(0.070588, kvs::RGBColor( 52.8959, 4.44771, 152.065 ));
    color_map.addPoint(0.07451, kvs::RGBColor( 54.6593, 4.32811, 152.806 ));
    color_map.addPoint(0.078431, kvs::RGBColor( 56.4052, 4.20674, 153.531 ));
    color_map.addPoint(0.082353, kvs::RGBColor( 58.1357, 4.08178, 154.241 ));
    color_map.addPoint(0.086275, kvs::RGBColor( 59.8523, 3.95301, 154.936 ));
    color_map.addPoint(0.090196, kvs::RGBColor( 61.556, 3.81964, 155.616 ));
    color_map.addPoint(0.094118, kvs::RGBColor( 63.2482, 3.68195, 156.281 ));
    color_map.addPoint(0.098039, kvs::RGBColor( 64.9299, 3.53991, 156.932 ));
    color_map.addPoint(0.101961, kvs::RGBColor( 66.6017, 3.39354, 157.567 ));
    color_map.addPoint(0.105882, kvs::RGBColor( 68.2643, 3.24258, 158.188 ));
    color_map.addPoint(0.109804, kvs::RGBColor( 69.9187, 3.08779, 158.794 ));
    color_map.addPoint(0.113725, kvs::RGBColor( 71.5652, 2.92944, 159.385 ));
    color_map.addPoint(0.117647, kvs::RGBColor( 73.2044, 2.76803, 159.96 ));
    color_map.addPoint(0.121569, kvs::RGBColor( 74.8369, 2.60432, 160.52 ));
    color_map.addPoint(0.12549, kvs::RGBColor( 76.463, 2.43805, 161.064 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 78.0836, 2.27001, 161.592 ));
    color_map.addPoint(0.133333, kvs::RGBColor( 79.6985, 2.10094, 162.103 ));
    color_map.addPoint(0.137255, kvs::RGBColor( 81.3083, 1.93188, 162.598 ));
    color_map.addPoint(0.141176, kvs::RGBColor( 82.9133, 1.76333, 163.076 ));
    color_map.addPoint(0.145098, kvs::RGBColor( 84.5136, 1.59655, 163.536 ));
    color_map.addPoint(0.14902, kvs::RGBColor( 86.1092, 1.43259, 163.977 ));
    color_map.addPoint(0.152941, kvs::RGBColor( 87.7009, 1.2727, 164.401 ));
    color_map.addPoint(0.156863, kvs::RGBColor( 89.2883, 1.11741, 164.806 ));
    color_map.addPoint(0.160784, kvs::RGBColor( 90.8715, 0.96849, 165.192 ));
    color_map.addPoint(0.164706, kvs::RGBColor( 92.451, 0.826965, 165.557 ));
    color_map.addPoint(0.168627, kvs::RGBColor( 94.0269, 0.69462, 165.903 ));
    color_map.addPoint(0.172549, kvs::RGBColor( 95.5987, 0.572475, 166.228 ));
    color_map.addPoint(0.176471, kvs::RGBColor( 97.167, 0.46257, 166.532 ));
    color_map.addPoint(0.180392, kvs::RGBColor( 98.7317, 0.36567, 166.815 ));
    color_map.addPoint(0.184314, kvs::RGBColor( 100.293, 0.28407, 167.076 ));
    color_map.addPoint(0.188235, kvs::RGBColor( 101.85, 0.219045, 167.314 ));
    color_map.addPoint(0.192157, kvs::RGBColor( 103.403, 0.17289, 167.529 ));
    color_map.addPoint(0.196078, kvs::RGBColor( 104.953, 0.147135, 167.721 ));
    color_map.addPoint(0.2, kvs::RGBColor( 106.499, 0.14382, 167.889 ));
    color_map.addPoint(0.203922, kvs::RGBColor( 108.041, 0.16473, 168.034 ));
    color_map.addPoint(0.207843, kvs::RGBColor( 109.578, 0.211905, 168.153 ));
    color_map.addPoint(0.211765, kvs::RGBColor( 111.112, 0.287385, 168.248 ));
    color_map.addPoint(0.215686, kvs::RGBColor( 112.642, 0.3927, 168.318 ));
    color_map.addPoint(0.219608, kvs::RGBColor( 114.167, 0.5304, 168.361 ));
    color_map.addPoint(0.223529, kvs::RGBColor( 115.688, 0.702525, 168.379 ));
    color_map.addPoint(0.227451, kvs::RGBColor( 117.204, 0.91137, 168.371 ));
    color_map.addPoint(0.231373, kvs::RGBColor( 118.715, 1.15898, 168.335 ));
    color_map.addPoint(0.235294, kvs::RGBColor( 120.222, 1.44789, 168.274 ));
    color_map.addPoint(0.239216, kvs::RGBColor( 121.723, 1.7799, 168.185 ));
    color_map.addPoint(0.243137, kvs::RGBColor( 123.219, 2.1573, 168.069 ));
    color_map.addPoint(0.247059, kvs::RGBColor( 124.709, 2.58238, 167.926 ));
    color_map.addPoint(0.25098, kvs::RGBColor( 126.194, 3.05745, 167.756 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 127.673, 3.58403, 167.557 ));
    color_map.addPoint(0.258824, kvs::RGBColor( 129.146, 4.16491, 167.332 ));
    color_map.addPoint(0.262745, kvs::RGBColor( 130.613, 4.80241, 167.078 ));
    color_map.addPoint(0.266667, kvs::RGBColor( 132.073, 5.49856, 166.798 ));
    color_map.addPoint(0.270588, kvs::RGBColor( 133.526, 6.25566, 166.49 ));
    color_map.addPoint(0.27451, kvs::RGBColor( 134.973, 7.07549, 166.154 ));
    color_map.addPoint(0.278431, kvs::RGBColor( 136.413, 7.96034, 165.792 ));
    color_map.addPoint(0.282353, kvs::RGBColor( 137.845, 8.91225, 165.403 ));
    color_map.addPoint(0.286275, kvs::RGBColor( 139.27, 9.93327, 164.988 ));
    color_map.addPoint(0.290196, kvs::RGBColor( 140.687, 10.9997, 164.546 ));
    color_map.addPoint(0.294118, kvs::RGBColor( 142.097, 12.0694, 164.078 ));
    color_map.addPoint(0.298039, kvs::RGBColor( 143.498, 13.144, 163.585 ));
    color_map.addPoint(0.301961, kvs::RGBColor( 144.891, 14.2234, 163.067 ));
    color_map.addPoint(0.305882, kvs::RGBColor( 146.276, 15.3071, 162.524 ));
    color_map.addPoint(0.309804, kvs::RGBColor( 147.652, 16.3955, 161.957 ));
    color_map.addPoint(0.313725, kvs::RGBColor( 149.02, 17.4876, 161.367 ));
    color_map.addPoint(0.317647, kvs::RGBColor( 150.378, 18.5839, 160.754 ));
    color_map.addPoint(0.321569, kvs::RGBColor( 151.728, 19.6834, 160.119 ));
    color_map.addPoint(0.32549, kvs::RGBColor( 153.068, 20.7866, 159.462 ));
    color_map.addPoint(0.329412, kvs::RGBColor( 154.399, 21.8928, 158.785 ));
    color_map.addPoint(0.333333, kvs::RGBColor( 155.72, 23.002, 158.088 ));
    color_map.addPoint(0.337255, kvs::RGBColor( 157.032, 24.1138, 157.371 ));
    color_map.addPoint(0.341176, kvs::RGBColor( 158.334, 25.2282, 156.636 ));
    color_map.addPoint(0.345098, kvs::RGBColor( 159.627, 26.3446, 155.883 ));
    color_map.addPoint(0.34902, kvs::RGBColor( 160.909, 27.4632, 155.113 ));
    color_map.addPoint(0.352941, kvs::RGBColor( 162.182, 28.5835, 154.327 ));
    color_map.addPoint(0.356863, kvs::RGBColor( 163.445, 29.7055, 153.527 ));
    color_map.addPoint(0.360784, kvs::RGBColor( 164.697, 30.829, 152.711 ));
    color_map.addPoint(0.364706, kvs::RGBColor( 165.94, 31.9538, 151.882 ));
    color_map.addPoint(0.368627, kvs::RGBColor( 167.173, 33.0799, 151.041 ));
    color_map.addPoint(0.372549, kvs::RGBColor( 168.395, 34.2067, 150.188 ));
    color_map.addPoint(0.376471, kvs::RGBColor( 169.608, 35.3343, 149.323 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 170.81, 36.463, 148.449 ));
    color_map.addPoint(0.384314, kvs::RGBColor( 172.003, 37.5918, 147.565 ));
    color_map.addPoint(0.388235, kvs::RGBColor( 173.186, 38.7212, 146.673 ));
    color_map.addPoint(0.392157, kvs::RGBColor( 174.358, 39.8509, 145.773 ));
    color_map.addPoint(0.396078, kvs::RGBColor( 175.521, 40.9808, 144.866 ));
    color_map.addPoint(0.4, kvs::RGBColor( 176.674, 42.111, 143.953 ));
    color_map.addPoint(0.403922, kvs::RGBColor( 177.818, 43.2411, 143.034 ));
    color_map.addPoint(0.407843, kvs::RGBColor( 178.951, 44.3713, 142.11 ));
    color_map.addPoint(0.411765, kvs::RGBColor( 180.075, 45.5014, 141.183 ));
    color_map.addPoint(0.415686, kvs::RGBColor( 181.19, 46.6313, 140.251 ));
    color_map.addPoint(0.419608, kvs::RGBColor( 182.295, 47.7612, 139.316 ));
    color_map.addPoint(0.423529, kvs::RGBColor( 183.391, 48.8909, 138.379 ));
    color_map.addPoint(0.427451, kvs::RGBColor( 184.478, 50.0203, 137.44 ));
    color_map.addPoint(0.431373, kvs::RGBColor( 185.556, 51.1494, 136.5 ));
    color_map.addPoint(0.435294, kvs::RGBColor( 186.625, 52.2783, 135.558 ));
    color_map.addPoint(0.439216, kvs::RGBColor( 187.685, 53.4069, 134.617 ));
    color_map.addPoint(0.443137, kvs::RGBColor( 188.736, 54.5353, 133.675 ));
    color_map.addPoint(0.447059, kvs::RGBColor( 189.779, 55.6634, 132.734 ));
    color_map.addPoint(0.45098, kvs::RGBColor( 190.814, 56.7913, 131.793 ));
    color_map.addPoint(0.454902, kvs::RGBColor( 191.84, 57.9189, 130.853 ));
    color_map.addPoint(0.458824, kvs::RGBColor( 192.858, 59.0465, 129.914 ));
    color_map.addPoint(0.462745, kvs::RGBColor( 193.867, 60.1739, 128.977 ));
    color_map.addPoint(0.466667, kvs::RGBColor( 194.869, 61.301, 128.042 ));
    color_map.addPoint(0.470588, kvs::RGBColor( 195.863, 62.4283, 127.109 ));
    color_map.addPoint(0.47451, kvs::RGBColor( 196.849, 63.5554, 126.177 ));
    color_map.addPoint(0.478431, kvs::RGBColor( 197.828, 64.6828, 125.249 ));
    color_map.addPoint(0.482353, kvs::RGBColor( 198.799, 65.8099, 124.322 ));
    color_map.addPoint(0.486275, kvs::RGBColor( 199.763, 66.9375, 123.399 ));
    color_map.addPoint(0.490196, kvs::RGBColor( 200.719, 68.0651, 122.478 ));
    color_map.addPoint(0.494118, kvs::RGBColor( 201.668, 69.193, 121.56 ));
    color_map.addPoint(0.498039, kvs::RGBColor( 202.61, 70.3214, 120.645 ));
    color_map.addPoint(0.501961, kvs::RGBColor( 203.545, 71.4502, 119.732 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 204.473, 72.5796, 118.823 ));
    color_map.addPoint(0.509804, kvs::RGBColor( 205.394, 73.7095, 117.916 ));
    color_map.addPoint(0.513725, kvs::RGBColor( 206.308, 74.8402, 117.012 ));
    color_map.addPoint(0.517647, kvs::RGBColor( 207.216, 75.9716, 116.111 ));
    color_map.addPoint(0.521569, kvs::RGBColor( 208.117, 77.1038, 115.213 ));
    color_map.addPoint(0.52549, kvs::RGBColor( 209.011, 78.2371, 114.318 ));
    color_map.addPoint(0.529412, kvs::RGBColor( 209.899, 79.3716, 113.426 ));
    color_map.addPoint(0.533333, kvs::RGBColor( 210.78, 80.5071, 112.536 ));
    color_map.addPoint(0.537255, kvs::RGBColor( 211.655, 81.6439, 111.648 ));
    color_map.addPoint(0.541176, kvs::RGBColor( 212.523, 82.7819, 110.763 ));
    color_map.addPoint(0.545098, kvs::RGBColor( 213.384, 83.9218, 109.881 ));
    color_map.addPoint(0.54902, kvs::RGBColor( 214.24, 85.0629, 109.001 ));
    color_map.addPoint(0.552941, kvs::RGBColor( 215.088, 86.2058, 108.123 ));
    color_map.addPoint(0.556863, kvs::RGBColor( 215.931, 87.3505, 107.248 ));
    color_map.addPoint(0.560784, kvs::RGBColor( 216.767, 88.4972, 106.374 ));
    color_map.addPoint(0.564706, kvs::RGBColor( 217.596, 89.646, 105.502 ));
    color_map.addPoint(0.568627, kvs::RGBColor( 218.419, 90.7968, 104.632 ));
    color_map.addPoint(0.572549, kvs::RGBColor( 219.236, 91.9499, 103.764 ));
    color_map.addPoint(0.576471, kvs::RGBColor( 220.046, 93.1053, 102.897 ));
    color_map.addPoint(0.580392, kvs::RGBColor( 220.85, 94.2633, 102.032 ));
    color_map.addPoint(0.584314, kvs::RGBColor( 221.647, 95.4241, 101.168 ));
    color_map.addPoint(0.588235, kvs::RGBColor( 222.437, 96.5874, 100.306 ));
    color_map.addPoint(0.592157, kvs::RGBColor( 223.221, 97.7535, 99.4439 ));
    color_map.addPoint(0.596078, kvs::RGBColor( 223.998, 98.9227, 98.583 ));
    color_map.addPoint(0.6, kvs::RGBColor( 224.768, 100.095, 97.7234 ));
    color_map.addPoint(0.603922, kvs::RGBColor( 225.531, 101.27, 96.8643 ));
    color_map.addPoint(0.607843, kvs::RGBColor( 226.288, 102.449, 96.006 ));
    color_map.addPoint(0.611765, kvs::RGBColor( 227.037, 103.631, 95.1482 ));
    color_map.addPoint(0.615686, kvs::RGBColor( 227.779, 104.817, 94.2908 ));
    color_map.addPoint(0.619608, kvs::RGBColor( 228.513, 106.007, 93.4338 ));
    color_map.addPoint(0.623529, kvs::RGBColor( 229.241, 107.2, 92.577 ));
    color_map.addPoint(0.627451, kvs::RGBColor( 229.961, 108.397, 91.7204 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 230.673, 109.598, 90.8639 ));
    color_map.addPoint(0.635294, kvs::RGBColor( 231.378, 110.804, 90.0074 ));
    color_map.addPoint(0.639216, kvs::RGBColor( 232.075, 112.013, 89.1505 ));
    color_map.addPoint(0.643137, kvs::RGBColor( 232.764, 113.227, 88.294 ));
    color_map.addPoint(0.647059, kvs::RGBColor( 233.445, 114.446, 87.4369 ));
    color_map.addPoint(0.65098, kvs::RGBColor( 234.118, 115.669, 86.5799 ));
    color_map.addPoint(0.654902, kvs::RGBColor( 234.782, 116.896, 85.7223 ));
    color_map.addPoint(0.658824, kvs::RGBColor( 235.438, 118.129, 84.8643 ));
    color_map.addPoint(0.662745, kvs::RGBColor( 236.085, 119.366, 84.0059 ));
    color_map.addPoint(0.666667, kvs::RGBColor( 236.724, 120.609, 83.1471 ));
    color_map.addPoint(0.670588, kvs::RGBColor( 237.353, 121.856, 82.2877 ));
    color_map.addPoint(0.67451, kvs::RGBColor( 237.974, 123.109, 81.4279 ));
    color_map.addPoint(0.678431, kvs::RGBColor( 238.586, 124.367, 80.5678 ));
    color_map.addPoint(0.682353, kvs::RGBColor( 239.187, 125.63, 79.7066 ));
    color_map.addPoint(0.686275, kvs::RGBColor( 239.78, 126.899, 78.8452 ));
    color_map.addPoint(0.690196, kvs::RGBColor( 240.362, 128.173, 77.9831 ));
    color_map.addPoint(0.694118, kvs::RGBColor( 240.935, 129.453, 77.1204 ));
    color_map.addPoint(0.698039, kvs::RGBColor( 241.498, 130.738, 76.2575 ));
    color_map.addPoint(0.701961, kvs::RGBColor( 242.05, 132.03, 75.3938 ));
    color_map.addPoint(0.705882, kvs::RGBColor( 242.593, 133.327, 74.5301 ));
    color_map.addPoint(0.709804, kvs::RGBColor( 243.124, 134.63, 73.6652 ));
    color_map.addPoint(0.713725, kvs::RGBColor( 243.645, 135.939, 72.8 ));
    color_map.addPoint(0.717647, kvs::RGBColor( 244.155, 137.254, 71.9345 ));
    color_map.addPoint(0.721569, kvs::RGBColor( 244.653, 138.575, 71.0688 ));
    color_map.addPoint(0.72549, kvs::RGBColor( 245.141, 139.902, 70.2028 ));
    color_map.addPoint(0.729412, kvs::RGBColor( 245.617, 141.236, 69.3368 ));
    color_map.addPoint(0.733333, kvs::RGBColor( 246.081, 142.575, 68.4708 ));
    color_map.addPoint(0.737255, kvs::RGBColor( 246.533, 143.921, 67.6051 ));
    color_map.addPoint(0.741176, kvs::RGBColor( 246.974, 145.273, 66.7389 ));
    color_map.addPoint(0.745098, kvs::RGBColor( 247.402, 146.632, 65.8729 ));
    color_map.addPoint(0.74902, kvs::RGBColor( 247.818, 147.997, 65.0074 ));
    color_map.addPoint(0.752941, kvs::RGBColor( 248.221, 149.369, 64.1427 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 248.611, 150.747, 63.2785 ));
    color_map.addPoint(0.760784, kvs::RGBColor( 248.989, 152.132, 62.4156 ));
    color_map.addPoint(0.764706, kvs::RGBColor( 249.353, 153.523, 61.5537 ));
    color_map.addPoint(0.768627, kvs::RGBColor( 249.704, 154.921, 60.6933 ));
    color_map.addPoint(0.772549, kvs::RGBColor( 250.042, 156.325, 59.8347 ));
    color_map.addPoint(0.776471, kvs::RGBColor( 250.366, 157.736, 58.9782 ));
    color_map.addPoint(0.780392, kvs::RGBColor( 250.675, 159.153, 58.1239 ));
    color_map.addPoint(0.784314, kvs::RGBColor( 250.971, 160.578, 57.2717 ));
    color_map.addPoint(0.788235, kvs::RGBColor( 251.252, 162.009, 56.4226 ));
    color_map.addPoint(0.792157, kvs::RGBColor( 251.518, 163.447, 55.5767 ));
    color_map.addPoint(0.796078, kvs::RGBColor( 251.77, 164.891, 54.7352 ));
    color_map.addPoint(0.8, kvs::RGBColor( 252.006, 166.343, 53.8978 ));
    color_map.addPoint(0.803922, kvs::RGBColor( 252.228, 167.801, 53.0655 ));
    color_map.addPoint(0.807843, kvs::RGBColor( 252.433, 169.266, 52.239 ));
    color_map.addPoint(0.811765, kvs::RGBColor( 252.624, 170.737, 51.4187 ));
    color_map.addPoint(0.815686, kvs::RGBColor( 252.798, 172.216, 50.6055 ));
    color_map.addPoint(0.819608, kvs::RGBColor( 252.956, 173.701, 49.8002 ));
    color_map.addPoint(0.823529, kvs::RGBColor( 253.098, 175.193, 49.0034 ));
    color_map.addPoint(0.827451, kvs::RGBColor( 253.223, 176.691, 48.2164 ));
    color_map.addPoint(0.831373, kvs::RGBColor( 253.331, 178.197, 47.4405 ));
    color_map.addPoint(0.835294, kvs::RGBColor( 253.423, 179.709, 46.676 ));
    color_map.addPoint(0.839216, kvs::RGBColor( 253.496, 181.228, 45.9247 ));
    color_map.addPoint(0.843137, kvs::RGBColor( 253.553, 182.754, 45.188 ));
    color_map.addPoint(0.847059, kvs::RGBColor( 253.591, 184.286, 44.4672 ));
    color_map.addPoint(0.85098, kvs::RGBColor( 253.611, 185.826, 43.7636 ));
    color_map.addPoint(0.854902, kvs::RGBColor( 253.613, 187.372, 43.0792 ));
    color_map.addPoint(0.858824, kvs::RGBColor( 253.596, 188.924, 42.4154 ));
    color_map.addPoint(0.862745, kvs::RGBColor( 253.561, 190.484, 41.7744 ));
    color_map.addPoint(0.866667, kvs::RGBColor( 253.506, 192.05, 41.158 ));
    color_map.addPoint(0.870588, kvs::RGBColor( 253.432, 193.623, 40.5685 ));
    color_map.addPoint(0.87451, kvs::RGBColor( 253.338, 195.202, 40.0072 ));
    color_map.addPoint(0.878431, kvs::RGBColor( 253.223, 196.789, 39.476 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 253.089, 198.382, 38.978 ));
    color_map.addPoint(0.886275, kvs::RGBColor( 252.934, 199.981, 38.5157 ));
    color_map.addPoint(0.890196, kvs::RGBColor( 252.758, 201.587, 38.0911 ));
    color_map.addPoint(0.894118, kvs::RGBColor( 252.562, 203.199, 37.7069 ));
    color_map.addPoint(0.898039, kvs::RGBColor( 252.345, 204.817, 37.3649 ));
    color_map.addPoint(0.901961, kvs::RGBColor( 252.105, 206.443, 37.066 ));
    color_map.addPoint(0.905882, kvs::RGBColor( 251.843, 208.074, 36.8126 ));
    color_map.addPoint(0.909804, kvs::RGBColor( 251.56, 209.712, 36.607 ));
    color_map.addPoint(0.913725, kvs::RGBColor( 251.255, 211.356, 36.451 ));
    color_map.addPoint(0.917647, kvs::RGBColor( 250.928, 213.005, 36.3446 ));
    color_map.addPoint(0.921569, kvs::RGBColor( 250.577, 214.662, 36.2873 ));
    color_map.addPoint(0.92549, kvs::RGBColor( 250.203, 216.324, 36.2811 ));
    color_map.addPoint(0.929412, kvs::RGBColor( 249.809, 217.991, 36.3255 ));
    color_map.addPoint(0.933333, kvs::RGBColor( 249.389, 219.665, 36.416 ));
    color_map.addPoint(0.937255, kvs::RGBColor( 248.948, 221.344, 36.5545 ));
    color_map.addPoint(0.941176, kvs::RGBColor( 248.483, 223.029, 36.7356 ));
    color_map.addPoint(0.945098, kvs::RGBColor( 247.995, 224.719, 36.9554 ));
    color_map.addPoint(0.94902, kvs::RGBColor( 247.486, 226.413, 37.2093 ));
    color_map.addPoint(0.952941, kvs::RGBColor( 246.953, 228.114, 37.4886 ));
    color_map.addPoint(0.956863, kvs::RGBColor( 246.399, 229.818, 37.7859 ));
    color_map.addPoint(0.960784, kvs::RGBColor( 245.825, 231.527, 38.0894 ));
    color_map.addPoint(0.964706, kvs::RGBColor( 245.229, 233.241, 38.3826 ));
    color_map.addPoint(0.968627, kvs::RGBColor( 244.615, 234.959, 38.6493 ));
    color_map.addPoint(0.972549, kvs::RGBColor( 243.986, 236.679, 38.8643 ));
    color_map.addPoint(0.976471, kvs::RGBColor( 243.343, 238.402, 38.9949 ));
    color_map.addPoint(0.980392, kvs::RGBColor( 242.69, 240.126, 38.9959 ));
    color_map.addPoint(0.984314, kvs::RGBColor( 242.034, 241.851, 38.8054 ));
    color_map.addPoint(0.988235, kvs::RGBColor( 241.384, 243.573, 38.3336 ));
    color_map.addPoint(0.992157, kvs::RGBColor( 240.759, 245.289, 37.4496 ));
    color_map.addPoint(0.996078, kvs::RGBColor( 240.183, 246.99, 35.9438 ));
    color_map.addPoint(1, kvs::RGBColor( 239.704, 248.665, 33.4881 ));
    color_map.create();
    this->add("Plasma (matplotlib)", color_map);

    //PuBu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 77.0001, 0, 75.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 103.102, 7.52939, 99.5961 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 129.027, 15.196, 124.129 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 132.541, 40.2941, 140.694 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 136.031, 65.3295, 157.157 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 138.039, 86.4119, 167.196 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 140, 107.506, 177.247 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 140, 129.09, 187.788 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 140.282, 150.596, 198.314 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 149.318, 169.671, 208.353 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 158.647, 188.451, 218.235 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 175.212, 199.996, 224.259 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 191.777, 211.588, 230.33 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 208.341, 224.137, 237.357 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 224.631, 236.439, 244.247 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 236.176, 244.471, 248.765 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 252, 253 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("PuBu", color_map);

    //PuOr
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 127, 59.0001, 8.00011 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 159.627, 77.1962, 6.745 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 190.47, 98.7059, 9.56862 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 218.706, 125.059, 18.3529 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 238.784, 157.529, 60.2746 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 253.137, 189.49, 110.392 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 253.765, 214.588, 162.471 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 251.255, 233.02, 207.49 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 246.392, 246.431, 246.765 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 226.941, 228.235, 239.235 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 205.569, 205.098, 228.137 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 181.725, 175.608, 212.451 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 151.529, 141.353, 189.882 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 121.098, 103.078, 166.353 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 93.4901, 55.3921, 143.765 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 67.9412, 22.9411, 110.882 ));
    color_map.addPoint(1, kvs::RGBColor( 45.0001, 0, 75.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("PuOr", color_map);

    //PuRd
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 73.0001, 0, 106 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 97.5962, 0.50184, 112.525 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 122.204, 1.00011, 119.027 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 148.306, 1.00011, 122.541 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 174.369, 1.39995, 126.196 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 197.961, 26.9999, 138.745 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 221.306, 52.6119, 151.118 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 234.357, 78.7137, 156.137 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 247.047, 104.863, 161.314 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 248.553, 132.471, 171.353 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 250.039, 159.745, 181.216 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 251.043, 178.82, 186.737 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 252.024, 197.635, 192.682 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 252.525, 211.188, 207.239 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 253.055, 224.631, 221.604 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 254.059, 236.176, 232.647 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 247, 243 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("PuRd", color_map);

    //Purples
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 63, 0, 125 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 73.5412, 19.5764, 134.035 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 84.0862, 39.1647, 143.078 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 95.1295, 60.2471, 153.118 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 106.173, 81.345, 163.18 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 117.216, 103.431, 174.725 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 128.353, 125.341, 186.165 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 143.412, 139.898, 193.192 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 158.471, 154.549, 200.314 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 173.53, 172.118, 210.353 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 188.588, 189.569, 220.294 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 203.647, 204.125, 227.824 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 218.494, 218.447, 235.235 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 229.035, 227.984, 240.255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 239.357, 237.384, 245.22 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 245.882, 244.412, 249.235 ));
    color_map.addPoint(1, kvs::RGBColor( 252, 251, 253 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Purples", color_map);

    //RED-PURPLE
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 47.9999, 0, 1.99996 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 88, 0, 8.99997 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 112, 0, 24.9999 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 136, 0, 39 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 160, 3.99993, 54.0001 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 184, 8.00011, 68.0001 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 204, 12, 84.0001 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 220, 12, 103 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 240, 16, 119 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 252, 19.9999, 140 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 252, 35.9999, 164 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 252, 63.9999, 186 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 252, 96.0001, 207 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 252, 140, 226 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 252, 192, 243 ));
    color_map.addPoint(1, kvs::RGBColor( 254, 254, 254 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("RED-PURPLE", color_map);

    //RED_TEMPERATURE
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 23, 0, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 46, 0, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 68.9999, 0, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 91.9999, 0, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 115, 0, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 139, 0, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 162, 0, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 185, 15.0001, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 208, 45.0001, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 231, 75.0001, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 255, 105, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 255, 136, 7 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 166, 70 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 196, 133 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 226, 196 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("RED_TEMPERATURE", color_map);

    //Rainbow Blended Black
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(0.17, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.34, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.67, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.84, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 224, 0, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Rainbow Blended Black", color_map);

    //Rainbow Blended Grey
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 81, 87, 110 ));
    color_map.addPoint(0.17, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.34, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.67, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.84, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 224, 0, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Rainbow Blended Grey", color_map);

    //Rainbow Blended White
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 255, 255, 255 ));
    color_map.addPoint(0.17, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.34, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.67, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.84, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 224, 0, 255 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Rainbow Blended White", color_map);

    //Rainbow Desaturated
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 71, 71, 219 ));
    color_map.addPoint(0.143, kvs::RGBColor( 0, 0, 92 ));
    color_map.addPoint(0.285, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.429, kvs::RGBColor( 0, 128, 0 ));
    color_map.addPoint(0.571, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.714, kvs::RGBColor( 255, 97, 0 ));
    color_map.addPoint(0.857, kvs::RGBColor( 107, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 224, 77, 77 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Rainbow Desaturated", color_map);

    //Rainbow Uniform
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 5.1, 97.2315, 254.516 ));
    color_map.addPoint(0.0238095, kvs::RGBColor( 5.10002, 108.188, 247.113 ));
    color_map.addPoint(0.047619, kvs::RGBColor( 5.1, 119.145, 239.708 ));
    color_map.addPoint(0.0714286, kvs::RGBColor( 5.1, 130.101, 232.305 ));
    color_map.addPoint(0.0952381, kvs::RGBColor( 5.10002, 139.332, 222.531 ));
    color_map.addPoint(0.119048, kvs::RGBColor( 5.1, 148.563, 212.755 ));
    color_map.addPoint(0.142857, kvs::RGBColor( 5.1, 157.794, 202.98 ));
    color_map.addPoint(0.166667, kvs::RGBColor( 5.10002, 166.396, 191.2 ));
    color_map.addPoint(0.190476, kvs::RGBColor( 5.1, 174.998, 179.418 ));
    color_map.addPoint(0.214286, kvs::RGBColor( 5.1, 183.6, 167.637 ));
    color_map.addPoint(0.238095, kvs::RGBColor( 5.10002, 193.044, 153.953 ));
    color_map.addPoint(0.261905, kvs::RGBColor( 5.1, 202.487, 140.267 ));
    color_map.addPoint(0.285714, kvs::RGBColor( 5.1, 211.93, 126.582 ));
    color_map.addPoint(0.309524, kvs::RGBColor( 5.44536, 220.457, 109.282 ));
    color_map.addPoint(0.333333, kvs::RGBColor( 5.94479, 228.99, 91.9884 ));
    color_map.addPoint(0.357143, kvs::RGBColor( 4.07391, 237.417, 74.6036 ));
    color_map.addPoint(0.380952, kvs::RGBColor( 69.9237, 242.904, 39.1599 ));
    color_map.addPoint(0.404762, kvs::RGBColor( 125.805, 245.285, 28.3547 ));
    color_map.addPoint(0.428571, kvs::RGBColor( 164.195, 249.211, 11.9595 ));
    color_map.addPoint(0.452381, kvs::RGBColor( 194.412, 251.091, 8.82304 ));
    color_map.addPoint(0.47619, kvs::RGBColor( 224.63, 252.969, 5.68647 ));
    color_map.addPoint(0.5, kvs::RGBColor( 254.88, 254.877, 3.43956 ));
    color_map.addPoint(0.52381, kvs::RGBColor( 254.848, 243.534, 20.162 ));
    color_map.addPoint(0.547619, kvs::RGBColor( 254.847, 232.22, 37.7742 ));
    color_map.addPoint(0.571429, kvs::RGBColor( 254.847, 220.906, 55.386 ));
    color_map.addPoint(0.595238, kvs::RGBColor( 254.814, 208.599, 55.3862 ));
    color_map.addPoint(0.619048, kvs::RGBColor( 254.779, 196.29, 55.386 ));
    color_map.addPoint(0.642857, kvs::RGBColor( 254.745, 183.983, 55.386 ));
    color_map.addPoint(0.666667, kvs::RGBColor( 254.78, 171.726, 55.3862 ));
    color_map.addPoint(0.690476, kvs::RGBColor( 254.813, 159.468, 55.386 ));
    color_map.addPoint(0.714286, kvs::RGBColor( 254.847, 147.212, 55.386 ));
    color_map.addPoint(0.738095, kvs::RGBColor( 254.848, 132.872, 55.3862 ));
    color_map.addPoint(0.761905, kvs::RGBColor( 254.847, 118.532, 55.386 ));
    color_map.addPoint(0.785714, kvs::RGBColor( 254.847, 104.193, 55.386 ));
    color_map.addPoint(0.809524, kvs::RGBColor( 253.664, 84.6021, 53.8639 ));
    color_map.addPoint(0.833333, kvs::RGBColor( 251.612, 66.1772, 48.4812 ));
    color_map.addPoint(0.857143, kvs::RGBColor( 252.768, 37.7385, 53.7512 ));
    color_map.addPoint(0.880952, kvs::RGBColor( 242.225, 29.8011, 64.4897 ));
    color_map.addPoint(0.904762, kvs::RGBColor( 230.316, 20.0004, 74.4091 ));
    color_map.addPoint(0.928571, kvs::RGBColor( 218.407, 10.2, 84.3285 ));
    color_map.addPoint(0.952381, kvs::RGBColor( 203.72, 11.05, 91.4007 ));
    color_map.addPoint(0.97619, kvs::RGBColor( 189.031, 11.9, 98.4726 ));
    color_map.addPoint(1, kvs::RGBColor( 174.344, 12.75, 105.544 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Rainbow Uniform", color_map);

    //RdOr
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 127, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 153.102, 0, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 179.141, 0.18819, 0.121635 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 197.212, 24.2824, 15.6822 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 215.188, 48.4156, 31.3216 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 227.235, 75.0197, 51.9019 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 239.153, 101.471, 72.1999 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 245.678, 121.549, 80.7333 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 252.016, 141.722, 89.6746 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 252.518, 164.812, 111.259 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 253, 187.49, 132.51 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 253, 200.039, 145.561 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 253.023, 212.471, 158.988 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 253.526, 222.51, 180.071 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 254.027, 232.412, 200.988 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 254.53, 239.941, 219.059 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 247, 236 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("RdOr", color_map);

    //RdOrYl
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 128, 0, 38.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 158.62, 0, 38.0001 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 189.149, 0.102, 37.9608 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 208.224, 13.1529, 32.9412 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 227.196, 26.4078, 28.1099 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 239.745, 52.5099, 35.1372 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 252.012, 78.7412, 42.2117 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 252.514, 110.365, 51.2471 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 253.016, 141.58, 60.2509 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 253.518, 160.153, 68.2824 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 254, 178.765, 76.8236 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 254, 198.341, 97.906 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 254.024, 217.471, 118.988 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 254.525, 227.51, 140.07 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 237.494, 161.208 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 246.529, 183.294 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 204 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("RdOrYl", color_map);

    //RdPu
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 103, 0, 31.0001 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 127.596, 0, 49.0707 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 152.212, 0.070635, 67.0744 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 179.318, 9.10579, 76.6117 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 206.196, 18.1805, 86.4078 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 218.745, 29.7256, 112.51 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 230.906, 41.7058, 138.447 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 226.89, 71.8236, 157.522 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 222.655, 101.737, 176.361 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 211.612, 125.329, 187.906 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 201.216, 148.725, 199.373 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 206.737, 167.298, 208.91 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 212.447, 185.941, 218.494 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 221.984, 206.02, 229.035 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 231.439, 225.521, 239.274 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 239.471, 235.059, 244.294 ));
    color_map.addPoint(1, kvs::RGBColor( 247, 244, 249 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("RdPu", color_map);

    //Reds
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 103, 0, 12.9999 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 134.122, 7.52939, 17.0156 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 165.149, 15.0353, 21.0314 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 184.223, 19.5529, 25.0471 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 203.282, 24.2745, 29.1177 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 221.353, 41.8432, 36.6471 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 239.141, 59.553, 44.3529 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 245.165, 83.145, 59.4117 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 251.016, 106.627, 74.6275 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 251.518, 126.706, 94.706 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 252, 146.804, 114.922 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 252, 167.384, 138.514 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 252.047, 187.87, 162.153 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 253.051, 206.443, 186.749 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 254.027, 224.576, 210.824 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 254.53, 235.118, 225.882 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 245, 240 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Reds", color_map);

    //Spectral_lowBlue
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 93.9999, 79, 162 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 66.3921, 114.765, 178.941 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 63.2548, 150.784, 182.882 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 95.8823, 187.176, 167.824 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 137.176, 207.765, 164.49 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 179.098, 224.294, 162.353 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 216.118, 239.353, 154.824 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 239.804, 248.922, 167.294 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 254.98, 254.392, 189.98 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 254.353, 234.941, 157.353 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 253.726, 210.275, 127.471 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 253.098, 178.902, 101.118 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 248.235, 139.588, 81.1175 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 239.137, 101.627, 68.8824 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 219.686, 72.1372, 76.4118 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 190.353, 36.8824, 73.6471 ));
    color_map.addPoint(1, kvs::RGBColor( 158, 1.00011, 66.0001 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Spectral_lowBlue", color_map);

    //Spectrum Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 0, 0, 0));
    color_map.addPoint( 0.143,kvs::RGBColor( 0, 0, 0));
    color_map.addPoint( 0.143,kvs::RGBColor( 228, 26, 28));
    color_map.addPoint( 0.286,kvs::RGBColor( 228, 26, 28));
    color_map.addPoint( 0.286,kvs::RGBColor( 55, 126, 184));
    color_map.addPoint( 0.429,kvs::RGBColor( 55, 126, 184));
    color_map.addPoint( 0.429,kvs::RGBColor( 77, 175, 74));
    color_map.addPoint( 0.571,kvs::RGBColor( 77, 175, 74));
    color_map.addPoint( 0.571,kvs::RGBColor( 152, 78, 163));
    color_map.addPoint( 0.714,kvs::RGBColor( 152, 78, 163));
    color_map.addPoint( 0.714,kvs::RGBColor( 255, 127, 0));
    color_map.addPoint( 0.857,kvs::RGBColor( 255, 127, 0));
    color_map.addPoint( 0.857,kvs::RGBColor( 166, 86, 40));
    color_map.addPoint( 1,kvs::RGBColor( 166, 86, 40));
    color_map.addPoint( 1,kvs::RGBColor( 0, 0, 0));
    color_map.create();
    this->add("Spectrum Step", color_map);

    //Traffic Lights For Deuteranopes 2 Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 107, 0, 18));
    color_map.addPoint( 0.333,kvs::RGBColor( 107, 0, 18));
    color_map.addPoint( 0.333,kvs::RGBColor( 230, 240, 5));
    color_map.addPoint( 0.666,kvs::RGBColor( 230, 240, 5));
    color_map.addPoint( 0.666,kvs::RGBColor( 4, 158, 2));
    color_map.addPoint( 1,kvs::RGBColor( 4, 158, 2));
    color_map.addPoint( 1,kvs::RGBColor( 0, 18, 0));
    color_map.create();
    this->add("Traffic Lights For Deuteranopes 2 Step", color_map);

    //Traffic Lights For Deuteranopes Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 231.708, 154.023, 148.374));
    color_map.addPoint( 0.333,kvs::RGBColor( 231.708, 154.023, 148.374));
    color_map.addPoint( 0.333,kvs::RGBColor( 255, 220, 0));
    color_map.addPoint( 0.666,kvs::RGBColor( 255, 220, 0));
    color_map.addPoint( 0.666,kvs::RGBColor( 0, 177.276, 0));
    color_map.addPoint( 1,kvs::RGBColor( 0, 177.276, 0));
    color_map.addPoint( 1,kvs::RGBColor( 154.023, 148.374, 0));
    color_map.create();
    this->add("Traffic Lights For Deuteranopes Step", color_map);

    //Traffic Lights Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 255, 0, 0));
    color_map.addPoint( 0.333,kvs::RGBColor( 255, 0, 0));
    color_map.addPoint( 0.333,kvs::RGBColor( 255, 220, 0));
    color_map.addPoint( 0.666,kvs::RGBColor( 255, 220, 0));
    color_map.addPoint( 0.666,kvs::RGBColor( 0, 177.276, 0));
    color_map.addPoint( 1,kvs::RGBColor( 0, 177.276, 0));
    color_map.addPoint( 1,kvs::RGBColor( 0, 0, 0));
    color_map.create();
    this->add("Traffic Lights Step", color_map);

    //Turbo
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 48.4372, 18.2988, 59.2034 ));
    color_map.addPoint(0.0039216, kvs::RGBColor( 49.6816, 21.2645, 66.68 ));
    color_map.addPoint(0.0078431, kvs::RGBColor( 50.8878, 24.2199, 74.0112 ));
    color_map.addPoint(0.011765, kvs::RGBColor( 52.0583, 27.1626, 81.2022 ));
    color_map.addPoint(0.015686, kvs::RGBColor( 53.193, 30.0951, 88.2478 ));
    color_map.addPoint(0.019608, kvs::RGBColor( 54.292, 33.0149, 95.1507 ));
    color_map.addPoint(0.023529, kvs::RGBColor( 55.3554, 35.9218, 101.908 ));
    color_map.addPoint(0.027451, kvs::RGBColor( 56.383, 38.8186, 108.523 ));
    color_map.addPoint(0.031373, kvs::RGBColor( 57.375, 41.7027, 114.995 ));
    color_map.addPoint(0.035294, kvs::RGBColor( 58.3313, 44.5765, 121.324 ));
    color_map.addPoint(0.039216, kvs::RGBColor( 59.2518, 47.4376, 127.51 ));
    color_map.addPoint(0.043137, kvs::RGBColor( 60.1341, 50.286, 133.551 ));
    color_map.addPoint(0.047059, kvs::RGBColor( 60.9832, 53.1242, 139.449 ));
    color_map.addPoint(0.05098, kvs::RGBColor( 61.7967, 55.9495, 145.202 ));
    color_map.addPoint(0.054902, kvs::RGBColor( 62.5744, 58.7622, 150.812 ));
    color_map.addPoint(0.058824, kvs::RGBColor( 63.3165, 61.5647, 156.279 ));
    color_map.addPoint(0.062745, kvs::RGBColor( 64.0229, 64.3543, 161.604 ));
    color_map.addPoint(0.066667, kvs::RGBColor( 64.691, 67.1338, 166.785 ));
    color_map.addPoint(0.070588, kvs::RGBColor( 65.3259, 69.9006, 171.822 ));
    color_map.addPoint(0.07451, kvs::RGBColor( 65.9252, 72.6546, 176.715 ));
    color_map.addPoint(0.078431, kvs::RGBColor( 66.4887, 75.3984, 181.463 ));
    color_map.addPoint(0.082353, kvs::RGBColor( 67.014, 78.1295, 186.068 ));
    color_map.addPoint(0.086275, kvs::RGBColor( 67.5062, 80.8503, 190.531 ));
    color_map.addPoint(0.090196, kvs::RGBColor( 67.9626, 83.5584, 194.851 ));
    color_map.addPoint(0.094118, kvs::RGBColor( 68.3808, 86.2537, 199.028 ));
    color_map.addPoint(0.098039, kvs::RGBColor( 68.7659, 88.9389, 203.059 ));
    color_map.addPoint(0.10196, kvs::RGBColor( 69.1127, 91.6113, 206.948 ));
    color_map.addPoint(0.10588, kvs::RGBColor( 69.4263, 94.2735, 210.691 ));
    color_map.addPoint(0.1098, kvs::RGBColor( 69.7017, 96.9204, 214.294 ));
    color_map.addPoint(0.11373, kvs::RGBColor( 69.944, 99.5597, 217.752 ));
    color_map.addPoint(0.11765, kvs::RGBColor( 70.1479, 102.184, 221.065 ));
    color_map.addPoint(0.12157, kvs::RGBColor( 70.3188, 104.797, 224.237 ));
    color_map.addPoint(0.12549, kvs::RGBColor( 70.4514, 107.401, 227.264 ));
    color_map.addPoint(0.12941, kvs::RGBColor( 70.5509, 109.992, 230.148 ));
    color_map.addPoint(0.13333, kvs::RGBColor( 70.612, 112.57, 232.886 ));
    color_map.addPoint(0.13725, kvs::RGBColor( 70.6375, 115.138, 235.485 ));
    color_map.addPoint(0.14118, kvs::RGBColor( 70.6299, 117.69, 237.938 ));
    color_map.addPoint(0.1451, kvs::RGBColor( 70.584, 120.235, 240.246 ));
    color_map.addPoint(0.14902, kvs::RGBColor( 70.5024, 122.767, 242.413 ));
    color_map.addPoint(0.15294, kvs::RGBColor( 70.3876, 125.287, 244.435 ));
    color_map.addPoint(0.15686, kvs::RGBColor( 70.2347, 127.793, 246.315 ));
    color_map.addPoint(0.16078, kvs::RGBColor( 70.0459, 130.29, 248.051 ));
    color_map.addPoint(0.16471, kvs::RGBColor( 69.8216, 132.776, 249.642 ));
    color_map.addPoint(0.16863, kvs::RGBColor( 69.5461, 135.252, 251.076 ));
    color_map.addPoint(0.17255, kvs::RGBColor( 69.1203, 137.738, 252.272 ));
    color_map.addPoint(0.17647, kvs::RGBColor( 68.5389, 140.237, 253.223 ));
    color_map.addPoint(0.18039, kvs::RGBColor( 67.8096, 142.746, 253.937 ));
    color_map.addPoint(0.18431, kvs::RGBColor( 66.9426, 145.266, 254.421 ));
    color_map.addPoint(0.18824, kvs::RGBColor( 65.9481, 147.793, 254.684 ));
    color_map.addPoint(0.19216, kvs::RGBColor( 64.8337, 150.323, 254.735 ));
    color_map.addPoint(0.19608, kvs::RGBColor( 63.6123, 152.855, 254.579 ));
    color_map.addPoint(0.2, kvs::RGBColor( 62.2888, 155.389, 254.227 ));
    color_map.addPoint(0.20392, kvs::RGBColor( 60.8787, 157.924, 253.687 ));
    color_map.addPoint(0.20784, kvs::RGBColor( 59.3844, 160.454, 252.965 ));
    color_map.addPoint(0.21176, kvs::RGBColor( 57.8238, 162.978, 252.07 ));
    color_map.addPoint(0.21569, kvs::RGBColor( 56.1994, 165.498, 251.012 ));
    color_map.addPoint(0.21961, kvs::RGBColor( 54.5241, 168.009, 249.795 ));
    color_map.addPoint(0.22353, kvs::RGBColor( 52.8054, 170.508, 248.429 ));
    color_map.addPoint(0.22745, kvs::RGBColor( 51.0536, 172.997, 246.924 ));
    color_map.addPoint(0.23137, kvs::RGBColor( 49.2813, 175.471, 245.284 ));
    color_map.addPoint(0.23529, kvs::RGBColor( 47.4937, 177.926, 243.52 ));
    color_map.addPoint(0.23922, kvs::RGBColor( 45.7037, 180.367, 241.641 ));
    color_map.addPoint(0.24314, kvs::RGBColor( 43.9186, 182.784, 239.652 ));
    color_map.addPoint(0.24706, kvs::RGBColor( 42.1489, 185.181, 237.561 ));
    color_map.addPoint(0.25098, kvs::RGBColor( 40.4022, 187.555, 235.378 ));
    color_map.addPoint(0.2549, kvs::RGBColor( 38.6912, 189.904, 233.111 ));
    color_map.addPoint(0.25882, kvs::RGBColor( 37.0235, 192.222, 230.765 ));
    color_map.addPoint(0.26275, kvs::RGBColor( 35.4093, 194.511, 228.352 ));
    color_map.addPoint(0.26667, kvs::RGBColor( 33.8589, 196.771, 225.879 ));
    color_map.addPoint(0.27059, kvs::RGBColor( 32.3799, 198.994, 223.355 ));
    color_map.addPoint(0.27451, kvs::RGBColor( 30.9851, 201.185, 220.782 ));
    color_map.addPoint(0.27843, kvs::RGBColor( 29.6794, 203.337, 218.175 ));
    color_map.addPoint(0.28235, kvs::RGBColor( 28.4759, 205.451, 215.539 ));
    color_map.addPoint(0.28627, kvs::RGBColor( 27.3819, 207.522, 212.884 ));
    color_map.addPoint(0.2902, kvs::RGBColor( 26.4103, 209.551, 210.214 ));
    color_map.addPoint(0.29412, kvs::RGBColor( 25.5663, 211.535, 207.542 ));
    color_map.addPoint(0.29804, kvs::RGBColor( 24.8625, 213.471, 204.872 ));
    color_map.addPoint(0.30196, kvs::RGBColor( 24.3066, 215.36, 202.212 ));
    color_map.addPoint(0.30588, kvs::RGBColor( 23.9114, 217.196, 199.573 ));
    color_map.addPoint(0.3098, kvs::RGBColor( 23.6818, 218.981, 196.962 ));
    color_map.addPoint(0.31373, kvs::RGBColor( 23.6309, 220.713, 194.386 ));
    color_map.addPoint(0.31765, kvs::RGBColor( 23.766, 222.388, 191.854 ));
    color_map.addPoint(0.32157, kvs::RGBColor( 24.1, 224.002, 189.376 ));
    color_map.addPoint(0.32549, kvs::RGBColor( 24.6381, 225.558, 186.956 ));
    color_map.addPoint(0.32941, kvs::RGBColor( 25.3929, 227.052, 184.602 ));
    color_map.addPoint(0.33333, kvs::RGBColor( 26.3721, 228.48, 182.325 ));
    color_map.addPoint(0.33725, kvs::RGBColor( 27.5783, 229.862, 180.027 ));
    color_map.addPoint(0.34118, kvs::RGBColor( 29.0037, 231.216, 177.61 ));
    color_map.addPoint(0.3451, kvs::RGBColor( 30.6357, 232.542, 175.083 ));
    color_map.addPoint(0.34902, kvs::RGBColor( 32.4691, 233.838, 172.449 ));
    color_map.addPoint(0.35294, kvs::RGBColor( 34.4913, 235.102, 169.718 ));
    color_map.addPoint(0.35686, kvs::RGBColor( 36.6971, 236.334, 166.892 ));
    color_map.addPoint(0.36078, kvs::RGBColor( 39.0737, 237.535, 163.985 ));
    color_map.addPoint(0.36471, kvs::RGBColor( 41.6135, 238.703, 160.999 ));
    color_map.addPoint(0.36863, kvs::RGBColor( 44.3114, 239.835, 157.942 ));
    color_map.addPoint(0.37255, kvs::RGBColor( 47.152, 240.934, 154.818 ));
    color_map.addPoint(0.37647, kvs::RGBColor( 50.1304, 241.998, 151.638 ));
    color_map.addPoint(0.38039, kvs::RGBColor( 53.2364, 243.025, 148.407 ));
    color_map.addPoint(0.38431, kvs::RGBColor( 56.4621, 244.015, 145.131 ));
    color_map.addPoint(0.38824, kvs::RGBColor( 59.795, 244.966, 141.816 ));
    color_map.addPoint(0.39216, kvs::RGBColor( 63.2323, 245.879, 138.473 ));
    color_map.addPoint(0.39608, kvs::RGBColor( 66.759, 246.751, 135.102 ));
    color_map.addPoint(0.4, kvs::RGBColor( 70.3723, 247.585, 131.715 ));
    color_map.addPoint(0.40392, kvs::RGBColor( 74.0571, 248.378, 128.319 ));
    color_map.addPoint(0.40784, kvs::RGBColor( 77.8081, 249.127, 124.917 ));
    color_map.addPoint(0.41176, kvs::RGBColor( 81.6153, 249.834, 121.518 ));
    color_map.addPoint(0.41569, kvs::RGBColor( 85.4684, 250.497, 118.129 ));
    color_map.addPoint(0.41961, kvs::RGBColor( 89.3597, 251.116, 114.755 ));
    color_map.addPoint(0.42353, kvs::RGBColor( 93.2816, 251.69, 111.404 ));
    color_map.addPoint(0.42745, kvs::RGBColor( 97.2238, 252.218, 108.084 ));
    color_map.addPoint(0.43137, kvs::RGBColor( 101.179, 252.7, 104.8 ));
    color_map.addPoint(0.43529, kvs::RGBColor( 105.134, 253.133, 101.556 ));
    color_map.addPoint(0.43922, kvs::RGBColor( 109.084, 253.518, 98.3662 ));
    color_map.addPoint(0.44314, kvs::RGBColor( 113.019, 253.855, 95.2297 ));
    color_map.addPoint(0.44706, kvs::RGBColor( 116.928, 254.141, 92.157 ));
    color_map.addPoint(0.45098, kvs::RGBColor( 120.806, 254.375, 89.1556 ));
    color_map.addPoint(0.4549, kvs::RGBColor( 124.641, 254.561, 86.2308 ));
    color_map.addPoint(0.45882, kvs::RGBColor( 128.423, 254.691, 83.3876 ));
    color_map.addPoint(0.46275, kvs::RGBColor( 132.146, 254.77, 80.6361 ));
    color_map.addPoint(0.46667, kvs::RGBColor( 135.8, 254.793, 77.9816 ));
    color_map.addPoint(0.47059, kvs::RGBColor( 139.378, 254.763, 75.4316 ));
    color_map.addPoint(0.47451, kvs::RGBColor( 142.866, 254.676, 72.9886 ));
    color_map.addPoint(0.47843, kvs::RGBColor( 146.26, 254.533, 70.6656 ));
    color_map.addPoint(0.48235, kvs::RGBColor( 149.547, 254.334, 68.465 ));
    color_map.addPoint(0.48627, kvs::RGBColor( 152.722, 254.077, 66.3969 ));
    color_map.addPoint(0.4902, kvs::RGBColor( 155.774, 253.761, 64.464 ));
    color_map.addPoint(0.49412, kvs::RGBColor( 158.694, 253.383, 62.6765 ));
    color_map.addPoint(0.49804, kvs::RGBColor( 161.474, 252.947, 61.0393 ));
    color_map.addPoint(0.50196, kvs::RGBColor( 164.123, 252.447, 59.5578 ));
    color_map.addPoint(0.50588, kvs::RGBColor( 166.755, 251.876, 58.2293 ));
    color_map.addPoint(0.5098, kvs::RGBColor( 169.391, 251.236, 57.0435 ));
    color_map.addPoint(0.51373, kvs::RGBColor( 172.028, 250.527, 55.998 ));
    color_map.addPoint(0.51765, kvs::RGBColor( 174.66, 249.75, 55.0851 ));
    color_map.addPoint(0.52157, kvs::RGBColor( 177.289, 248.905, 54.2997 ));
    color_map.addPoint(0.52549, kvs::RGBColor( 179.91, 248, 53.6316 ));
    color_map.addPoint(0.52941, kvs::RGBColor( 182.521, 247.031, 53.0782 ));
    color_map.addPoint(0.53333, kvs::RGBColor( 185.12, 245.999, 52.632 ));
    color_map.addPoint(0.53725, kvs::RGBColor( 187.706, 244.91, 52.2852 ));
    color_map.addPoint(0.54118, kvs::RGBColor( 190.273, 243.762, 52.0353 ));
    color_map.addPoint(0.5451, kvs::RGBColor( 192.823, 242.559, 51.8747 ));
    color_map.addPoint(0.54902, kvs::RGBColor( 195.35, 241.299, 51.7931 ));
    color_map.addPoint(0.55294, kvs::RGBColor( 197.857, 239.988, 51.7905 ));
    color_map.addPoint(0.55686, kvs::RGBColor( 200.336, 238.626, 51.8568 ));
    color_map.addPoint(0.56078, kvs::RGBColor( 202.786, 237.214, 51.9843 ));
    color_map.addPoint(0.56471, kvs::RGBColor( 205.206, 235.753, 52.1704 ));
    color_map.addPoint(0.56863, kvs::RGBColor( 207.596, 234.246, 52.4076 ));
    color_map.addPoint(0.57255, kvs::RGBColor( 209.949, 232.695, 52.6907 ));
    color_map.addPoint(0.57647, kvs::RGBColor( 212.265, 231.099, 53.0094 ));
    color_map.addPoint(0.58039, kvs::RGBColor( 214.539, 229.464, 53.3613 ));
    color_map.addPoint(0.58431, kvs::RGBColor( 216.775, 227.786, 53.7387 ));
    color_map.addPoint(0.58824, kvs::RGBColor( 218.963, 226.07, 54.1365 ));
    color_map.addPoint(0.59216, kvs::RGBColor( 221.108, 224.318, 54.547 ));
    color_map.addPoint(0.59608, kvs::RGBColor( 223.201, 222.531, 54.9652 ));
    color_map.addPoint(0.6, kvs::RGBColor( 225.244, 220.71, 55.3834 ));
    color_map.addPoint(0.60392, kvs::RGBColor( 227.236, 218.856, 55.794 ));
    color_map.addPoint(0.60784, kvs::RGBColor( 229.169, 216.972, 56.1969 ));
    color_map.addPoint(0.61176, kvs::RGBColor( 231.043, 215.059, 56.5794 ));
    color_map.addPoint(0.61569, kvs::RGBColor( 232.858, 213.119, 56.9364 ));
    color_map.addPoint(0.61961, kvs::RGBColor( 234.61, 211.155, 57.2628 ));
    color_map.addPoint(0.62353, kvs::RGBColor( 236.298, 209.164, 57.5535 ));
    color_map.addPoint(0.62745, kvs::RGBColor( 237.918, 207.152, 57.8009 ));
    color_map.addPoint(0.63137, kvs::RGBColor( 239.468, 205.119, 57.9972 ));
    color_map.addPoint(0.63529, kvs::RGBColor( 240.947, 203.067, 58.14 ));
    color_map.addPoint(0.63922, kvs::RGBColor( 242.349, 200.999, 58.2191 ));
    color_map.addPoint(0.64314, kvs::RGBColor( 243.678, 198.913, 58.2318 ));
    color_map.addPoint(0.64706, kvs::RGBColor( 244.925, 196.812, 58.1681 ));
    color_map.addPoint(0.65098, kvs::RGBColor( 246.093, 194.698, 58.0227 ));
    color_map.addPoint(0.6549, kvs::RGBColor( 247.174, 192.573, 57.7906 ));
    color_map.addPoint(0.65882, kvs::RGBColor( 248.174, 190.439, 57.4668 ));
    color_map.addPoint(0.66275, kvs::RGBColor( 249.081, 188.297, 57.041 ));
    color_map.addPoint(0.66667, kvs::RGBColor( 249.9, 186.15, 56.5106 ));
    color_map.addPoint(0.67059, kvs::RGBColor( 250.637, 183.957, 55.8909 ));
    color_map.addPoint(0.67451, kvs::RGBColor( 251.3, 181.688, 55.2075 ));
    color_map.addPoint(0.67843, kvs::RGBColor( 251.892, 179.341, 54.4629 ));
    color_map.addPoint(0.68235, kvs::RGBColor( 252.414, 176.924, 53.6596 ));
    color_map.addPoint(0.68627, kvs::RGBColor( 252.866, 174.44, 52.8003 ));
    color_map.addPoint(0.6902, kvs::RGBColor( 253.251, 171.89, 51.8874 ));
    color_map.addPoint(0.69412, kvs::RGBColor( 253.567, 169.284, 50.926 ));
    color_map.addPoint(0.69804, kvs::RGBColor( 253.814, 166.62, 49.9213 ));
    color_map.addPoint(0.70196, kvs::RGBColor( 253.998, 163.906, 48.8707 ));
    color_map.addPoint(0.70588, kvs::RGBColor( 254.118, 161.142, 47.7819 ));
    color_map.addPoint(0.7098, kvs::RGBColor( 254.171, 158.337, 46.6574 ));
    color_map.addPoint(0.71373, kvs::RGBColor( 254.164, 155.491, 45.4971 ));
    color_map.addPoint(0.71765, kvs::RGBColor( 254.092, 152.607, 44.3088 ));
    color_map.addPoint(0.72157, kvs::RGBColor( 253.962, 149.693, 43.0924 ));
    color_map.addPoint(0.72549, kvs::RGBColor( 253.768, 146.75, 41.8506 ));
    color_map.addPoint(0.72941, kvs::RGBColor( 253.518, 143.784, 40.5909 ));
    color_map.addPoint(0.73333, kvs::RGBColor( 253.207, 140.796, 39.3133 ));
    color_map.addPoint(0.73725, kvs::RGBColor( 252.84, 137.792, 38.0205 ));
    color_map.addPoint(0.74118, kvs::RGBColor( 252.417, 134.778, 36.7149 ));
    color_map.addPoint(0.7451, kvs::RGBColor( 251.937, 131.751, 35.4017 ));
    color_map.addPoint(0.74902, kvs::RGBColor( 251.405, 128.721, 34.0859 ));
    color_map.addPoint(0.75294, kvs::RGBColor( 250.818, 125.692, 32.7649 ));
    color_map.addPoint(0.75686, kvs::RGBColor( 250.175, 122.665, 31.4466 ));
    color_map.addPoint(0.76078, kvs::RGBColor( 249.484, 119.646, 30.1334 ));
    color_map.addPoint(0.76471, kvs::RGBColor( 248.74, 116.637, 28.8277 ));
    color_map.addPoint(0.76863, kvs::RGBColor( 247.947, 113.641, 27.5323 ));
    color_map.addPoint(0.77255, kvs::RGBColor( 247.105, 110.667, 26.2497 ));
    color_map.addPoint(0.77647, kvs::RGBColor( 246.215, 107.715, 24.9849 ));
    color_map.addPoint(0.78039, kvs::RGBColor( 245.277, 104.787, 23.7405 ));
    color_map.addPoint(0.78431, kvs::RGBColor( 244.293, 101.893, 22.5191 ));
    color_map.addPoint(0.78824, kvs::RGBColor( 243.265, 99.0318, 21.3231 ));
    color_map.addPoint(0.79216, kvs::RGBColor( 242.191, 96.209, 20.1578 ));
    color_map.addPoint(0.79608, kvs::RGBColor( 241.072, 93.4269, 19.0255 ));
    color_map.addPoint(0.8, kvs::RGBColor( 239.914, 90.6933, 17.9291 ));
    color_map.addPoint(0.80392, kvs::RGBColor( 238.711, 88.0082, 16.8708 ));
    color_map.addPoint(0.80784, kvs::RGBColor( 237.469, 85.3791, 15.8559 ));
    color_map.addPoint(0.81176, kvs::RGBColor( 236.189, 82.8062, 14.8843 ));
    color_map.addPoint(0.81569, kvs::RGBColor( 234.868, 80.2969, 13.9612 ));
    color_map.addPoint(0.81961, kvs::RGBColor( 233.509, 77.8515, 13.0917 ));
    color_map.addPoint(0.82353, kvs::RGBColor( 232.111, 75.4774, 12.2757 ));
    color_map.addPoint(0.82745, kvs::RGBColor( 230.681, 73.1748, 11.5158 ));
    color_map.addPoint(0.83137, kvs::RGBColor( 229.214, 70.9512, 10.8197 ));
    color_map.addPoint(0.83529, kvs::RGBColor( 227.71, 68.8015, 10.1822 ));
    color_map.addPoint(0.83922, kvs::RGBColor( 226.162, 66.6876, 9.57015 ));
    color_map.addPoint(0.84314, kvs::RGBColor( 224.568, 64.6017, 8.97855 ));
    color_map.addPoint(0.84706, kvs::RGBColor( 222.926, 62.5413, 8.40735 ));
    color_map.addPoint(0.85098, kvs::RGBColor( 221.238, 60.5115, 7.8591 ));
    color_map.addPoint(0.8549, kvs::RGBColor( 219.501, 58.5097, 7.33125 ));
    color_map.addPoint(0.85882, kvs::RGBColor( 217.719, 56.5335, 6.82635 ));
    color_map.addPoint(0.86275, kvs::RGBColor( 215.888, 54.5879, 6.34185 ));
    color_map.addPoint(0.86667, kvs::RGBColor( 214.011, 52.6677, 5.87775 ));
    color_map.addPoint(0.87059, kvs::RGBColor( 212.089, 50.7756, 5.43405 ));
    color_map.addPoint(0.87451, kvs::RGBColor( 210.117, 48.9141, 5.0133 ));
    color_map.addPoint(0.87843, kvs::RGBColor( 208.1, 47.0781, 4.61295 ));
    color_map.addPoint(0.88235, kvs::RGBColor( 206.037, 45.2702, 4.233 ));
    color_map.addPoint(0.88627, kvs::RGBColor( 203.926, 43.4903, 3.876 ));
    color_map.addPoint(0.8902, kvs::RGBColor( 201.769, 41.7384, 3.53685 ));
    color_map.addPoint(0.89412, kvs::RGBColor( 199.563, 40.0171, 3.2232 ));
    color_map.addPoint(0.89804, kvs::RGBColor( 197.311, 38.3214, 2.9274 ));
    color_map.addPoint(0.90196, kvs::RGBColor( 195.014, 36.6537, 2.65455 ));
    color_map.addPoint(0.90588, kvs::RGBColor( 192.668, 35.014, 2.4021 ));
    color_map.addPoint(0.9098, kvs::RGBColor( 190.273, 33.3999, 2.17005 ));
    color_map.addPoint(0.91373, kvs::RGBColor( 187.836, 31.8163, 1.96095 ));
    color_map.addPoint(0.91765, kvs::RGBColor( 185.349, 30.2608, 1.77225 ));
    color_map.addPoint(0.92157, kvs::RGBColor( 182.815, 28.7334, 1.60395 ));
    color_map.addPoint(0.92549, kvs::RGBColor( 180.234, 27.234, 1.45605 ));
    color_map.addPoint(0.92941, kvs::RGBColor( 177.608, 25.7601, 1.3311 ));
    color_map.addPoint(0.93333, kvs::RGBColor( 174.935, 24.3168, 1.22655 ));
    color_map.addPoint(0.93725, kvs::RGBColor( 172.214, 22.899, 1.14495 ));
    color_map.addPoint(0.94118, kvs::RGBColor( 169.445, 21.5118, 1.0812 ));
    color_map.addPoint(0.9451, kvs::RGBColor( 166.63, 20.1501, 1.0404 ));
    color_map.addPoint(0.94902, kvs::RGBColor( 163.769, 18.819, 1.02255 ));
    color_map.addPoint(0.95294, kvs::RGBColor( 160.859, 17.5134, 1.02255 ));
    color_map.addPoint(0.95686, kvs::RGBColor( 157.904, 16.2359, 1.0455 ));
    color_map.addPoint(0.96078, kvs::RGBColor( 154.902, 14.9889, 1.08885 ));
    color_map.addPoint(0.96471, kvs::RGBColor( 151.853, 13.7675, 1.15515 ));
    color_map.addPoint(0.96863, kvs::RGBColor( 148.757, 12.574, 1.2393 ));
    color_map.addPoint(0.97255, kvs::RGBColor( 145.613, 11.4087, 1.34895 ));
    color_map.addPoint(0.97647, kvs::RGBColor( 142.423, 10.2714, 1.47645 ));
    color_map.addPoint(0.98039, kvs::RGBColor( 139.187, 9.16215, 1.6269 ));
    color_map.addPoint(0.98431, kvs::RGBColor( 135.902, 8.08095, 1.79775 ));
    color_map.addPoint(0.98824, kvs::RGBColor( 132.572, 7.0278, 1.989 ));
    color_map.addPoint(0.99216, kvs::RGBColor( 129.193, 6.0027, 2.20065 ));
    color_map.addPoint(0.99608, kvs::RGBColor( 125.769, 5.00565, 2.43525 ));
    color_map.addPoint(1, kvs::RGBColor( 122.298, 4.03665, 2.69025 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("Turbo", color_map);

    //Viridis (matplotlib)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 68.086, 1.24287, 84.0008 ));
    color_map.addPoint(0.003922, kvs::RGBColor( 68.4701, 2.44928, 85.5339 ));
    color_map.addPoint(0.007843, kvs::RGBColor( 68.8357, 3.72938, 87.0516 ));
    color_map.addPoint(0.011765, kvs::RGBColor( 69.1828, 5.08521, 88.5536 ));
    color_map.addPoint(0.015686, kvs::RGBColor( 69.5115, 6.51856, 90.0387 ));
    color_map.addPoint(0.019608, kvs::RGBColor( 69.8213, 8.03173, 91.5075 ));
    color_map.addPoint(0.023529, kvs::RGBColor( 70.1128, 9.62676, 92.9585 ));
    color_map.addPoint(0.027451, kvs::RGBColor( 70.3856, 11.2626, 94.3918 ));
    color_map.addPoint(0.031373, kvs::RGBColor( 70.6396, 12.8377, 95.8073 ));
    color_map.addPoint(0.035294, kvs::RGBColor( 70.875, 14.3626, 97.2037 ));
    color_map.addPoint(0.039216, kvs::RGBColor( 71.0917, 15.847, 98.581 ));
    color_map.addPoint(0.043137, kvs::RGBColor( 71.2893, 17.2982, 99.9388 ));
    color_map.addPoint(0.047059, kvs::RGBColor( 71.4681, 18.7213, 101.277 ));
    color_map.addPoint(0.05098, kvs::RGBColor( 71.628, 20.1213, 102.594 ));
    color_map.addPoint(0.054902, kvs::RGBColor( 71.7687, 21.5016, 103.891 ));
    color_map.addPoint(0.058824, kvs::RGBColor( 71.8906, 22.8648, 105.166 ));
    color_map.addPoint(0.062745, kvs::RGBColor( 71.9934, 24.2135, 106.419 ));
    color_map.addPoint(0.066667, kvs::RGBColor( 72.0773, 25.55, 107.651 ));
    color_map.addPoint(0.070588, kvs::RGBColor( 72.142, 26.8752, 108.86 ));
    color_map.addPoint(0.07451, kvs::RGBColor( 72.1882, 28.191, 110.046 ));
    color_map.addPoint(0.078431, kvs::RGBColor( 72.2152, 29.4984, 111.209 ));
    color_map.addPoint(0.082353, kvs::RGBColor( 72.2234, 30.7981, 112.349 ));
    color_map.addPoint(0.086275, kvs::RGBColor( 72.2127, 32.0912, 113.465 ));
    color_map.addPoint(0.090196, kvs::RGBColor( 72.1834, 33.3782, 114.556 ));
    color_map.addPoint(0.094118, kvs::RGBColor( 72.1354, 34.6596, 115.624 ));
    color_map.addPoint(0.098039, kvs::RGBColor( 72.0689, 35.9361, 116.667 ));
    color_map.addPoint(0.101961, kvs::RGBColor( 71.9839, 37.2076, 117.685 ));
    color_map.addPoint(0.105882, kvs::RGBColor( 71.8812, 38.4747, 118.678 ));
    color_map.addPoint(0.109804, kvs::RGBColor( 71.7601, 39.7377, 119.646 ));
    color_map.addPoint(0.113725, kvs::RGBColor( 71.6213, 40.9966, 120.589 ));
    color_map.addPoint(0.117647, kvs::RGBColor( 71.465, 42.2517, 121.507 ));
    color_map.addPoint(0.121569, kvs::RGBColor( 71.2914, 43.5027, 122.399 ));
    color_map.addPoint(0.12549, kvs::RGBColor( 71.1006, 44.7499, 123.266 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 70.8931, 45.9936, 124.108 ));
    color_map.addPoint(0.133333, kvs::RGBColor( 70.6692, 47.2331, 124.924 ));
    color_map.addPoint(0.137255, kvs::RGBColor( 70.4295, 48.4689, 125.715 ));
    color_map.addPoint(0.141176, kvs::RGBColor( 70.1737, 49.7008, 126.481 ));
    color_map.addPoint(0.145098, kvs::RGBColor( 69.9026, 50.9289, 127.222 ));
    color_map.addPoint(0.14902, kvs::RGBColor( 69.6165, 52.1526, 127.939 ));
    color_map.addPoint(0.152941, kvs::RGBColor( 69.3161, 53.3723, 128.631 ));
    color_map.addPoint(0.156863, kvs::RGBColor( 69.0017, 54.5876, 129.298 ));
    color_map.addPoint(0.160784, kvs::RGBColor( 68.6735, 55.7986, 129.942 ));
    color_map.addPoint(0.164706, kvs::RGBColor( 68.3318, 57.005, 130.562 ));
    color_map.addPoint(0.168627, kvs::RGBColor( 67.9779, 58.2068, 131.159 ));
    color_map.addPoint(0.172549, kvs::RGBColor( 67.612, 59.4038, 131.733 ));
    color_map.addPoint(0.176471, kvs::RGBColor( 67.2341, 60.5959, 132.284 ));
    color_map.addPoint(0.180392, kvs::RGBColor( 66.8452, 61.7829, 132.813 ));
    color_map.addPoint(0.184314, kvs::RGBColor( 66.4456, 62.9651, 133.321 ));
    color_map.addPoint(0.188235, kvs::RGBColor( 66.0361, 64.1419, 133.808 ));
    color_map.addPoint(0.192157, kvs::RGBColor( 65.6171, 65.3132, 134.274 ));
    color_map.addPoint(0.196078, kvs::RGBColor( 65.1895, 66.4793, 134.72 ));
    color_map.addPoint(0.2, kvs::RGBColor( 64.7534, 67.6398, 135.146 ));
    color_map.addPoint(0.203922, kvs::RGBColor( 64.3095, 68.7947, 135.553 ));
    color_map.addPoint(0.207843, kvs::RGBColor( 63.8584, 69.944, 135.941 ));
    color_map.addPoint(0.211765, kvs::RGBColor( 63.4004, 71.0876, 136.312 ));
    color_map.addPoint(0.215686, kvs::RGBColor( 62.9368, 72.2254, 136.665 ));
    color_map.addPoint(0.219608, kvs::RGBColor( 62.4679, 73.3571, 137.001 ));
    color_map.addPoint(0.223529, kvs::RGBColor( 61.9938, 74.4835, 137.322 ));
    color_map.addPoint(0.227451, kvs::RGBColor( 61.5154, 75.6037, 137.626 ));
    color_map.addPoint(0.231373, kvs::RGBColor( 61.0332, 76.718, 137.915 ));
    color_map.addPoint(0.235294, kvs::RGBColor( 60.5475, 77.8265, 138.19 ));
    color_map.addPoint(0.239216, kvs::RGBColor( 60.0591, 78.9294, 138.451 ));
    color_map.addPoint(0.243137, kvs::RGBColor( 59.5688, 80.0261, 138.698 ));
    color_map.addPoint(0.247059, kvs::RGBColor( 59.0769, 81.117, 138.933 ));
    color_map.addPoint(0.25098, kvs::RGBColor( 58.5834, 82.2021, 139.155 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 58.0895, 83.2815, 139.366 ));
    color_map.addPoint(0.258824, kvs::RGBColor( 57.5951, 84.3553, 139.565 ));
    color_map.addPoint(0.262745, kvs::RGBColor( 57.1009, 85.4235, 139.754 ));
    color_map.addPoint(0.266667, kvs::RGBColor( 56.6072, 86.4861, 139.932 ));
    color_map.addPoint(0.270588, kvs::RGBColor( 56.1145, 87.5433, 140.1 ));
    color_map.addPoint(0.27451, kvs::RGBColor( 55.6231, 88.5952, 140.26 ));
    color_map.addPoint(0.278431, kvs::RGBColor( 55.1336, 89.6414, 140.41 ));
    color_map.addPoint(0.282353, kvs::RGBColor( 54.646, 90.6828, 140.552 ));
    color_map.addPoint(0.286275, kvs::RGBColor( 54.1607, 91.7192, 140.686 ));
    color_map.addPoint(0.290196, kvs::RGBColor( 53.6783, 92.7504, 140.813 ));
    color_map.addPoint(0.294118, kvs::RGBColor( 53.1989, 93.7768, 140.932 ));
    color_map.addPoint(0.298039, kvs::RGBColor( 52.7228, 94.7983, 141.045 ));
    color_map.addPoint(0.301961, kvs::RGBColor( 52.2503, 95.8152, 141.151 ));
    color_map.addPoint(0.305882, kvs::RGBColor( 51.7811, 96.8276, 141.251 ));
    color_map.addPoint(0.309804, kvs::RGBColor( 51.3159, 97.8359, 141.345 ));
    color_map.addPoint(0.313725, kvs::RGBColor( 50.8546, 98.8398, 141.434 ));
    color_map.addPoint(0.317647, kvs::RGBColor( 50.3972, 99.8396, 141.517 ));
    color_map.addPoint(0.321569, kvs::RGBColor( 49.9443, 100.835, 141.595 ));
    color_map.addPoint(0.32549, kvs::RGBColor( 49.4955, 101.827, 141.669 ));
    color_map.addPoint(0.329412, kvs::RGBColor( 49.051, 102.816, 141.738 ));
    color_map.addPoint(0.333333, kvs::RGBColor( 48.6109, 103.801, 141.803 ));
    color_map.addPoint(0.337255, kvs::RGBColor( 48.1754, 104.782, 141.863 ));
    color_map.addPoint(0.341176, kvs::RGBColor( 47.7439, 105.76, 141.919 ));
    color_map.addPoint(0.345098, kvs::RGBColor( 47.3168, 106.735, 141.972 ));
    color_map.addPoint(0.34902, kvs::RGBColor( 46.894, 107.708, 142.021 ));
    color_map.addPoint(0.352941, kvs::RGBColor( 46.4753, 108.677, 142.066 ));
    color_map.addPoint(0.356863, kvs::RGBColor( 46.0604, 109.644, 142.107 ));
    color_map.addPoint(0.360784, kvs::RGBColor( 45.6498, 110.608, 142.145 ));
    color_map.addPoint(0.364706, kvs::RGBColor( 45.2429, 111.569, 142.179 ));
    color_map.addPoint(0.368627, kvs::RGBColor( 44.8395, 112.529, 142.21 ));
    color_map.addPoint(0.372549, kvs::RGBColor( 44.4399, 113.486, 142.237 ));
    color_map.addPoint(0.376471, kvs::RGBColor( 44.0433, 114.442, 142.261 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 43.6499, 115.395, 142.281 ));
    color_map.addPoint(0.384314, kvs::RGBColor( 43.2597, 116.347, 142.298 ));
    color_map.addPoint(0.388235, kvs::RGBColor( 42.8721, 117.297, 142.311 ));
    color_map.addPoint(0.392157, kvs::RGBColor( 42.4873, 118.246, 142.32 ));
    color_map.addPoint(0.396078, kvs::RGBColor( 42.1048, 119.193, 142.326 ));
    color_map.addPoint(0.4, kvs::RGBColor( 41.7244, 120.139, 142.328 ));
    color_map.addPoint(0.403922, kvs::RGBColor( 41.3462, 121.084, 142.326 ));
    color_map.addPoint(0.407843, kvs::RGBColor( 40.9696, 122.028, 142.319 ));
    color_map.addPoint(0.411765, kvs::RGBColor( 40.5945, 122.97, 142.309 ));
    color_map.addPoint(0.415686, kvs::RGBColor( 40.2209, 123.913, 142.293 ));
    color_map.addPoint(0.419608, kvs::RGBColor( 39.8488, 124.854, 142.274 ));
    color_map.addPoint(0.423529, kvs::RGBColor( 39.4778, 125.795, 142.249 ));
    color_map.addPoint(0.427451, kvs::RGBColor( 39.1078, 126.735, 142.22 ));
    color_map.addPoint(0.431373, kvs::RGBColor( 38.7391, 127.675, 142.185 ));
    color_map.addPoint(0.435294, kvs::RGBColor( 38.3714, 128.614, 142.145 ));
    color_map.addPoint(0.439216, kvs::RGBColor( 38.0049, 129.553, 142.099 ));
    color_map.addPoint(0.443137, kvs::RGBColor( 37.6398, 130.492, 142.047 ));
    color_map.addPoint(0.447059, kvs::RGBColor( 37.2759, 131.43, 141.99 ));
    color_map.addPoint(0.45098, kvs::RGBColor( 36.9135, 132.369, 141.926 ));
    color_map.addPoint(0.454902, kvs::RGBColor( 36.5525, 133.307, 141.855 ));
    color_map.addPoint(0.458824, kvs::RGBColor( 36.1934, 134.246, 141.778 ));
    color_map.addPoint(0.462745, kvs::RGBColor( 35.8367, 135.184, 141.693 ));
    color_map.addPoint(0.466667, kvs::RGBColor( 35.4825, 136.122, 141.601 ));
    color_map.addPoint(0.470588, kvs::RGBColor( 35.1313, 137.06, 141.501 ));
    color_map.addPoint(0.47451, kvs::RGBColor( 34.784, 137.999, 141.393 ));
    color_map.addPoint(0.478431, kvs::RGBColor( 34.4418, 138.938, 141.277 ));
    color_map.addPoint(0.482353, kvs::RGBColor( 34.1045, 139.876, 141.153 ));
    color_map.addPoint(0.486275, kvs::RGBColor( 33.7732, 140.815, 141.02 ));
    color_map.addPoint(0.490196, kvs::RGBColor( 33.4489, 141.754, 140.877 ));
    color_map.addPoint(0.494118, kvs::RGBColor( 33.1329, 142.693, 140.725 ));
    color_map.addPoint(0.498039, kvs::RGBColor( 32.8259, 143.633, 140.563 ));
    color_map.addPoint(0.501961, kvs::RGBColor( 32.5298, 144.572, 140.392 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 32.2455, 145.511, 140.209 ));
    color_map.addPoint(0.509804, kvs::RGBColor( 31.9755, 146.451, 140.017 ));
    color_map.addPoint(0.513725, kvs::RGBColor( 31.7207, 147.391, 139.813 ));
    color_map.addPoint(0.517647, kvs::RGBColor( 31.4831, 148.33, 139.598 ));
    color_map.addPoint(0.521569, kvs::RGBColor( 31.2645, 149.27, 139.372 ));
    color_map.addPoint(0.52549, kvs::RGBColor( 31.0669, 150.209, 139.134 ));
    color_map.addPoint(0.529412, kvs::RGBColor( 30.8927, 151.148, 138.883 ));
    color_map.addPoint(0.533333, kvs::RGBColor( 30.7441, 152.088, 138.621 ));
    color_map.addPoint(0.537255, kvs::RGBColor( 30.6235, 153.027, 138.345 ));
    color_map.addPoint(0.541176, kvs::RGBColor( 30.5332, 153.965, 138.057 ));
    color_map.addPoint(0.545098, kvs::RGBColor( 30.4756, 154.903, 137.756 ));
    color_map.addPoint(0.54902, kvs::RGBColor( 30.4529, 155.841, 137.44 ));
    color_map.addPoint(0.552941, kvs::RGBColor( 30.4682, 156.778, 137.111 ));
    color_map.addPoint(0.556863, kvs::RGBColor( 30.5232, 157.715, 136.768 ));
    color_map.addPoint(0.560784, kvs::RGBColor( 30.6207, 158.651, 136.411 ));
    color_map.addPoint(0.564706, kvs::RGBColor( 30.7627, 159.586, 136.039 ));
    color_map.addPoint(0.568627, kvs::RGBColor( 30.9519, 160.52, 135.653 ));
    color_map.addPoint(0.572549, kvs::RGBColor( 31.1896, 161.454, 135.251 ));
    color_map.addPoint(0.576471, kvs::RGBColor( 31.4782, 162.386, 134.835 ));
    color_map.addPoint(0.580392, kvs::RGBColor( 31.8189, 163.318, 134.402 ));
    color_map.addPoint(0.584314, kvs::RGBColor( 32.2131, 164.247, 133.954 ));
    color_map.addPoint(0.588235, kvs::RGBColor( 32.6622, 165.176, 133.49 ));
    color_map.addPoint(0.592157, kvs::RGBColor( 33.1671, 166.103, 133.01 ));
    color_map.addPoint(0.596078, kvs::RGBColor( 33.7283, 167.029, 132.514 ));
    color_map.addPoint(0.6, kvs::RGBColor( 34.3465, 167.952, 132 ));
    color_map.addPoint(0.603922, kvs::RGBColor( 35.0214, 168.874, 131.471 ));
    color_map.addPoint(0.607843, kvs::RGBColor( 35.7535, 169.794, 130.924 ));
    color_map.addPoint(0.611765, kvs::RGBColor( 36.5423, 170.712, 130.36 ));
    color_map.addPoint(0.615686, kvs::RGBColor( 37.3871, 171.628, 129.779 ));
    color_map.addPoint(0.619608, kvs::RGBColor( 38.2877, 172.541, 129.18 ));
    color_map.addPoint(0.623529, kvs::RGBColor( 39.243, 173.452, 128.564 ));
    color_map.addPoint(0.627451, kvs::RGBColor( 40.252, 174.36, 127.93 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 41.3141, 175.266, 127.278 ));
    color_map.addPoint(0.635294, kvs::RGBColor( 42.4277, 176.168, 126.608 ));
    color_map.addPoint(0.639216, kvs::RGBColor( 43.5917, 177.068, 125.92 ));
    color_map.addPoint(0.643137, kvs::RGBColor( 44.8053, 177.964, 125.213 ));
    color_map.addPoint(0.647059, kvs::RGBColor( 46.0665, 178.858, 124.488 ));
    color_map.addPoint(0.65098, kvs::RGBColor( 47.3747, 179.747, 123.745 ));
    color_map.addPoint(0.654902, kvs::RGBColor( 48.7279, 180.633, 122.982 ));
    color_map.addPoint(0.658824, kvs::RGBColor( 50.1256, 181.516, 122.201 ));
    color_map.addPoint(0.662745, kvs::RGBColor( 51.5658, 182.394, 121.401 ));
    color_map.addPoint(0.666667, kvs::RGBColor( 53.0476, 183.269, 120.583 ));
    color_map.addPoint(0.670588, kvs::RGBColor( 54.57, 184.139, 119.745 ));
    color_map.addPoint(0.67451, kvs::RGBColor( 56.1316, 185.005, 118.888 ));
    color_map.addPoint(0.678431, kvs::RGBColor( 57.7312, 185.866, 118.011 ));
    color_map.addPoint(0.682353, kvs::RGBColor( 59.3678, 186.723, 117.116 ));
    color_map.addPoint(0.686275, kvs::RGBColor( 61.0404, 187.575, 116.2 ));
    color_map.addPoint(0.690196, kvs::RGBColor( 62.7478, 188.422, 115.266 ));
    color_map.addPoint(0.694118, kvs::RGBColor( 64.4892, 189.264, 114.312 ));
    color_map.addPoint(0.698039, kvs::RGBColor( 66.2635, 190.1, 113.339 ));
    color_map.addPoint(0.701961, kvs::RGBColor( 68.07, 190.932, 112.346 ));
    color_map.addPoint(0.705882, kvs::RGBColor( 69.908, 191.757, 111.333 ));
    color_map.addPoint(0.709804, kvs::RGBColor( 71.7766, 192.577, 110.301 ));
    color_map.addPoint(0.713725, kvs::RGBColor( 73.6749, 193.39, 109.249 ));
    color_map.addPoint(0.717647, kvs::RGBColor( 75.6021, 194.198, 108.177 ));
    color_map.addPoint(0.721569, kvs::RGBColor( 77.5577, 195, 107.085 ));
    color_map.addPoint(0.72549, kvs::RGBColor( 79.5409, 195.795, 105.974 ));
    color_map.addPoint(0.729412, kvs::RGBColor( 81.5513, 196.583, 104.844 ));
    color_map.addPoint(0.733333, kvs::RGBColor( 83.588, 197.365, 103.693 ));
    color_map.addPoint(0.737255, kvs::RGBColor( 85.6507, 198.14, 102.522 ));
    color_map.addPoint(0.741176, kvs::RGBColor( 87.7389, 198.907, 101.332 ));
    color_map.addPoint(0.745098, kvs::RGBColor( 89.8518, 199.668, 100.122 ));
    color_map.addPoint(0.74902, kvs::RGBColor( 91.989, 200.421, 98.8926 ));
    color_map.addPoint(0.752941, kvs::RGBColor( 94.1496, 201.166, 97.6431 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 96.3336, 201.904, 96.3744 ));
    color_map.addPoint(0.760784, kvs::RGBColor( 98.5404, 202.634, 95.0859 ));
    color_map.addPoint(0.764706, kvs::RGBColor( 100.769, 203.356, 93.778 ));
    color_map.addPoint(0.768627, kvs::RGBColor( 103.02, 204.07, 92.4508 ));
    color_map.addPoint(0.772549, kvs::RGBColor( 105.293, 204.775, 91.1036 ));
    color_map.addPoint(0.776471, kvs::RGBColor( 107.587, 205.472, 89.737 ));
    color_map.addPoint(0.780392, kvs::RGBColor( 109.901, 206.161, 88.3514 ));
    color_map.addPoint(0.784314, kvs::RGBColor( 112.235, 206.84, 86.9466 ));
    color_map.addPoint(0.788235, kvs::RGBColor( 114.589, 207.511, 85.5229 ));
    color_map.addPoint(0.792157, kvs::RGBColor( 116.962, 208.173, 84.0804 ));
    color_map.addPoint(0.796078, kvs::RGBColor( 119.354, 208.825, 82.6195 ));
    color_map.addPoint(0.8, kvs::RGBColor( 121.764, 209.468, 81.1397 ));
    color_map.addPoint(0.803922, kvs::RGBColor( 124.192, 210.102, 79.6419 ));
    color_map.addPoint(0.807843, kvs::RGBColor( 126.637, 210.726, 78.1261 ));
    color_map.addPoint(0.811765, kvs::RGBColor( 129.099, 211.34, 76.5923 ));
    color_map.addPoint(0.815686, kvs::RGBColor( 131.578, 211.945, 75.0411 ));
    color_map.addPoint(0.819608, kvs::RGBColor( 134.073, 212.54, 73.4724 ));
    color_map.addPoint(0.823529, kvs::RGBColor( 136.583, 213.125, 71.8865 ));
    color_map.addPoint(0.827451, kvs::RGBColor( 139.109, 213.7, 70.2846 ));
    color_map.addPoint(0.831373, kvs::RGBColor( 141.648, 214.265, 68.6667 ));
    color_map.addPoint(0.835294, kvs::RGBColor( 144.202, 214.82, 67.0336 ));
    color_map.addPoint(0.839216, kvs::RGBColor( 146.769, 215.364, 65.3858 ));
    color_map.addPoint(0.843137, kvs::RGBColor( 149.348, 215.899, 63.7237 ));
    color_map.addPoint(0.847059, kvs::RGBColor( 151.939, 216.423, 62.0489 ));
    color_map.addPoint(0.85098, kvs::RGBColor( 154.541, 216.937, 60.3616 ));
    color_map.addPoint(0.854902, kvs::RGBColor( 157.155, 217.441, 58.6633 ));
    color_map.addPoint(0.858824, kvs::RGBColor( 159.778, 217.934, 56.955 ));
    color_map.addPoint(0.862745, kvs::RGBColor( 162.41, 218.418, 55.2381 ));
    color_map.addPoint(0.866667, kvs::RGBColor( 165.051, 218.892, 53.5146 ));
    color_map.addPoint(0.870588, kvs::RGBColor( 167.699, 219.356, 51.7859 ));
    color_map.addPoint(0.87451, kvs::RGBColor( 170.354, 219.81, 50.0547 ));
    color_map.addPoint(0.878431, kvs::RGBColor( 173.015, 220.254, 48.3233 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 175.681, 220.689, 46.5949 ));
    color_map.addPoint(0.886275, kvs::RGBColor( 178.351, 221.115, 44.8726 ));
    color_map.addPoint(0.890196, kvs::RGBColor( 181.024, 221.532, 43.1605 ));
    color_map.addPoint(0.894118, kvs::RGBColor( 183.7, 221.939, 41.4638 ));
    color_map.addPoint(0.898039, kvs::RGBColor( 186.377, 222.339, 39.7874 ));
    color_map.addPoint(0.901961, kvs::RGBColor( 189.054, 222.729, 38.1381 ));
    color_map.addPoint(0.905882, kvs::RGBColor( 191.73, 223.113, 36.5231 ));
    color_map.addPoint(0.909804, kvs::RGBColor( 194.405, 223.488, 34.9513 ));
    color_map.addPoint(0.913725, kvs::RGBColor( 197.077, 223.856, 33.4328 ));
    color_map.addPoint(0.917647, kvs::RGBColor( 199.745, 224.218, 31.9783 ));
    color_map.addPoint(0.921569, kvs::RGBColor( 202.409, 224.573, 30.6013 ));
    color_map.addPoint(0.92549, kvs::RGBColor( 205.066, 224.922, 29.3161 ));
    color_map.addPoint(0.929412, kvs::RGBColor( 207.717, 225.265, 28.1385 ));
    color_map.addPoint(0.933333, kvs::RGBColor( 210.36, 225.604, 27.0853 ));
    color_map.addPoint(0.937255, kvs::RGBColor( 212.994, 225.937, 26.1747 ));
    color_map.addPoint(0.941176, kvs::RGBColor( 215.618, 226.267, 25.424 ));
    color_map.addPoint(0.945098, kvs::RGBColor( 218.232, 226.593, 24.8503 ));
    color_map.addPoint(0.94902, kvs::RGBColor( 220.833, 226.916, 24.468 ));
    color_map.addPoint(0.952941, kvs::RGBColor( 223.423, 227.237, 24.2888 ));
    color_map.addPoint(0.956863, kvs::RGBColor( 225.999, 227.555, 24.3204 ));
    color_map.addPoint(0.960784, kvs::RGBColor( 228.562, 227.872, 24.5654 ));
    color_map.addPoint(0.964706, kvs::RGBColor( 231.109, 228.188, 25.0219 ));
    color_map.addPoint(0.968627, kvs::RGBColor( 233.642, 228.503, 25.6828 ));
    color_map.addPoint(0.972549, kvs::RGBColor( 236.157, 228.819, 26.5381 ));
    color_map.addPoint(0.976471, kvs::RGBColor( 238.656, 229.135, 27.5734 ));
    color_map.addPoint(0.980392, kvs::RGBColor( 241.137, 229.453, 28.7737 ));
    color_map.addPoint(0.984314, kvs::RGBColor( 243.602, 229.772, 30.1226 ));
    color_map.addPoint(0.988235, kvs::RGBColor( 246.048, 230.092, 31.605 ));
    color_map.addPoint(0.992157, kvs::RGBColor( 248.476, 230.415, 33.2048 ));
    color_map.addPoint(0.996078, kvs::RGBColor( 250.886, 230.741, 34.9087 ));
    color_map.addPoint(1, kvs::RGBColor( 253.278, 231.07, 36.7037 ));
    color_map.create();
    this->add("Viridis (matplotlib)", color_map);

    //Warm Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 121, 23, 23));
    color_map.addPoint( 0.166,kvs::RGBColor( 121, 23, 23));
    color_map.addPoint( 0.166,kvs::RGBColor( 181, 1, 1));
    color_map.addPoint( 0.333,kvs::RGBColor( 181, 1, 1));
    color_map.addPoint( 0.333,kvs::RGBColor( 239, 71, 25));
    color_map.addPoint( 0.5,kvs::RGBColor( 239, 71, 25));
    color_map.addPoint( 0.5,kvs::RGBColor( 249, 131, 36));
    color_map.addPoint( 0.666,kvs::RGBColor( 249, 131, 36));
    color_map.addPoint( 0.666,kvs::RGBColor( 255, 180, 0));
    color_map.addPoint( 0.833,kvs::RGBColor( 255, 180, 0));
    color_map.addPoint( 0.833,kvs::RGBColor( 255, 229, 6));
    color_map.addPoint( 1,kvs::RGBColor( 255, 229, 6));
    color_map.addPoint( 1,kvs::RGBColor( 0, 0, 0));
    color_map.create();
    this->add("Warm Step", color_map);

    //Warm to Cool (Extended)
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 89.0001, 0, 33.0001 ));
    color_map.addPoint(0.025, kvs::RGBColor( 102, 1, 26.0001 ));
    color_map.addPoint(0.05, kvs::RGBColor( 120, 4.00001, 23 ));
    color_map.addPoint(0.075, kvs::RGBColor( 140, 7, 18 ));
    color_map.addPoint(0.1, kvs::RGBColor( 158, 16, 11 ));
    color_map.addPoint(0.125, kvs::RGBColor( 176, 31.9999, 16 ));
    color_map.addPoint(0.15, kvs::RGBColor( 189, 47.0001, 19 ));
    color_map.addPoint(0.175, kvs::RGBColor( 201, 68.0001, 24 ));
    color_map.addPoint(0.2, kvs::RGBColor( 207, 88, 28.9999 ));
    color_map.addPoint(0.225, kvs::RGBColor( 212, 105, 33.9999 ));
    color_map.addPoint(0.25, kvs::RGBColor( 217, 121, 37 ));
    color_map.addPoint(0.275, kvs::RGBColor( 222, 140, 40.0001 ));
    color_map.addPoint(0.3, kvs::RGBColor( 224, 158, 42.9999 ));
    color_map.addPoint(0.325, kvs::RGBColor( 227, 168, 49.9999 ));
    color_map.addPoint(0.35, kvs::RGBColor( 232, 183, 60 ));
    color_map.addPoint(0.375, kvs::RGBColor( 237, 198, 70.9999 ));
    color_map.addPoint(0.395522, kvs::RGBColor( 242, 210, 82.0001 ));
    color_map.addPoint(0.418905, kvs::RGBColor( 247, 223, 104 ));
    color_map.addPoint(0.444278, kvs::RGBColor( 250, 234, 130 ));
    color_map.addPoint(0.470149, kvs::RGBColor( 252, 244, 164 ));
    color_map.addPoint(0.483582, kvs::RGBColor( 253, 246, 182 ));
    color_map.addPoint(0.499, kvs::RGBColor( 252, 250, 222 ));
    color_map.addPoint(0.5, kvs::RGBColor( 255, 255, 255 ));
    color_map.addPoint(0.501, kvs::RGBColor( 233, 252, 239 ));
    color_map.addPoint(0.516418, kvs::RGBColor( 211, 250, 226 ));
    color_map.addPoint(0.531343, kvs::RGBColor( 195, 250, 221 ));
    color_map.addPoint(0.546766, kvs::RGBColor( 168, 250, 215 ));
    color_map.addPoint(0.564179, kvs::RGBColor( 146, 246, 213 ));
    color_map.addPoint(0.587562, kvs::RGBColor( 108, 240, 223 ));
    color_map.addPoint(0.60597, kvs::RGBColor( 67, 230, 220 ));
    color_map.addPoint(0.629851, kvs::RGBColor( 18, 218, 222 ));
    color_map.addPoint(0.651741, kvs::RGBColor( 13, 204, 217 ));
    color_map.addPoint(0.681592, kvs::RGBColor( 6, 181, 212 ));
    color_map.addPoint(0.712935, kvs::RGBColor( 7.99999, 157, 207 ));
    color_map.addPoint(0.75, kvs::RGBColor( 7.99999, 137, 201 ));
    color_map.addPoint(0.775, kvs::RGBColor( 10, 119, 196 ));
    color_map.addPoint(0.8, kvs::RGBColor( 13, 101, 189 ));
    color_map.addPoint(0.825, kvs::RGBColor( 14, 81, 181 ));
    color_map.addPoint(0.85, kvs::RGBColor( 14, 61.9999, 173 ));
    color_map.addPoint(0.875, kvs::RGBColor( 11, 42, 163 ));
    color_map.addPoint(0.9, kvs::RGBColor( 7.99999, 25, 153 ));
    color_map.addPoint(0.925, kvs::RGBColor( 10, 10, 143 ));
    color_map.addPoint(0.95, kvs::RGBColor( 26.9999, 13, 130 ));
    color_map.addPoint(0.975, kvs::RGBColor( 28.9999, 6, 115 ));
    color_map.addPoint(1, kvs::RGBColor( 31.9999, 0, 97 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Warm to Cool (Extended)", color_map);

    //Warm to Cool
    color_map = kvs::ColorMap(256, 0, 1);
    color_map = kvs::DivergingColorMap::Create(kvs::RGBColor(180, 4,38), kvs::RGBColor(59,76,192),256);
    this->add("Warm to Cool", color_map);

    //Wild Flower Step
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint( 0,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.143,kvs::RGBColor( 28, 149, 205));
    color_map.addPoint( 0.143,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.286,kvs::RGBColor( 59, 104, 171));
    color_map.addPoint( 0.286,kvs::RGBColor( 102, 62, 183));
    color_map.addPoint( 0.429,kvs::RGBColor( 102, 62, 183));
    color_map.addPoint( 0.429,kvs::RGBColor( 162, 84, 207));
    color_map.addPoint( 0.571,kvs::RGBColor( 162, 84, 207));
    color_map.addPoint( 0.571,kvs::RGBColor( 222, 97, 206));
    color_map.addPoint( 0.714,kvs::RGBColor( 222, 97, 206));
    color_map.addPoint( 0.714,kvs::RGBColor( 220, 97, 149));
    color_map.addPoint( 0.857,kvs::RGBColor( 220, 97, 149));
    color_map.addPoint( 0.857,kvs::RGBColor( 61, 16, 82));
    color_map.addPoint( 1,kvs::RGBColor( 61, 16, 82));
    color_map.addPoint( 1,kvs::RGBColor( 149, 205, 0));
    color_map.create();
    this->add("Wild Flower Step", color_map);

    //X Ray
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 255, 255, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 0, 0, 0 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("X Ray", color_map);

    //Yellow - Gray - Blue
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 77.0001, 12, 23 ));
    color_map.addPoint(0.0163902, kvs::RGBColor( 101, 10, 15 ));
    color_map.addPoint(0.0327805, kvs::RGBColor( 126, 14, 9 ));
    color_map.addPoint(0.0491707, kvs::RGBColor( 150, 29, 6 ));
    color_map.addPoint(0.065561, kvs::RGBColor( 169, 43, 4 ));
    color_map.addPoint(0.0819512, kvs::RGBColor( 189, 58, 1 ));
    color_map.addPoint(0.0983415, kvs::RGBColor( 201, 74, 0 ));
    color_map.addPoint(0.114732, kvs::RGBColor( 220, 97, 3 ));
    color_map.addPoint(0.131122, kvs::RGBColor( 230, 117, 7 ));
    color_map.addPoint(0.147512, kvs::RGBColor( 234, 133, 12 ));
    color_map.addPoint(0.163902, kvs::RGBColor( 236, 148, 20 ));
    color_map.addPoint(0.180293, kvs::RGBColor( 239, 164, 31 ));
    color_map.addPoint(0.196683, kvs::RGBColor( 241, 181, 47 ));
    color_map.addPoint(0.213073, kvs::RGBColor( 243, 196, 63 ));
    color_map.addPoint(0.229463, kvs::RGBColor( 246, 211, 83 ));
    color_map.addPoint(0.245854, kvs::RGBColor( 247, 224, 108 ));
    color_map.addPoint(0.262244, kvs::RGBColor( 248, 234, 131 ));
    color_map.addPoint(0.278634, kvs::RGBColor( 250, 242, 152 ));
    color_map.addPoint(0.295024, kvs::RGBColor( 250, 248, 171 ));
    color_map.addPoint(0.311415, kvs::RGBColor( 252, 252, 193 ));
    color_map.addPoint(0.327149, kvs::RGBColor( 251, 252, 218 ));
    color_map.addPoint(0.327805, kvs::RGBColor( 252, 252, 219 ));
    color_map.addPoint(0.327815, kvs::RGBColor( 243, 243, 228 ));
    color_map.addPoint(0.327815, kvs::RGBColor( 243, 243, 228 ));
    color_map.addPoint(0.344836, kvs::RGBColor( 227, 227, 206 ));
    color_map.addPoint(0.361856, kvs::RGBColor( 211, 210, 188 ));
    color_map.addPoint(0.378877, kvs::RGBColor( 198, 195, 173 ));
    color_map.addPoint(0.395898, kvs::RGBColor( 185, 182, 160 ));
    color_map.addPoint(0.412919, kvs::RGBColor( 173, 169, 148 ));
    color_map.addPoint(0.42994, kvs::RGBColor( 161, 155, 136 ));
    color_map.addPoint(0.44696, kvs::RGBColor( 148, 142, 124 ));
    color_map.addPoint(0.463981, kvs::RGBColor( 137, 129, 113 ));
    color_map.addPoint(0.481002, kvs::RGBColor( 127, 117, 104 ));
    color_map.addPoint(0.498023, kvs::RGBColor( 118, 107, 95 ));
    color_map.addPoint(0.515043, kvs::RGBColor( 110, 99, 88 ));
    color_map.addPoint(0.532064, kvs::RGBColor( 103, 91, 81 ));
    color_map.addPoint(0.549085, kvs::RGBColor( 95, 82, 75 ));
    color_map.addPoint(0.566106, kvs::RGBColor( 88, 75, 68 ));
    color_map.addPoint(0.583127, kvs::RGBColor( 81, 67, 61 ));
    color_map.addPoint(0.600147, kvs::RGBColor( 73, 59, 54 ));
    color_map.addPoint(0.617168, kvs::RGBColor( 65, 51, 47 ));
    color_map.addPoint(0.634189, kvs::RGBColor( 59, 44, 42 ));
    color_map.addPoint(0.65121, kvs::RGBColor( 51, 37, 35 ));
    color_map.addPoint(0.66824, kvs::RGBColor( 38.0001, 49.9999, 70.9999 ));
    color_map.addPoint(0.701416, kvs::RGBColor( 51, 65, 88 ));
    color_map.addPoint(0.734592, kvs::RGBColor( 63, 81, 106 ));
    color_map.addPoint(0.767768, kvs::RGBColor( 78, 99, 126 ));
    color_map.addPoint(0.800944, kvs::RGBColor( 95, 117, 145 ));
    color_map.addPoint(0.83412, kvs::RGBColor( 113, 136, 164 ));
    color_map.addPoint(0.867296, kvs::RGBColor( 132, 157, 185 ));
    color_map.addPoint(0.900472, kvs::RGBColor( 153, 178, 204 ));
    color_map.addPoint(0.933648, kvs::RGBColor( 175, 200, 222 ));
    color_map.addPoint(0.966824, kvs::RGBColor( 194, 219, 237 ));
    color_map.addPoint(0.983412, kvs::RGBColor( 206, 230, 245 ));
    color_map.addPoint(1, kvs::RGBColor( 227, 244, 251 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Yellow - Gray - Blue", color_map);

    //Yellow 15
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 255, 255, 252 ));
    color_map.addPoint(0.002, kvs::RGBColor( 255, 255, 252 ));
    color_map.addPoint(0.05, kvs::RGBColor( 251, 252, 215 ));
    color_map.addPoint(0.1, kvs::RGBColor( 252, 252, 189 ));
    color_map.addPoint(0.15, kvs::RGBColor( 250, 247, 167 ));
    color_map.addPoint(0.2, kvs::RGBColor( 250, 241, 147 ));
    color_map.addPoint(0.25, kvs::RGBColor( 247, 231, 124 ));
    color_map.addPoint(0.3, kvs::RGBColor( 247, 220, 98.9999 ));
    color_map.addPoint(0.35, kvs::RGBColor( 245, 205, 73.0001 ));
    color_map.addPoint(0.4, kvs::RGBColor( 242, 189, 56 ));
    color_map.addPoint(0.45, kvs::RGBColor( 240, 173, 38.0001 ));
    color_map.addPoint(0.5, kvs::RGBColor( 237, 155, 24.0001 ));
    color_map.addPoint(0.55, kvs::RGBColor( 235, 139, 14 ));
    color_map.addPoint(0.6, kvs::RGBColor( 232, 124, 8.99997 ));
    color_map.addPoint(0.65, kvs::RGBColor( 227, 105, 5.00004 ));
    color_map.addPoint(0.7, kvs::RGBColor( 204, 77.9999, 0 ));
    color_map.addPoint(0.75, kvs::RGBColor( 194, 61.0001, 0 ));
    color_map.addPoint(0.8, kvs::RGBColor( 173, 46, 3.00007 ));
    color_map.addPoint(0.85, kvs::RGBColor( 153, 31.0001, 5.9999 ));
    color_map.addPoint(0.9, kvs::RGBColor( 128, 14, 8.00011 ));
    color_map.addPoint(0.95, kvs::RGBColor( 102, 10.0001, 15.0001 ));
    color_map.addPoint(1, kvs::RGBColor( 77.0001, 12, 23 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("Yellow 15", color_map);

    //blot
    color_map = kvs::ColorMap(256, 0, 1);
    color_map.addPoint(0, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.166, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0.167, kvs::RGBColor( 255, 0, 255 ));
    color_map.addPoint(0.332, kvs::RGBColor( 255, 0, 255 ));
    color_map.addPoint(0.333, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.5, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.501, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.666, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.667, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.832, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(0.833, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 0, 0 ));
    color_map.setColorSpaceToHSV();
    color_map.create();
    this->add("blot", color_map);

    //blue2cyan
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 39, 93 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 65, 120 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 0, 89.0001, 146 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 0, 113, 171 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 0, 137, 197 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 0, 160, 222 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 0, 183, 246 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 20, 197, 255 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 53, 219, 255 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 82.9999, 240, 255 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 115, 255, 255 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 143, 255, 255 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 169, 255, 255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 194, 255, 255 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 222, 255, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("blue2cyan", color_map);

    //blue2yellow
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0, kvs::RGBColor( 127.5, 127.5, 127.5 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 0 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("blue2yellow", color_map);

    //bone_Matlab
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 14, 14, 19.3333 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 28, 28, 38.6667 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 42, 42, 58 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 56, 56, 77.3333 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 70, 70, 96.6667 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 84.0001, 84.125, 115.875 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 98.0001, 103.458, 129.875 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 112, 122.792, 143.875 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 126, 142.125, 157.875 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 140, 161.458, 171.875 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 154, 180.792, 185.875 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 168.375, 199.875, 199.875 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 190.375, 213.875, 213.875 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 212.375, 227.875, 227.875 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 234.375, 241.875, 241.875 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("bone_Matlab", color_map);

    //copper_Matlab
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 20, 12.8, 7.99999 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 40.0001, 25.6, 16 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 60, 38.3999, 24 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 79.9999, 51.1999, 31.9999 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 100, 63.9999, 40.0001 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 120, 76.7999, 47.9999 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 140, 89.6001, 56 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 160, 102.4, 63.9999 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 180, 115.2, 72 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 200, 128, 79.9999 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 220, 140.8, 88 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 240, 153.6, 96.0001 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 166.4, 104 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 179.2, 112 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 192, 120 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 204, 127.5 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("copper_Matlab", color_map);

    //erdc_blue2cyan_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0.000103351, 0, 0.00150481 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 5.29191, 18.8938, 46.1372 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 30.8634, 77.3746 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 0, 42.5575, 106.104 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 0, 55.2758, 133.823 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 4.20161, 70.2451, 155.189 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 13.8854, 87.9301, 168.113 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 22.4564, 106.875, 175.612 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 32.6242, 125.602, 183.665 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 38.1164, 144.571, 193.014 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 48.1851, 163.54, 201.991 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 62.5979, 182.411, 211.04 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 83.9501, 200.49, 223.064 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 115.657, 217.465, 234.209 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 159.702, 232.176, 243.27 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 209.755, 244.471, 249.937 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.997 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2cyan_BW", color_map);

    //erdc_blue2gold
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 44.6553, 11.1809, 255 ));
    color_map.addPoint(-0.874016, kvs::RGBColor( 57.0767, 40.7416, 241.12 ));
    color_map.addPoint(-0.748031, kvs::RGBColor( 69.4977, 59.5708, 227.26 ));
    color_map.addPoint(-0.622047, kvs::RGBColor( 81.919, 75.6141, 213.399 ));
    color_map.addPoint(-0.496063, kvs::RGBColor( 94.3403, 90.3455, 199.502 ));
    color_map.addPoint(-0.370079, kvs::RGBColor( 106.761, 104.33, 185.523 ));
    color_map.addPoint(-0.244094, kvs::RGBColor( 119.183, 117.849, 171.398 ));
    color_map.addPoint(-0.11811, kvs::RGBColor( 131.603, 131.06, 157.035 ));
    color_map.addPoint(0.00787402, kvs::RGBColor( 146.08, 141.403, 142.589 ));
    color_map.addPoint(0.133858, kvs::RGBColor( 160.719, 151.425, 132.021 ));
    color_map.addPoint(0.259843, kvs::RGBColor( 175.845, 159.29, 120.987 ));
    color_map.addPoint(0.385827, kvs::RGBColor( 190.075, 167.309, 109.303 ));
    color_map.addPoint(0.511811, kvs::RGBColor( 203.649, 175.467, 96.6718 ));
    color_map.addPoint(0.637795, kvs::RGBColor( 216.731, 183.751, 82.5777 ));
    color_map.addPoint(0.76378, kvs::RGBColor( 229.44, 192.153, 65.9575 ));
    color_map.addPoint(0.889764, kvs::RGBColor( 241.864, 200.665, 43.8034 ));
    color_map.addPoint(1, kvs::RGBColor( 252.555, 208.195, 1.86111 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2gold", color_map);

    //erdc_blue2gold_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 18.9397, 11.2284, 58.6533 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 31.9454, 6.59647, 106.036 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 36.6891, 4.15729, 150.793 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 54.1266, 16.0103, 179.836 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 78.0422, 36.0004, 194.727 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 99.8419, 59.2329, 197.182 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 117.742, 85.8414, 180.622 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 138.233, 109.033, 150.452 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 157.345, 129.699, 117.549 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 179.189, 147.794, 78.8248 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 201.536, 164.427, 43.4512 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 221.894, 181.237, 29.8692 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 238.823, 199.408, 40.0717 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 246.246, 219.827, 104.508 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 251.367, 238.755, 182.111 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2gold_BW", color_map);

    //erdc_blue2green_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 9.27124e-05, 0, 0.0013499 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 13.7678, 14.7377, 54.2655 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 15.82, 19.353, 99.1845 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 17.7862, 26.0182, 138.151 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 28.8902, 39.8198, 164.052 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 38.772, 62.015, 170.922 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 40.3145, 87.7414, 158.83 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 38.5412, 112.001, 135.856 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 43.7452, 133.005, 116.718 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 57.5946, 152.781, 92.8192 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 82.4364, 170.868, 66.0662 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 112.798, 187.093, 57.0573 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 142.394, 202.71, 65.6398 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 171.838, 217.858, 86.9096 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 200.747, 231.878, 133.803 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 228.603, 244.306, 197.858 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.995 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2green_BW", color_map);

    //erdc_blue2green_muted
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 27.4645, 27.4655, 27.4622 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 36.0881, 33.3183, 69.039 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 45.9314, 37.2603, 107.885 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 53.5911, 43.2669, 140.708 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 61.1238, 54.2994, 161.917 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 64.7486, 72.1515, 166.678 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 61.9117, 93.5679, 155.173 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 57.707, 113.928, 134.367 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 60.2404, 131.246, 116.993 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 70.0335, 147.285, 95.8976 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 89.1544, 161.668, 73.4734 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 113.143, 174.338, 66.4267 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 136.743, 186.46, 72.7831 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 160.26, 198.168, 89.0335 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 183.156, 208.918, 126.69 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 205.216, 218.322, 179.341 ));
    color_map.addPoint(1, kvs::RGBColor( 226.331, 226.336, 226.325 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2green_muted", color_map);

    //erdc_blue2yellow
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 21.1681, 0, 126.382 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 36.2031, 14.0578, 146.276 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 49.2272, 28.1158, 154.163 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 59.7289, 42.1734, 146.99 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 70.2303, 56.2313, 139.816 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 80.732, 70.2892, 132.643 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 91.2334, 84.3471, 125.47 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 101.735, 98.4048, 118.297 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 114.732, 111.814, 108.838 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 130.451, 124.516, 96.8857 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 148.212, 136.688, 83.064 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 165.972, 148.859, 69.2422 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 183.733, 161.031, 55.4204 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 201.493, 173.202, 41.5987 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 219.254, 185.374, 27.7769 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 232.115, 197.411, 35.9856 ));
    color_map.addPoint(1, kvs::RGBColor( 236.516, 208.485, 78.1037 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue2yellow", color_map);

    //erdc_blue_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 10.8526, 19.47, 38.4239 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 14.5215, 30.3843, 70.2278 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 16.2174, 42.0169, 100.834 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 19.7457, 54.532, 130.054 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 27.2378, 68.0937, 156.851 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 31.1337, 82.7855, 183.617 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 41.017, 98.7023, 205.774 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 54.5073, 115.647, 223.893 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 68.1411, 133.787, 237.771 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 83.3452, 152.816, 246.85 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 102.868, 172.052, 251.12 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 127.424, 190.107, 255 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 156.839, 207.566, 255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 189.733, 224.203, 255 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 223.867, 240.188, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_blue_BW", color_map);

    //erdc_brown_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 8.47008e-05, 0, 0.00123325 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 37.4672, 13.2134, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 57.5805, 20.7824, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 76.9287, 28.4203, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 94.4742, 38.4193, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 109.925, 50.8666, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 123.65, 65.0523, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 136.883, 79.9389, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 151.179, 94.6476, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 166.545, 109.174, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 182.22, 123.909, 9.6783 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 197.54, 139.141, 29.7417 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 211.962, 155.052, 46.8932 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 224.478, 171.921, 66.376 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 235.19, 189.33, 93.6069 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 244.649, 206.862, 126.801 ));
    color_map.addPoint(1, kvs::RGBColor( 253.355, 223.172, 158.634 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_brown_BW", color_map);

    //erdc_cyan2orange
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 12.0236, 54.5379, 105.654 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 17.2049, 65.4452, 111.952 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 24.4789, 76.3294, 117.833 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 33.7691, 87.1774, 123.219 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 48.1295, 97.6064, 127.652 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 68.4703, 107.158, 130.606 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 90.001, 116.179, 132.371 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 111.927, 124.789, 132.992 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 133.223, 133.236, 133.221 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 153.023, 141.699, 135.673 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 173.369, 149.935, 137.487 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 194.058, 157.994, 138.832 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 214.909, 165.939, 139.885 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 232.232, 175.273, 142.245 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 242.819, 187.418, 147.333 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 248.789, 201.414, 154.241 ));
    color_map.addPoint(1, kvs::RGBColor( 252.642, 215.129, 161.379 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_cyan2orange", color_map);

    //erdc_divHi_purpleGreen
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 75.876, 0, 124.714 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 102.66, 38.5422, 144.777 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 131.59, 72.635, 167.849 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 160.595, 108.03, 191.489 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 187.475, 143.743, 213.169 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 210.14, 177.363, 230.413 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 226.718, 205.901, 240.94 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 235.452, 226.164, 242.719 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 234.866, 234.876, 234.856 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 223.718, 231.401, 215.572 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 203.4, 216.677, 187.347 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 176.37, 193.708, 153.136 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 145.09, 165.536, 115.721 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 111.931, 135.088, 77.586 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 78.9811, 105.06, 40.3673 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 47.7049, 77.8033, 0.641218 ));
    color_map.addPoint(1, kvs::RGBColor( 25.922, 56.3132, 0 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_divHi_purpleGreen", color_map);

    //erdc_divHi_purpleGreen_dim
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 103.042, 33.4147, 151.156 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 124.05, 58.894, 166.067 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 146.667, 86.5304, 183.019 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 168.999, 115.855, 199.987 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 189.228, 145.404, 214.944 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 205.768, 173.143, 225.988 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 217.316, 196.685, 231.446 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 222.703, 213.518, 229.901 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 221.03, 221.039, 221.02 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 211.239, 218.847, 203.187 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 194.457, 207.643, 178.552 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 172.489, 189.778, 149.362 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 147.143, 167.617, 117.689 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 120.176, 143.431, 85.3638 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 93.1926, 119.329, 53.7438 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 67.5133, 97.1902, 22.397 ));
    color_map.addPoint(1, kvs::RGBColor( 46.5607, 79.6235, 0 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_divHi_purpleGreen_dim", color_map);

    //erdc_divLow_icePeach
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 122.412, 208.447, 254.504 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 108.604, 185.365, 225.213 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 93.5039, 160.508, 194.294 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 78.7328, 135.406, 163.255 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 65.7954, 111.448, 133.475 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 55.9072, 89.8572, 106.169 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 49.7574, 71.6632, 82.3596 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 47.5029, 57.6989, 62.8639 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 49.0498, 49.0518, 49.0528 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 65.2614, 54.6896, 48.8978 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 86.817, 64.8786, 52.6998 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 113.387, 78.8753, 59.6774 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 144.165, 95.881, 69.0971 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 177.969, 114.941, 80.1447 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 213.348, 134.911, 91.8579 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 248.037, 156.795, 105.346 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 180.006, 120.538 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_divLow_icePeach", color_map);

    //erdc_divLow_purpleGreen
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 243.789, 169.954, 242.929 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 222.987, 146.038, 238.77 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 192.134, 124.505, 231.811 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 161.438, 105.444, 194.777 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 131.195, 88.1989, 158.104 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 103.277, 73.476, 123.516 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 79.4039, 61.7064, 92.7068 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 60.8741, 53.3062, 67.1795 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 49.0498, 49.0533, 49.0523 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 51.0966, 59.4663, 42.9976 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 58.6885, 74.3929, 42.1329 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 71.2677, 93.3494, 45.5448 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 87.9564, 115.583, 52.4543 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 107.496, 140.109, 61.874 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 128.35, 165.75, 72.5161 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 148.792, 191.166, 82.8671 ));
    color_map.addPoint(1, kvs::RGBColor( 165.93, 213.493, 90.8473 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_divLow_purpleGreen", color_map);

    //erdc_gold_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0.00486879 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 32.7326, 16.2248, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 49.4177, 28.3195, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 66.2388, 40.7669, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 83.7792, 53.7002, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 101.93, 67.1466, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 120.607, 81.1566, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 139.292, 95.8359, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 157.45, 111.363, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 174.814, 127.784, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 191.142, 145.044, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 206.453, 163.047, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 220.721, 181.738, 26.1553 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 234.016, 200.83, 59.5846 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 246.563, 220.1, 94.25 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 239.548, 126.507 ));
    color_map.addPoint(1, kvs::RGBColor( 254.802, 255, 156.13 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_gold_BW", color_map);

    //erdc_green2yellow_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 26.9132, 15.3999 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 40.6608, 26.5577 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 0, 55.973, 39.6321 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 0, 71.9804, 51.9718 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 0, 88.3144, 60.0913 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 0, 105, 60.0341 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 0, 121.68, 55.5841 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 15.1379, 138.117, 54.4705 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 59.4357, 154.204, 53.7007 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 94.2998, 169.56, 57.7667 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 127.104, 184.204, 73.5004 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 153.492, 199.472, 97.1078 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 179.318, 214.327, 130.594 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 204.812, 228.59, 171.988 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 230.478, 242.318, 215.912 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.995 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_green2yellow_BW", color_map);

    //erdc_iceFire_H
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0.000103385, 0, 0.00150481 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 0, 30.7023, 77.1821 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 0, 55.2287, 133.766 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 14.0881, 87.9814, 168.172 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 32.652, 125.61, 183.673 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 48.1835, 163.534, 201.983 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 83.5566, 200.158, 222.726 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 155.101, 227.502, 238.564 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 224.75, 232.605, 208.615 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 242.609, 213.083, 114.566 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 230.643, 176.075, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 217.788, 130.27, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 198.159, 84.1959, 0.224907 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 171.58, 35.4672, 0.686965 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 129.748, 0, 0 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 76.3513, 0.0934037, 0.139696 ));
    color_map.addPoint(1, kvs::RGBColor( 4.01673, 0.846654, 1.1617e-05 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_iceFire_H", color_map);

    //erdc_iceFire_L
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 221.974, 233.011, 212.391 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 149.664, 226.406, 238.171 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 80.5366, 197.993, 221.304 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 46.6701, 161.169, 200.869 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 30.0668, 123.454, 182.025 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 12.9346, 85.6746, 166.959 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 0, 53.5179, 130.517 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 0, 29.2457, 73.7843 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 4.01673, 0.846654, 1.1617e-05 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 79.7931, 0, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 132.821, 0, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 173.427, 38.9002, 0.662898 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 200.203, 86.5671, 0.20347 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 218.625, 133.236, 0 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 232.298, 178.442, 0 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 242.74, 214.918, 122.029 ));
    color_map.addPoint(1, kvs::RGBColor( 224.75, 232.605, 208.615 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_iceFire_L", color_map);

    //erdc_magenta_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0.00647759 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 32.8175, 11.6479, 29.6692 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 58.1739, 12.1456, 51.3703 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 83.4546, 9.53866, 71.9373 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 107.343, 10.4082, 91.058 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 130.448, 16.3762, 109.78 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 152.886, 26.1849, 128.586 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 174.585, 38.3867, 147.754 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 195.283, 52.5244, 167.296 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 213.99, 69.4339, 186.611 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 228.317, 91.1865, 203.314 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 237.211, 116.745, 215.981 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 241.21, 143.957, 224.546 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 241.994, 171.042, 230.081 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 241.517, 197.069, 234.134 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 241.553, 221.703, 238.26 ));
    color_map.addPoint(1, kvs::RGBColor( 243.453, 243.461, 243.455 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_magenta_BW", color_map);

    //erdc_marine2gold_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 2.84685e-05, 0, 0.000414505 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 10.5352, 15.8051, 53.5135 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 4.7317, 25.842, 89.4244 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 1.24033, 38.211, 117.569 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 21.3268, 53.7655, 132.066 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 44.1716, 70.4142, 138.157 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 66.2635, 87.6886, 136.647 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 92.3862, 104.072, 128.595 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 119.408, 119.41, 119.406 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 148.609, 134.524, 95.6031 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 176.356, 149.239, 69.9378 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 200.036, 164.498, 63.0697 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 219.886, 181.148, 70.1709 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 234.82, 199.645, 89.6486 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 243.727, 219.223, 136.053 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 248.921, 238.254, 199.071 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.996 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_marine2gold_BW", color_map);

    //erdc_orange_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0.00647205 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 34.6471, 15.1425, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 57.2036, 23.134, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 81.1112, 30.51, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 105.683, 38.3127, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 130.325, 47.1454, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 154.403, 57.6384, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 177.295, 70.2502, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 198.346, 85.2835, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 217.132, 102.622, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 233.554, 121.785, 0.153759 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 247.856, 142.26, 9.2168 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 255, 163.528, 34.6716 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 184.925, 71.3923 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 206.092, 111.724 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 227.73, 149.694 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 249.372, 184.008 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_orange_BW", color_map);

    //erdc_pbj_lin
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 23.4144, 15.5926, 27.0734 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 40.8793, 22.9506, 49.1418 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 57.3342, 30.9213, 69.3926 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 74.2721, 40.1546, 86.9111 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 91.8038, 51.0989, 99.1703 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 111.562, 63.7648, 98.7363 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 130.722, 77.7671, 90.7685 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 148.564, 92.0229, 85.3944 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 167.057, 106.175, 78.1195 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 185.102, 120.699, 71.158 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 198.422, 137.172, 77.1877 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 208.053, 154.767, 97.5199 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 213.986, 173.224, 126.89 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 217.961, 191.675, 161.107 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 221.718, 209.74, 195.991 ));
    color_map.addPoint(1, kvs::RGBColor( 226.331, 226.335, 226.329 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_pbj_lin", color_map);

    //erdc_purple2green
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 59.9265, 12.3198, 135.379 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 77.2568, 27.6468, 140.86 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 91.8615, 42.345, 145.223 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 103.72, 57.8294, 147.74 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 113.239, 73.8582, 148.434 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 120.78, 90.2124, 147.376 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 126.897, 106.629, 144.817 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 132.367, 122.844, 141.262 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 138.435, 138.443, 138.433 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 144.407, 154.017, 134.512 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 151.781, 169.056, 131.799 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 160.303, 183.779, 130.222 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 169.67, 198.351, 129.582 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 179.566, 212.905, 129.617 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 189.681, 227.544, 130.047 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 199.705, 242.358, 130.606 ));
    color_map.addPoint(1, kvs::RGBColor( 208.747, 255, 131.041 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_purple2green", color_map);

    //erdc_purple2green_dark
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 27.4523, 0, 109.314 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 49.062, 0, 114.699 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 65.0551, 16.5479, 119.015 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 77.5853, 33.9318, 121.559 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 87.5165, 50.2758, 122.347 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 95.3384, 66.39, 121.441 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 101.617, 82.3324, 119.073 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 107.104, 97.9843, 115.715 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 113.013, 113.02, 113.012 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 118.716, 128.045, 109.199 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 125.705, 142.584, 106.486 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 133.787, 156.848, 104.809 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 142.695, 170.999, 103.986 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 152.137, 185.156, 103.772 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 161.809, 199.418, 103.897 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 171.407, 213.869, 104.1 ));
    color_map.addPoint(1, kvs::RGBColor( 180.063, 227.654, 104.155 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_purple2green_dark", color_map);

    //erdc_purple2pink_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 29.9783, 7.42565, 44.8484 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 45.4838, 11.6911, 72.7908 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 60.6214, 17.3444, 98.8678 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 76.7236, 24.3854, 123.625 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 94.5869, 34.8988, 141.521 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 114.503, 48.2646, 150.101 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 135.143, 62.678, 152.64 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 155.528, 76.664, 155.612 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 177.755, 89.5779, 157.175 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 200.394, 102.508, 157.431 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 219.942, 116.65, 164.381 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 232.965, 133.993, 179.861 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 237.809, 155.713, 195.69 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 235.232, 180.276, 208.468 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 229.832, 204.783, 218.359 ));
    color_map.addPoint(1, kvs::RGBColor( 226.331, 226.336, 226.325 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_purple2pink_BW", color_map);

    //erdc_purple_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 1.08732e-05, 0, 0.000158315 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 25.6476, 15.1243, 37.1448 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 42.7875, 22.6752, 65.013 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 59.0187, 31.4514, 91.9303 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 75.6582, 41.5719, 117.626 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 92.6188, 53.3679, 141.03 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 109.94, 66.4979, 162.485 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 127.042, 81.6031, 179.979 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 144.701, 97.017, 198.413 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 160.492, 113.547, 215.424 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 175.535, 131.93, 228.402 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 190.972, 150.681, 239.639 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 205.279, 170.329, 249.295 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 216.983, 191.918, 253.061 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 228.796, 213.806, 253.494 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 241.858, 235.264, 253.584 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.992 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_purple_BW", color_map);

    //erdc_rainbow_bright
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 82.9999, 38.0001, 245 ));
    color_map.addPoint(-0.866221, kvs::RGBColor( 75.747, 95.7744, 245.778 ));
    color_map.addPoint(-0.732441, kvs::RGBColor( 45.977, 136.889, 245.98 ));
    color_map.addPoint(-0.598662, kvs::RGBColor( 33.201, 165.548, 237.06 ));
    color_map.addPoint(-0.464883, kvs::RGBColor( 11.3511, 191.162, 218.279 ));
    color_map.addPoint(-0.331104, kvs::RGBColor( 6.91879, 211.832, 183.989 ));
    color_map.addPoint(-0.197324, kvs::RGBColor( 66.1735, 220.867, 138.607 ));
    color_map.addPoint(-0.0635452, kvs::RGBColor( 109.233, 227.135, 84.1038 ));
    color_map.addPoint(0.0702341, kvs::RGBColor( 144.968, 229.12, 47.8439 ));
    color_map.addPoint(0.204013, kvs::RGBColor( 188.256, 227.031, 21.0493 ));
    color_map.addPoint(0.337793, kvs::RGBColor( 215.592, 219.647, 3.76265 ));
    color_map.addPoint(0.471572, kvs::RGBColor( 232.609, 206.045, 0 ));
    color_map.addPoint(0.605351, kvs::RGBColor( 245.526, 181.163, 0 ));
    color_map.addPoint(0.73913, kvs::RGBColor( 254.865, 153.066, 4.49524 ));
    color_map.addPoint(0.87291, kvs::RGBColor( 253.51, 113.724, 49.4476 ));
    color_map.addPoint(1, kvs::RGBColor( 250.004, 63.0118, 66.9882 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_rainbow_bright", color_map);

    //erdc_rainbow_dark
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 107.992 ));
    color_map.addPoint(-0.866221, kvs::RGBColor( 0, 30.4332, 134.955 ));
    color_map.addPoint(-0.732441, kvs::RGBColor( 0, 60.8662, 161.919 ));
    color_map.addPoint(-0.598662, kvs::RGBColor( 0, 88.4473, 175.409 ));
    color_map.addPoint(-0.464883, kvs::RGBColor( 0, 114.806, 183.126 ));
    color_map.addPoint(-0.331104, kvs::RGBColor( 0, 141.156, 169.534 ));
    color_map.addPoint(-0.197324, kvs::RGBColor( 0, 166.026, 132.422 ));
    color_map.addPoint(-0.0635452, kvs::RGBColor( 29.5395, 184.821, 89.9785 ));
    color_map.addPoint(0.0702341, kvs::RGBColor( 83.3266, 199.205, 35.7477 ));
    color_map.addPoint(0.204013, kvs::RGBColor( 133.305, 203.624, 7.25791 ));
    color_map.addPoint(0.337793, kvs::RGBColor( 179.306, 201.115, 2.25868 ));
    color_map.addPoint(0.471572, kvs::RGBColor( 215.505, 191.539, 0 ));
    color_map.addPoint(0.605351, kvs::RGBColor( 243.712, 176.16, 0 ));
    color_map.addPoint(0.73913, kvs::RGBColor( 253.828, 144.819, 15.7724 ));
    color_map.addPoint(0.87291, kvs::RGBColor( 251.867, 102.866, 42.037 ));
    color_map.addPoint(1, kvs::RGBColor( 250.004, 63.0118, 66.9882 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_rainbow_dark", color_map);

    //erdc_red2purple_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 42.7872, 4.23991, 10.9976 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 66.965, 2.74367, 20.1751 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 89.735, 2.59738, 25.7361 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 112.521, 4.10129, 33.6393 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 133.136, 14.1773, 49.8844 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 151.432, 26.595, 79.1097 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 166.93, 40.3193, 114.364 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 180.398, 56.3331, 145.415 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 191.124, 74.7833, 173.137 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 199.305, 94.4818, 198.714 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 206.538, 115.03, 218.237 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 215.281, 135.523, 229.615 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 220.619, 158.33, 233.595 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 223.135, 182.084, 232.122 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 224.595, 205.413, 228.55 ));
    color_map.addPoint(1, kvs::RGBColor( 226.331, 226.336, 226.327 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_red2purple_BW", color_map);

    //erdc_red2yellow_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0.000192345, 0, 0.00280059 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 46.6268, 6.7344, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 78.183, 0, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 107.824, 0, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 133.351, 0, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 154.459, 0, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 171.488, 36.1284, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 185.683, 62.2264, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 199.21, 85.0308, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 210.375, 108.014, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 218.253, 131.782, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 224.525, 155.256, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 232.128, 177.354, 0 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 239.978, 198.662, 56.9996 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 246.808, 218.936, 120.748 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 251.638, 237.969, 191.654 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.999 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_red2yellow_BW", color_map);

    //erdc_red_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 37.537, 12.2434, 10.2463 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 64.6198, 15.7457, 7.68399 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 90.795, 19.0314, 11.3959 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 116.721, 23.8408, 16.2417 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 142.086, 31.2921, 21.9303 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 169.621, 36.7807, 26.9242 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 194.777, 47.6993, 35.2731 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 215.994, 64.9123, 48.2988 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 230.944, 88.2139, 65.8448 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 240.065, 114.013, 88.3006 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 245.465, 139.466, 116.681 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 251.897, 162.505, 145.336 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 253.522, 186.705, 175.429 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 253.293, 210.698, 204.145 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 253.575, 233.887, 231.13 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.995 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_red_BW", color_map);

    //erdc_sapphire2gold_BW
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 27.4645, 27.4655, 27.462 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 47.2005, 28.6503, 78.6813 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 60.3794, 29.1294, 124.409 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 72.1548, 32.1777, 163.063 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 87.9207, 43.769, 188.627 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 105.398, 61.8046, 196.128 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 122.875, 79.8405, 183.559 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 140.353, 97.8764, 156.117 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 157.83, 115.912, 130.371 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 175.307, 133.948, 101.982 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 192.784, 151.984, 73.9304 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 210.262, 170.02, 65.152 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 227.71, 187.89, 70.6248 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 239.407, 205.266, 89.6922 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 246.455, 223.088, 136.609 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 250.437, 240.09, 199.558 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 254.996 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("erdc_sapphire2gold_BW", color_map);

    //gist_earth
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 61.0001, 7, 106 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 23, 65, 142 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 24, 90, 140 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 26.9999, 111, 136 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 31.9999, 134, 128 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 40.0001, 152, 113 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 49.9999, 166, 97 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 72, 183, 77.0001 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 119, 197, 70 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 173, 200, 79 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 230, 193, 96.0001 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 253, 180, 133 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 184, 179 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 200, 200 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 221, 221 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("gist_earth", color_map);

    //heated_object
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 89.0001, 22, 0 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 115, 44, 0 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 134, 59.0001, 0 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 148, 70.9999, 0 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 159, 79.9999, 0 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 171, 90, 0 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 183, 100, 0 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 197, 112, 0 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 214, 126, 0 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 230, 138, 0 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 247, 153, 0 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 255, 168, 0 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 184, 0 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 211, 75.9999 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 249, 185 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("heated_object", color_map);

    //hsv
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 255, 0, 0 ));
    color_map.addPoint(-0.666666, kvs::RGBColor( 255, 0, 255 ));
    color_map.addPoint(-0.333333, kvs::RGBColor( 0, 0, 255 ));
    color_map.addPoint(0, kvs::RGBColor( 0, 255, 255 ));
    color_map.addPoint(0.33333, kvs::RGBColor( 0, 255, 0 ));
    color_map.addPoint(0.66666, kvs::RGBColor( 255, 255, 0 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 0, 0 ));
    color_map.setColorSpaceToRGB();
    color_map.create();
    this->add("hsv", color_map);

    //hue_L60
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 246.02, 102.151, 89.135 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 246.053, 94.987, 137.152 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 227.55, 102.265, 193.69 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 202.121, 113.974, 230.269 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 173.963, 127.383, 246.502 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 143.8, 141.036, 247.053 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 112.718, 154.631, 229.908 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 77.9022, 167.538, 195.275 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 50.299, 175.418, 158.333 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 49.4399, 178.981, 120.527 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 63.7158, 180.061, 81.6013 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 89.5866, 177.841, 51.7443 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 127.015, 170.714, 31.9342 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 162.557, 159.691, 27.3949 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 194.339, 145.024, 39.7321 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 226.806, 122.685, 61.3135 ));
    color_map.addPoint(1, kvs::RGBColor( 246.02, 102.151, 89.135 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("hue_L60", color_map);

    //magenta
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 93, 0, 39 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 120, 0, 65 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 146, 0, 89.0001 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 171, 0, 113 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 197, 0, 137 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 222, 0, 160 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 246, 0, 183 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 255, 20, 197 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 255, 53, 219 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 255, 82.9999, 240 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 255, 115, 255 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 255, 143, 255 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 255, 169, 255 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 255, 194, 255 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 255, 222, 255 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("magenta", color_map);

    //nic_CubicL
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 122.391, 3.01175, 135.328 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 133.164, 14.0577, 180.264 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 129.639, 60.5059, 221.28 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 115.162, 95.3277, 251.75 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 100.381, 126.8, 248.64 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 83.8009, 152.908, 227.42 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 63.761, 176.023, 198.531 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 63.6623, 195.051, 164.694 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 75.9783, 209.474, 128.645 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 86.0648, 222.512, 91.404 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 109.653, 233.016, 75.7551 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 149.734, 237.502, 85.005 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 185.624, 238.657, 90.2042 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 210.733, 234.876, 93.0918 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 227.766, 215.811, 95.0288 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 246.163, 188.404, 96.519 ));
    color_map.addPoint(1, kvs::RGBColor( 250.725, 152.35, 93.5483 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("nic_CubicL", color_map);

    //nic_CubicYF
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 131.351, 12.291, 170.773 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 132.781, 43.0835, 204.146 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 125.892, 71.042, 232.515 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 112.207, 94.2161, 251.169 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 101.728, 116.686, 251.699 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 89.416, 137.864, 237.05 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 76.2009, 156.984, 218.721 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 61.1816, 174.691, 196.23 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 58.3522, 188.534, 171.688 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 67.1407, 200.45, 145.347 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 76.0173, 211.226, 117.355 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 84.3846, 220.338, 89.9319 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 97.6803, 229.033, 73.2638 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 125.009, 233.958, 78.5301 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 159.049, 236.137, 84.7388 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 182.952, 235.944, 87.3314 ));
    color_map.addPoint(1, kvs::RGBColor( 204, 236.002, 89.9895 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("nic_CubicYF", color_map);

    //nic_Edge
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 48.758, 48.758, 48.758 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 61.0684, 1.38984, 156.779 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 56.2512, 15.7452, 220.204 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 44.648, 71.1419, 249.375 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 36.5991, 146.898, 254.631 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 42.4463, 222.33, 246.315 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 95.9315, 253.357, 250.367 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 173.909, 252.781, 254.806 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 243.314, 242.947, 240.654 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 254.932, 253.218, 169.038 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 249.747, 252.824, 91.2831 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 247.037, 218.017, 41.478 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 254.807, 141.958, 36.8024 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 248.36, 66.8687, 45.3762 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 217.351, 13.431, 56.8584 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 151.442, 2.32745, 60.908 ));
    color_map.addPoint(1, kvs::RGBColor( 48.758, 48.758, 48.758 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("nic_Edge", color_map);

    //pink_Matlab
    color_map = kvs::ColorMap(256, -1, 1);
    color_map.addPoint(-1, kvs::RGBColor( 0, 0, 0 ));
    color_map.addPoint(-0.87451, kvs::RGBColor( 79.6661, 52.1536, 52.1536 ));
    color_map.addPoint(-0.74902, kvs::RGBColor( 112.665, 73.7565, 73.7565 ));
    color_map.addPoint(-0.623529, kvs::RGBColor( 137.986, 90.3327, 90.3327 ));
    color_map.addPoint(-0.498039, kvs::RGBColor( 159.332, 104.307, 104.307 ));
    color_map.addPoint(-0.372549, kvs::RGBColor( 178.138, 116.619, 116.619 ));
    color_map.addPoint(-0.247059, kvs::RGBColor( 194.923, 128.082, 127.75 ));
    color_map.addPoint(-0.121569, kvs::RGBColor( 201.779, 150.837, 137.986 ));
    color_map.addPoint(0.00392157, kvs::RGBColor( 208.411, 170.582, 147.513 ));
    color_map.addPoint(0.129412, kvs::RGBColor( 214.837, 188.269, 156.461 ));
    color_map.addPoint(0.254902, kvs::RGBColor( 221.077, 204.43, 164.924 ));
    color_map.addPoint(0.380392, kvs::RGBColor( 227.145, 219.405, 172.974 ));
    color_map.addPoint(0.505882, kvs::RGBColor( 233.056, 233.056, 181.37 ));
    color_map.addPoint(0.631373, kvs::RGBColor( 238.82, 238.82, 202.62 ));
    color_map.addPoint(0.756863, kvs::RGBColor( 244.448, 244.448, 221.845 ));
    color_map.addPoint(0.882353, kvs::RGBColor( 249.95, 249.95, 239.531 ));
    color_map.addPoint(1, kvs::RGBColor( 255, 255, 255 ));
    color_map.setColorSpaceToLab();
    color_map.create();
    this->add("pink_Matlab", color_map);

#ifdef COMM_MODE_IS
    // Black
    color_map = kvs::ColorMap( m_resolution, min_value, max_value );
    color_map.addPoint( 0.00, kvs::RGBColor(  0,  0,  0 ) );
    color_map.addPoint( 1.00, kvs::RGBColor(  0,  0,  0 ) );
    color_map.create();
    this->add( "Black", color_map );

    // White
    color_map = kvs::ColorMap( m_resolution, min_value, max_value );
    color_map.addPoint( 0.00, kvs::RGBColor( 255, 255, 255 ) );
    color_map.addPoint( 1.00, kvs::RGBColor( 255, 255, 255 ) );
    color_map.create();
    this->add( "White", color_map );
#endif
}

ColorMapLibrary::~ColorMapLibrary()
{
}

void ColorMapLibrary::add( const std::string& name, const kvs::ColorMap& color_map )
{
    this->push_back( name );
    m_map[name] = color_map;
}

const std::string ColorMapLibrary::getNameByIndex( const size_t n ) const
{
    return this->at( n );
}

const kvs::ColorMap& ColorMapLibrary::getColorMapByIndex( const size_t n ) const
{
    return m_map.at( at( n ) );
}

const size_t ColorMapLibrary::getIndexByName( const std::string& name ) const
{
    size_t n;
    for ( n = 0; n < size(); n++ )
    {
        if ( at( n ) == name ) break;
    }
    return n;
}

const kvs::ColorMap& ColorMapLibrary::getColorMapByName( const std::string& name ) const
{
    return m_map.at( name );
}

